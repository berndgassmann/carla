// Copyright (c) 2017 Computer Vision Center (CVC) at the Universitat Autonoma
// de Barcelona (UAB).
//
// This work is licensed under the terms of the MIT license.
// For a copy, see <https://opensource.org/licenses/MIT>.

#pragma once

#include "carla/Buffer.h"
#include "carla/Memory.h"

#if defined(WITH_ROS2) && defined(CARLA_SERVER_BUILD)
// When compiling with ROS2 in server we must not move the data on deserialization
// because the data is used multiple times: by the ROS2 server as well as the TCP server
# define DESERIALIZE_MOVE_DATA(data)  data
# define DESERIALIZE_DECL_DATA(data)  const &data
# define DESERIALIZE_FORWARD_DATA(type, data)  std::forward<type const>(data)
#else
# define DESERIALIZE_MOVE_DATA(data)  std::move(data)
# define DESERIALIZE_DECL_DATA(data)  &&data
# define DESERIALIZE_FORWARD_DATA(type, data)  std::forward<type>(data)
#endif

namespace carla {
namespace sensor {

  class SensorData;

  /// Deserializes a Buffer containing data generated by a sensor and creates
  /// the appropriate SensorData class that contains the sensor's measurement.
  ///
  /// This class encapsulates the SensorRegistry to avoid including all the
  /// serializers and SensorData classes.
  class Deserializer {
  public:

    static SharedPtr<SensorData> Deserialize(Buffer DESERIALIZE_DECL_DATA(buffer));
  };

} // namespace sensor
} // namespace carla
