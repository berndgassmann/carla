// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file CarlaWalkerControl.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "CarlaWalkerControl.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

carla_msgs::msg::CarlaWalkerControl::CarlaWalkerControl()
{
    // m_header com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@6fa51cd4

    // m_direction com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@2767e23c

    // m_speed com.eprosima.idl.parser.typecode.PrimitiveTypeCode@710c2b53
    m_speed = 0.0;
    // m_jump com.eprosima.idl.parser.typecode.PrimitiveTypeCode@5386659f
    m_jump = false;

}

carla_msgs::msg::CarlaWalkerControl::~CarlaWalkerControl()
{



}

carla_msgs::msg::CarlaWalkerControl::CarlaWalkerControl(
        const CarlaWalkerControl& x)
{
    m_header = x.m_header;
    m_direction = x.m_direction;
    m_speed = x.m_speed;
    m_jump = x.m_jump;
}

carla_msgs::msg::CarlaWalkerControl::CarlaWalkerControl(
        CarlaWalkerControl&& x)
{
    m_header = std::move(x.m_header);
    m_direction = std::move(x.m_direction);
    m_speed = x.m_speed;
    m_jump = x.m_jump;
}

carla_msgs::msg::CarlaWalkerControl& carla_msgs::msg::CarlaWalkerControl::operator =(
        const CarlaWalkerControl& x)
{

    m_header = x.m_header;
    m_direction = x.m_direction;
    m_speed = x.m_speed;
    m_jump = x.m_jump;

    return *this;
}

carla_msgs::msg::CarlaWalkerControl& carla_msgs::msg::CarlaWalkerControl::operator =(
        CarlaWalkerControl&& x)
{

    m_header = std::move(x.m_header);
    m_direction = std::move(x.m_direction);
    m_speed = x.m_speed;
    m_jump = x.m_jump;

    return *this;
}

bool carla_msgs::msg::CarlaWalkerControl::operator ==(
        const CarlaWalkerControl& x) const
{

    return (m_header == x.m_header && m_direction == x.m_direction && m_speed == x.m_speed && m_jump == x.m_jump);
}

bool carla_msgs::msg::CarlaWalkerControl::operator !=(
        const CarlaWalkerControl& x) const
{
    return !(*this == x);
}

size_t carla_msgs::msg::CarlaWalkerControl::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += std_msgs::msg::Header::getMaxCdrSerializedSize(current_alignment);
    current_alignment += geometry_msgs::msg::Vector3::getMaxCdrSerializedSize(current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}

size_t carla_msgs::msg::CarlaWalkerControl::getCdrSerializedSize(
        const carla_msgs::msg::CarlaWalkerControl& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += std_msgs::msg::Header::getCdrSerializedSize(data.header(), current_alignment);
    current_alignment += geometry_msgs::msg::Vector3::getCdrSerializedSize(data.direction(), current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}

void carla_msgs::msg::CarlaWalkerControl::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_header;
    scdr << m_direction;
    scdr << m_speed;
    scdr << m_jump;

}

void carla_msgs::msg::CarlaWalkerControl::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_header;
    dcdr >> m_direction;
    dcdr >> m_speed;
    dcdr >> m_jump;
}

/*!
 * @brief This function copies the value in member header
 * @param _header New value to be copied in member header
 */
void carla_msgs::msg::CarlaWalkerControl::header(
        const std_msgs::msg::Header& _header)
{
    m_header = _header;
}

/*!
 * @brief This function moves the value in member header
 * @param _header New value to be moved in member header
 */
void carla_msgs::msg::CarlaWalkerControl::header(
        std_msgs::msg::Header&& _header)
{
    m_header = std::move(_header);
}

/*!
 * @brief This function returns a constant reference to member header
 * @return Constant reference to member header
 */
const std_msgs::msg::Header& carla_msgs::msg::CarlaWalkerControl::header() const
{
    return m_header;
}

/*!
 * @brief This function returns a reference to member header
 * @return Reference to member header
 */
std_msgs::msg::Header& carla_msgs::msg::CarlaWalkerControl::header()
{
    return m_header;
}
/*!
 * @brief This function copies the value in member direction
 * @param _direction New value to be copied in member direction
 */
void carla_msgs::msg::CarlaWalkerControl::direction(
        const geometry_msgs::msg::Vector3& _direction)
{
    m_direction = _direction;
}

/*!
 * @brief This function moves the value in member direction
 * @param _direction New value to be moved in member direction
 */
void carla_msgs::msg::CarlaWalkerControl::direction(
        geometry_msgs::msg::Vector3&& _direction)
{
    m_direction = std::move(_direction);
}

/*!
 * @brief This function returns a constant reference to member direction
 * @return Constant reference to member direction
 */
const geometry_msgs::msg::Vector3& carla_msgs::msg::CarlaWalkerControl::direction() const
{
    return m_direction;
}

/*!
 * @brief This function returns a reference to member direction
 * @return Reference to member direction
 */
geometry_msgs::msg::Vector3& carla_msgs::msg::CarlaWalkerControl::direction()
{
    return m_direction;
}
/*!
 * @brief This function sets a value in member speed
 * @param _speed New value for member speed
 */
void carla_msgs::msg::CarlaWalkerControl::speed(
        float _speed)
{
    m_speed = _speed;
}

/*!
 * @brief This function returns the value of member speed
 * @return Value of member speed
 */
float carla_msgs::msg::CarlaWalkerControl::speed() const
{
    return m_speed;
}

/*!
 * @brief This function returns a reference to member speed
 * @return Reference to member speed
 */
float& carla_msgs::msg::CarlaWalkerControl::speed()
{
    return m_speed;
}

/*!
 * @brief This function sets a value in member jump
 * @param _jump New value for member jump
 */
void carla_msgs::msg::CarlaWalkerControl::jump(
        bool _jump)
{
    m_jump = _jump;
}

/*!
 * @brief This function returns the value of member jump
 * @return Value of member jump
 */
bool carla_msgs::msg::CarlaWalkerControl::jump() const
{
    return m_jump;
}

/*!
 * @brief This function returns a reference to member jump
 * @return Reference to member jump
 */
bool& carla_msgs::msg::CarlaWalkerControl::jump()
{
    return m_jump;
}


size_t carla_msgs::msg::CarlaWalkerControl::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;



    return current_align;
}

bool carla_msgs::msg::CarlaWalkerControl::isKeyDefined()
{
    return false;
}

void carla_msgs::msg::CarlaWalkerControl::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
        
}


