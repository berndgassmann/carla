// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file CarlaControl.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _FAST_DDS_GENERATED_CARLA_MSGS_MSG_CARLACONTROL_H_
#define _FAST_DDS_GENERATED_CARLA_MSGS_MSG_CARLACONTROL_H_

#include <stdint.h>
#include <array>
#include <bitset>
#include <map>
#include <string>
#include <vector>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec(dllexport)
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(CarlaControl_SOURCE)
#define CarlaControl_DllAPI __declspec(dllexport)
#else
#define CarlaControl_DllAPI __declspec(dllimport)
#endif  // CarlaControl_SOURCE
#else
#define CarlaControl_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define CarlaControl_DllAPI
#endif  // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
}  // namespace fastcdr
}  // namespace eprosima

namespace carla_msgs {
namespace msg {
namespace CarlaControl_Constants {
const int8_t PLAY = 0;
const int8_t PAUSE = 1;
const int8_t STEP_ONCE = 2;
}  // namespace CarlaControl_Constants
/*!
 * @brief This class represents the structure CarlaControl defined by the user in the IDL file.
 * @ingroup CARLACONTROL
 */
class CarlaControl {
public:
  /*!
   * @brief Default constructor.
   */
  eProsima_user_DllExport CarlaControl();

  /*!
   * @brief Default destructor.
   */
  eProsima_user_DllExport ~CarlaControl();

  /*!
   * @brief Copy constructor.
   * @param x Reference to the object carla_msgs::msg::CarlaControl that will be copied.
   */
  eProsima_user_DllExport CarlaControl(const CarlaControl& x);

  /*!
   * @brief Move constructor.
   * @param x Reference to the object carla_msgs::msg::CarlaControl that will be copied.
   */
  eProsima_user_DllExport CarlaControl(CarlaControl&& x);

  /*!
   * @brief Copy assignment.
   * @param x Reference to the object carla_msgs::msg::CarlaControl that will be copied.
   */
  eProsima_user_DllExport CarlaControl& operator=(const CarlaControl& x);

  /*!
   * @brief Move assignment.
   * @param x Reference to the object carla_msgs::msg::CarlaControl that will be copied.
   */
  eProsima_user_DllExport CarlaControl& operator=(CarlaControl&& x);

  /*!
   * @brief Comparison operator.
   * @param x carla_msgs::msg::CarlaControl object to compare.
   */
  eProsima_user_DllExport bool operator==(const CarlaControl& x) const;

  /*!
   * @brief Comparison operator.
   * @param x carla_msgs::msg::CarlaControl object to compare.
   */
  eProsima_user_DllExport bool operator!=(const CarlaControl& x) const;

  /*!
   * @brief This function sets a value in member command
   * @param _command New value for member command
   */
  eProsima_user_DllExport void command(int8_t _command);

  /*!
   * @brief This function returns the value of member command
   * @return Value of member command
   */
  eProsima_user_DllExport int8_t command() const;

  /*!
   * @brief This function returns a reference to member command
   * @return Reference to member command
   */
  eProsima_user_DllExport int8_t& command();

  /*!
   * @brief This function returns the maximum serialized size of an object
   * depending on the buffer alignment.
   * @param current_alignment Buffer alignment.
   * @return Maximum serialized size.
   */
  eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

  /*!
   * @brief This function returns the serialized size of a data depending on the buffer alignment.
   * @param data Data which is calculated its serialized size.
   * @param current_alignment Buffer alignment.
   * @return Serialized size.
   */
  eProsima_user_DllExport static size_t getCdrSerializedSize(const carla_msgs::msg::CarlaControl& data,
                                                             size_t current_alignment = 0);

  /*!
   * @brief This function serializes an object using CDR serialization.
   * @param cdr CDR serialization object.
   */
  eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr& cdr) const;

  /*!
   * @brief This function deserializes an object using CDR serialization.
   * @param cdr CDR serialization object.
   */
  eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr& cdr);

  /*!
   * @brief This function returns the maximum serialized size of the Key of an object
   * depending on the buffer alignment.
   * @param current_alignment Buffer alignment.
   * @return Maximum serialized size.
   */
  eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

  /*!
   * @brief This function tells you if the Key has been defined for this type
   */
  eProsima_user_DllExport static bool isKeyDefined();

  /*!
   * @brief This function serializes the key members of an object using CDR serialization.
   * @param cdr CDR serialization object.
   */
  eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr& cdr) const;

private:
  int8_t m_command;
};
}  // namespace msg
}  // namespace carla_msgs

#endif  // _FAST_DDS_GENERATED_CARLA_MSGS_MSG_CARLACONTROL_H_