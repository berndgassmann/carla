// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file CarlaStatus.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "CarlaStatus.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

carla_msgs::msg::CarlaStatus::CarlaStatus()
{
    // m_frame com.eprosima.idl.parser.typecode.PrimitiveTypeCode@7e5afaa6
    m_frame = 0;
    // m_fixed_delta_seconds com.eprosima.idl.parser.typecode.PrimitiveTypeCode@63a12c68
    m_fixed_delta_seconds = 0.0;
    // m_synchronous_mode com.eprosima.idl.parser.typecode.PrimitiveTypeCode@28f3b248
    m_synchronous_mode = false;
    // m_synchronous_mode_running com.eprosima.idl.parser.typecode.PrimitiveTypeCode@1b1426f4
    m_synchronous_mode_running = false;

}

carla_msgs::msg::CarlaStatus::~CarlaStatus()
{



}

carla_msgs::msg::CarlaStatus::CarlaStatus(
        const CarlaStatus& x)
{
    m_frame = x.m_frame;
    m_fixed_delta_seconds = x.m_fixed_delta_seconds;
    m_synchronous_mode = x.m_synchronous_mode;
    m_synchronous_mode_running = x.m_synchronous_mode_running;
}

carla_msgs::msg::CarlaStatus::CarlaStatus(
        CarlaStatus&& x)
{
    m_frame = x.m_frame;
    m_fixed_delta_seconds = x.m_fixed_delta_seconds;
    m_synchronous_mode = x.m_synchronous_mode;
    m_synchronous_mode_running = x.m_synchronous_mode_running;
}

carla_msgs::msg::CarlaStatus& carla_msgs::msg::CarlaStatus::operator =(
        const CarlaStatus& x)
{

    m_frame = x.m_frame;
    m_fixed_delta_seconds = x.m_fixed_delta_seconds;
    m_synchronous_mode = x.m_synchronous_mode;
    m_synchronous_mode_running = x.m_synchronous_mode_running;

    return *this;
}

carla_msgs::msg::CarlaStatus& carla_msgs::msg::CarlaStatus::operator =(
        CarlaStatus&& x)
{

    m_frame = x.m_frame;
    m_fixed_delta_seconds = x.m_fixed_delta_seconds;
    m_synchronous_mode = x.m_synchronous_mode;
    m_synchronous_mode_running = x.m_synchronous_mode_running;

    return *this;
}

bool carla_msgs::msg::CarlaStatus::operator ==(
        const CarlaStatus& x) const
{

    return (m_frame == x.m_frame && m_fixed_delta_seconds == x.m_fixed_delta_seconds && m_synchronous_mode == x.m_synchronous_mode && m_synchronous_mode_running == x.m_synchronous_mode_running);
}

bool carla_msgs::msg::CarlaStatus::operator !=(
        const CarlaStatus& x) const
{
    return !(*this == x);
}

size_t carla_msgs::msg::CarlaStatus::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}

size_t carla_msgs::msg::CarlaStatus::getCdrSerializedSize(
        const carla_msgs::msg::CarlaStatus& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}

void carla_msgs::msg::CarlaStatus::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_frame;
    scdr << m_fixed_delta_seconds;
    scdr << m_synchronous_mode;
    scdr << m_synchronous_mode_running;

}

void carla_msgs::msg::CarlaStatus::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_frame;
    dcdr >> m_fixed_delta_seconds;
    dcdr >> m_synchronous_mode;
    dcdr >> m_synchronous_mode_running;
}

/*!
 * @brief This function sets a value in member frame
 * @param _frame New value for member frame
 */
void carla_msgs::msg::CarlaStatus::frame(
        uint64_t _frame)
{
    m_frame = _frame;
}

/*!
 * @brief This function returns the value of member frame
 * @return Value of member frame
 */
uint64_t carla_msgs::msg::CarlaStatus::frame() const
{
    return m_frame;
}

/*!
 * @brief This function returns a reference to member frame
 * @return Reference to member frame
 */
uint64_t& carla_msgs::msg::CarlaStatus::frame()
{
    return m_frame;
}

/*!
 * @brief This function sets a value in member fixed_delta_seconds
 * @param _fixed_delta_seconds New value for member fixed_delta_seconds
 */
void carla_msgs::msg::CarlaStatus::fixed_delta_seconds(
        float _fixed_delta_seconds)
{
    m_fixed_delta_seconds = _fixed_delta_seconds;
}

/*!
 * @brief This function returns the value of member fixed_delta_seconds
 * @return Value of member fixed_delta_seconds
 */
float carla_msgs::msg::CarlaStatus::fixed_delta_seconds() const
{
    return m_fixed_delta_seconds;
}

/*!
 * @brief This function returns a reference to member fixed_delta_seconds
 * @return Reference to member fixed_delta_seconds
 */
float& carla_msgs::msg::CarlaStatus::fixed_delta_seconds()
{
    return m_fixed_delta_seconds;
}

/*!
 * @brief This function sets a value in member synchronous_mode
 * @param _synchronous_mode New value for member synchronous_mode
 */
void carla_msgs::msg::CarlaStatus::synchronous_mode(
        bool _synchronous_mode)
{
    m_synchronous_mode = _synchronous_mode;
}

/*!
 * @brief This function returns the value of member synchronous_mode
 * @return Value of member synchronous_mode
 */
bool carla_msgs::msg::CarlaStatus::synchronous_mode() const
{
    return m_synchronous_mode;
}

/*!
 * @brief This function returns a reference to member synchronous_mode
 * @return Reference to member synchronous_mode
 */
bool& carla_msgs::msg::CarlaStatus::synchronous_mode()
{
    return m_synchronous_mode;
}

/*!
 * @brief This function sets a value in member synchronous_mode_running
 * @param _synchronous_mode_running New value for member synchronous_mode_running
 */
void carla_msgs::msg::CarlaStatus::synchronous_mode_running(
        bool _synchronous_mode_running)
{
    m_synchronous_mode_running = _synchronous_mode_running;
}

/*!
 * @brief This function returns the value of member synchronous_mode_running
 * @return Value of member synchronous_mode_running
 */
bool carla_msgs::msg::CarlaStatus::synchronous_mode_running() const
{
    return m_synchronous_mode_running;
}

/*!
 * @brief This function returns a reference to member synchronous_mode_running
 * @return Reference to member synchronous_mode_running
 */
bool& carla_msgs::msg::CarlaStatus::synchronous_mode_running()
{
    return m_synchronous_mode_running;
}


size_t carla_msgs::msg::CarlaStatus::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;



    return current_align;
}

bool carla_msgs::msg::CarlaStatus::isKeyDefined()
{
    return false;
}

void carla_msgs::msg::CarlaStatus::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
        
}


