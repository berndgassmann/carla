// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file CarlaActorList.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "CarlaActorList.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

carla_msgs::msg::CarlaActorList::CarlaActorList()
{
    // m_actors com.eprosima.idl.parser.typecode.SequenceTypeCode@14ec4505


}

carla_msgs::msg::CarlaActorList::~CarlaActorList()
{
}

carla_msgs::msg::CarlaActorList::CarlaActorList(
        const CarlaActorList& x)
{
    m_actors = x.m_actors;
}

carla_msgs::msg::CarlaActorList::CarlaActorList(
        CarlaActorList&& x)
{
    m_actors = std::move(x.m_actors);
}

carla_msgs::msg::CarlaActorList& carla_msgs::msg::CarlaActorList::operator =(
        const CarlaActorList& x)
{

    m_actors = x.m_actors;

    return *this;
}

carla_msgs::msg::CarlaActorList& carla_msgs::msg::CarlaActorList::operator =(
        CarlaActorList&& x)
{

    m_actors = std::move(x.m_actors);

    return *this;
}

bool carla_msgs::msg::CarlaActorList::operator ==(
        const CarlaActorList& x) const
{

    return (m_actors == x.m_actors);
}

bool carla_msgs::msg::CarlaActorList::operator !=(
        const CarlaActorList& x) const
{
    return !(*this == x);
}

size_t carla_msgs::msg::CarlaActorList::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    for(size_t a = 0; a < 100; ++a)
    {
        current_alignment += carla_msgs::msg::CarlaActorInfo::getMaxCdrSerializedSize(current_alignment);}

    return current_alignment - initial_alignment;
}

size_t carla_msgs::msg::CarlaActorList::getCdrSerializedSize(
        const carla_msgs::msg::CarlaActorList& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    for(size_t a = 0; a < data.actors().size(); ++a)
    {
        current_alignment += carla_msgs::msg::CarlaActorInfo::getCdrSerializedSize(data.actors().at(a), current_alignment);}

    return current_alignment - initial_alignment;
}

void carla_msgs::msg::CarlaActorList::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_actors;
}

void carla_msgs::msg::CarlaActorList::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_actors;}

/*!
 * @brief This function copies the value in member actors
 * @param _actors New value to be copied in member actors
 */
void carla_msgs::msg::CarlaActorList::actors(
        const std::vector<carla_msgs::msg::CarlaActorInfo>& _actors)
{
    m_actors = _actors;
}

/*!
 * @brief This function moves the value in member actors
 * @param _actors New value to be moved in member actors
 */
void carla_msgs::msg::CarlaActorList::actors(
        std::vector<carla_msgs::msg::CarlaActorInfo>&& _actors)
{
    m_actors = std::move(_actors);
}

/*!
 * @brief This function returns a constant reference to member actors
 * @return Constant reference to member actors
 */
const std::vector<carla_msgs::msg::CarlaActorInfo>& carla_msgs::msg::CarlaActorList::actors() const
{
    return m_actors;
}

/*!
 * @brief This function returns a reference to member actors
 * @return Reference to member actors
 */
std::vector<carla_msgs::msg::CarlaActorInfo>& carla_msgs::msg::CarlaActorList::actors()
{
    return m_actors;
}

size_t carla_msgs::msg::CarlaActorList::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;



    return current_align;
}

bool carla_msgs::msg::CarlaActorList::isKeyDefined()
{
    return false;
}

void carla_msgs::msg::CarlaActorList::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
     
}


