// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file CarlaWorldInfo.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "CarlaWorldInfo.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

carla_msgs::msg::CarlaWorldInfo::CarlaWorldInfo()
{
    // m_map_name com.eprosima.idl.parser.typecode.StringTypeCode@4bdeaabb
    m_map_name ="";
    // m_opendrive com.eprosima.idl.parser.typecode.StringTypeCode@6c4906d3
    m_opendrive ="";

}

carla_msgs::msg::CarlaWorldInfo::~CarlaWorldInfo()
{

}

carla_msgs::msg::CarlaWorldInfo::CarlaWorldInfo(
        const CarlaWorldInfo& x)
{
    m_map_name = x.m_map_name;
    m_opendrive = x.m_opendrive;
}

carla_msgs::msg::CarlaWorldInfo::CarlaWorldInfo(
        CarlaWorldInfo&& x)
{
    m_map_name = std::move(x.m_map_name);
    m_opendrive = std::move(x.m_opendrive);
}

carla_msgs::msg::CarlaWorldInfo& carla_msgs::msg::CarlaWorldInfo::operator =(
        const CarlaWorldInfo& x)
{

    m_map_name = x.m_map_name;
    m_opendrive = x.m_opendrive;

    return *this;
}

carla_msgs::msg::CarlaWorldInfo& carla_msgs::msg::CarlaWorldInfo::operator =(
        CarlaWorldInfo&& x)
{

    m_map_name = std::move(x.m_map_name);
    m_opendrive = std::move(x.m_opendrive);

    return *this;
}

bool carla_msgs::msg::CarlaWorldInfo::operator ==(
        const CarlaWorldInfo& x) const
{

    return (m_map_name == x.m_map_name && m_opendrive == x.m_opendrive);
}

bool carla_msgs::msg::CarlaWorldInfo::operator !=(
        const CarlaWorldInfo& x) const
{
    return !(*this == x);
}

size_t carla_msgs::msg::CarlaWorldInfo::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;


    return current_alignment - initial_alignment;
}

size_t carla_msgs::msg::CarlaWorldInfo::getCdrSerializedSize(
        const carla_msgs::msg::CarlaWorldInfo& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.map_name().size() + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.opendrive().size() + 1;


    return current_alignment - initial_alignment;
}

void carla_msgs::msg::CarlaWorldInfo::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_map_name;
    scdr << m_opendrive;

}

void carla_msgs::msg::CarlaWorldInfo::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_map_name;
    dcdr >> m_opendrive;
}

/*!
 * @brief This function copies the value in member map_name
 * @param _map_name New value to be copied in member map_name
 */
void carla_msgs::msg::CarlaWorldInfo::map_name(
        const std::string& _map_name)
{
    m_map_name = _map_name;
}

/*!
 * @brief This function moves the value in member map_name
 * @param _map_name New value to be moved in member map_name
 */
void carla_msgs::msg::CarlaWorldInfo::map_name(
        std::string&& _map_name)
{
    m_map_name = std::move(_map_name);
}

/*!
 * @brief This function returns a constant reference to member map_name
 * @return Constant reference to member map_name
 */
const std::string& carla_msgs::msg::CarlaWorldInfo::map_name() const
{
    return m_map_name;
}

/*!
 * @brief This function returns a reference to member map_name
 * @return Reference to member map_name
 */
std::string& carla_msgs::msg::CarlaWorldInfo::map_name()
{
    return m_map_name;
}
/*!
 * @brief This function copies the value in member opendrive
 * @param _opendrive New value to be copied in member opendrive
 */
void carla_msgs::msg::CarlaWorldInfo::opendrive(
        const std::string& _opendrive)
{
    m_opendrive = _opendrive;
}

/*!
 * @brief This function moves the value in member opendrive
 * @param _opendrive New value to be moved in member opendrive
 */
void carla_msgs::msg::CarlaWorldInfo::opendrive(
        std::string&& _opendrive)
{
    m_opendrive = std::move(_opendrive);
}

/*!
 * @brief This function returns a constant reference to member opendrive
 * @return Constant reference to member opendrive
 */
const std::string& carla_msgs::msg::CarlaWorldInfo::opendrive() const
{
    return m_opendrive;
}

/*!
 * @brief This function returns a reference to member opendrive
 * @return Reference to member opendrive
 */
std::string& carla_msgs::msg::CarlaWorldInfo::opendrive()
{
    return m_opendrive;
}

size_t carla_msgs::msg::CarlaWorldInfo::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;



    return current_align;
}

bool carla_msgs::msg::CarlaWorldInfo::isKeyDefined()
{
    return false;
}

void carla_msgs::msg::CarlaWorldInfo::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
      
}


