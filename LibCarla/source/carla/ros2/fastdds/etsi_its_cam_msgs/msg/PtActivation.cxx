// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file PtActivation.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "PtActivation.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

etsi_its_cam_msgs::msg::PtActivation::PtActivation()
{
    // m_pt_activation_type com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@4a9cc6cb

    // m_pt_activation_data com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@5990e6c5


}

etsi_its_cam_msgs::msg::PtActivation::~PtActivation()
{

}

etsi_its_cam_msgs::msg::PtActivation::PtActivation(
        const PtActivation& x)
{
    m_pt_activation_type = x.m_pt_activation_type;
    m_pt_activation_data = x.m_pt_activation_data;
}

etsi_its_cam_msgs::msg::PtActivation::PtActivation(
        PtActivation&& x)
{
    m_pt_activation_type = std::move(x.m_pt_activation_type);
    m_pt_activation_data = std::move(x.m_pt_activation_data);
}

etsi_its_cam_msgs::msg::PtActivation& etsi_its_cam_msgs::msg::PtActivation::operator =(
        const PtActivation& x)
{

    m_pt_activation_type = x.m_pt_activation_type;
    m_pt_activation_data = x.m_pt_activation_data;

    return *this;
}

etsi_its_cam_msgs::msg::PtActivation& etsi_its_cam_msgs::msg::PtActivation::operator =(
        PtActivation&& x)
{

    m_pt_activation_type = std::move(x.m_pt_activation_type);
    m_pt_activation_data = std::move(x.m_pt_activation_data);

    return *this;
}

bool etsi_its_cam_msgs::msg::PtActivation::operator ==(
        const PtActivation& x) const
{

    return (m_pt_activation_type == x.m_pt_activation_type && m_pt_activation_data == x.m_pt_activation_data);
}

bool etsi_its_cam_msgs::msg::PtActivation::operator !=(
        const PtActivation& x) const
{
    return !(*this == x);
}

size_t etsi_its_cam_msgs::msg::PtActivation::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += etsi_its_cam_msgs::msg::PtActivationType::getMaxCdrSerializedSize(current_alignment);
    current_alignment += etsi_its_cam_msgs::msg::PtActivationData::getMaxCdrSerializedSize(current_alignment);

    return current_alignment - initial_alignment;
}

size_t etsi_its_cam_msgs::msg::PtActivation::getCdrSerializedSize(
        const etsi_its_cam_msgs::msg::PtActivation& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += etsi_its_cam_msgs::msg::PtActivationType::getCdrSerializedSize(data.pt_activation_type(), current_alignment);
    current_alignment += etsi_its_cam_msgs::msg::PtActivationData::getCdrSerializedSize(data.pt_activation_data(), current_alignment);

    return current_alignment - initial_alignment;
}

void etsi_its_cam_msgs::msg::PtActivation::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_pt_activation_type;
    scdr << m_pt_activation_data;

}

void etsi_its_cam_msgs::msg::PtActivation::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_pt_activation_type;
    dcdr >> m_pt_activation_data;
}

/*!
 * @brief This function copies the value in member pt_activation_type
 * @param _pt_activation_type New value to be copied in member pt_activation_type
 */
void etsi_its_cam_msgs::msg::PtActivation::pt_activation_type(
        const etsi_its_cam_msgs::msg::PtActivationType& _pt_activation_type)
{
    m_pt_activation_type = _pt_activation_type;
}

/*!
 * @brief This function moves the value in member pt_activation_type
 * @param _pt_activation_type New value to be moved in member pt_activation_type
 */
void etsi_its_cam_msgs::msg::PtActivation::pt_activation_type(
        etsi_its_cam_msgs::msg::PtActivationType&& _pt_activation_type)
{
    m_pt_activation_type = std::move(_pt_activation_type);
}

/*!
 * @brief This function returns a constant reference to member pt_activation_type
 * @return Constant reference to member pt_activation_type
 */
const etsi_its_cam_msgs::msg::PtActivationType& etsi_its_cam_msgs::msg::PtActivation::pt_activation_type() const
{
    return m_pt_activation_type;
}

/*!
 * @brief This function returns a reference to member pt_activation_type
 * @return Reference to member pt_activation_type
 */
etsi_its_cam_msgs::msg::PtActivationType& etsi_its_cam_msgs::msg::PtActivation::pt_activation_type()
{
    return m_pt_activation_type;
}
/*!
 * @brief This function copies the value in member pt_activation_data
 * @param _pt_activation_data New value to be copied in member pt_activation_data
 */
void etsi_its_cam_msgs::msg::PtActivation::pt_activation_data(
        const etsi_its_cam_msgs::msg::PtActivationData& _pt_activation_data)
{
    m_pt_activation_data = _pt_activation_data;
}

/*!
 * @brief This function moves the value in member pt_activation_data
 * @param _pt_activation_data New value to be moved in member pt_activation_data
 */
void etsi_its_cam_msgs::msg::PtActivation::pt_activation_data(
        etsi_its_cam_msgs::msg::PtActivationData&& _pt_activation_data)
{
    m_pt_activation_data = std::move(_pt_activation_data);
}

/*!
 * @brief This function returns a constant reference to member pt_activation_data
 * @return Constant reference to member pt_activation_data
 */
const etsi_its_cam_msgs::msg::PtActivationData& etsi_its_cam_msgs::msg::PtActivation::pt_activation_data() const
{
    return m_pt_activation_data;
}

/*!
 * @brief This function returns a reference to member pt_activation_data
 * @return Reference to member pt_activation_data
 */
etsi_its_cam_msgs::msg::PtActivationData& etsi_its_cam_msgs::msg::PtActivation::pt_activation_data()
{
    return m_pt_activation_data;
}

size_t etsi_its_cam_msgs::msg::PtActivation::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;



    return current_align;
}

bool etsi_its_cam_msgs::msg::PtActivation::isKeyDefined()
{
    return false;
}

void etsi_its_cam_msgs::msg::PtActivation::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
      
}


