// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file RSUContainerHighFrequency.cpp
 * This source file contains the implementation of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "RSUContainerHighFrequency.h"

#include <fastcdr/Cdr.h>


#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>


namespace etsi_its_cam_msgs {

namespace msg {



RSUContainerHighFrequency::RSUContainerHighFrequency()
{
}

RSUContainerHighFrequency::~RSUContainerHighFrequency()
{
}

RSUContainerHighFrequency::RSUContainerHighFrequency(
        const RSUContainerHighFrequency& x)
{
    m_protected_communication_zones_rsu = x.m_protected_communication_zones_rsu;
    m_protected_communication_zones_rsu_is_present = x.m_protected_communication_zones_rsu_is_present;
}

RSUContainerHighFrequency::RSUContainerHighFrequency(
        RSUContainerHighFrequency&& x) noexcept
{
    m_protected_communication_zones_rsu = std::move(x.m_protected_communication_zones_rsu);
    m_protected_communication_zones_rsu_is_present = x.m_protected_communication_zones_rsu_is_present;
}

RSUContainerHighFrequency& RSUContainerHighFrequency::operator =(
        const RSUContainerHighFrequency& x)
{

    m_protected_communication_zones_rsu = x.m_protected_communication_zones_rsu;
    m_protected_communication_zones_rsu_is_present = x.m_protected_communication_zones_rsu_is_present;
    return *this;
}

RSUContainerHighFrequency& RSUContainerHighFrequency::operator =(
        RSUContainerHighFrequency&& x) noexcept
{

    m_protected_communication_zones_rsu = std::move(x.m_protected_communication_zones_rsu);
    m_protected_communication_zones_rsu_is_present = x.m_protected_communication_zones_rsu_is_present;
    return *this;
}

bool RSUContainerHighFrequency::operator ==(
        const RSUContainerHighFrequency& x) const
{
    return (m_protected_communication_zones_rsu == x.m_protected_communication_zones_rsu &&
           m_protected_communication_zones_rsu_is_present == x.m_protected_communication_zones_rsu_is_present);
}

bool RSUContainerHighFrequency::operator !=(
        const RSUContainerHighFrequency& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member protected_communication_zones_rsu
 * @param _protected_communication_zones_rsu New value to be copied in member protected_communication_zones_rsu
 */
void RSUContainerHighFrequency::protected_communication_zones_rsu(
        const etsi_its_cam_msgs::msg::ProtectedCommunicationZonesRSU& _protected_communication_zones_rsu)
{
    m_protected_communication_zones_rsu = _protected_communication_zones_rsu;
}

/*!
 * @brief This function moves the value in member protected_communication_zones_rsu
 * @param _protected_communication_zones_rsu New value to be moved in member protected_communication_zones_rsu
 */
void RSUContainerHighFrequency::protected_communication_zones_rsu(
        etsi_its_cam_msgs::msg::ProtectedCommunicationZonesRSU&& _protected_communication_zones_rsu)
{
    m_protected_communication_zones_rsu = std::move(_protected_communication_zones_rsu);
}

/*!
 * @brief This function returns a constant reference to member protected_communication_zones_rsu
 * @return Constant reference to member protected_communication_zones_rsu
 */
const etsi_its_cam_msgs::msg::ProtectedCommunicationZonesRSU& RSUContainerHighFrequency::protected_communication_zones_rsu() const
{
    return m_protected_communication_zones_rsu;
}

/*!
 * @brief This function returns a reference to member protected_communication_zones_rsu
 * @return Reference to member protected_communication_zones_rsu
 */
etsi_its_cam_msgs::msg::ProtectedCommunicationZonesRSU& RSUContainerHighFrequency::protected_communication_zones_rsu()
{
    return m_protected_communication_zones_rsu;
}


/*!
 * @brief This function sets a value in member protected_communication_zones_rsu_is_present
 * @param _protected_communication_zones_rsu_is_present New value for member protected_communication_zones_rsu_is_present
 */
void RSUContainerHighFrequency::protected_communication_zones_rsu_is_present(
        bool _protected_communication_zones_rsu_is_present)
{
    m_protected_communication_zones_rsu_is_present = _protected_communication_zones_rsu_is_present;
}

/*!
 * @brief This function returns the value of member protected_communication_zones_rsu_is_present
 * @return Value of member protected_communication_zones_rsu_is_present
 */
bool RSUContainerHighFrequency::protected_communication_zones_rsu_is_present() const
{
    return m_protected_communication_zones_rsu_is_present;
}

/*!
 * @brief This function returns a reference to member protected_communication_zones_rsu_is_present
 * @return Reference to member protected_communication_zones_rsu_is_present
 */
bool& RSUContainerHighFrequency::protected_communication_zones_rsu_is_present()
{
    return m_protected_communication_zones_rsu_is_present;
}




} // namespace msg


} // namespace etsi_its_cam_msgs
// Include auxiliary functions like for serializing/deserializing.
#include "RSUContainerHighFrequencyCdrAux.ipp"

