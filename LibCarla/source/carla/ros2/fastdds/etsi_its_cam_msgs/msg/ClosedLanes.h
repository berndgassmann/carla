// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file ClosedLanes.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _FAST_DDS_GENERATED_ETSI_ITS_CAM_MSGS_MSG_CLOSEDLANES_H_
#define _FAST_DDS_GENERATED_ETSI_ITS_CAM_MSGS_MSG_CLOSEDLANES_H_

#include "HardShoulderStatus.h"
#include "DrivingLaneStatus.h"

#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(ClosedLanes_SOURCE)
#define ClosedLanes_DllAPI __declspec( dllexport )
#else
#define ClosedLanes_DllAPI __declspec( dllimport )
#endif // ClosedLanes_SOURCE
#else
#define ClosedLanes_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define ClosedLanes_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
} // namespace fastcdr
} // namespace eprosima


namespace etsi_its_cam_msgs {
    namespace msg {
        /*!
         * @brief This class represents the structure ClosedLanes defined by the user in the IDL file.
         * @ingroup CLOSEDLANES
         */
        class ClosedLanes
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport ClosedLanes();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~ClosedLanes();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object etsi_its_cam_msgs::msg::ClosedLanes that will be copied.
             */
            eProsima_user_DllExport ClosedLanes(
                    const ClosedLanes& x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object etsi_its_cam_msgs::msg::ClosedLanes that will be copied.
             */
            eProsima_user_DllExport ClosedLanes(
                    ClosedLanes&& x);

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object etsi_its_cam_msgs::msg::ClosedLanes that will be copied.
             */
            eProsima_user_DllExport ClosedLanes& operator =(
                    const ClosedLanes& x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object etsi_its_cam_msgs::msg::ClosedLanes that will be copied.
             */
            eProsima_user_DllExport ClosedLanes& operator =(
                    ClosedLanes&& x);

            /*!
             * @brief Comparison operator.
             * @param x etsi_its_cam_msgs::msg::ClosedLanes object to compare.
             */
            eProsima_user_DllExport bool operator ==(
                    const ClosedLanes& x) const;

            /*!
             * @brief Comparison operator.
             * @param x etsi_its_cam_msgs::msg::ClosedLanes object to compare.
             */
            eProsima_user_DllExport bool operator !=(
                    const ClosedLanes& x) const;

            /*!
             * @brief This function copies the value in member innerhard_shoulder_status
             * @param _innerhard_shoulder_status New value to be copied in member innerhard_shoulder_status
             */
            eProsima_user_DllExport void innerhard_shoulder_status(
                    const etsi_its_cam_msgs::msg::HardShoulderStatus& _innerhard_shoulder_status);

            /*!
             * @brief This function moves the value in member innerhard_shoulder_status
             * @param _innerhard_shoulder_status New value to be moved in member innerhard_shoulder_status
             */
            eProsima_user_DllExport void innerhard_shoulder_status(
                    etsi_its_cam_msgs::msg::HardShoulderStatus&& _innerhard_shoulder_status);

            /*!
             * @brief This function returns a constant reference to member innerhard_shoulder_status
             * @return Constant reference to member innerhard_shoulder_status
             */
            eProsima_user_DllExport const etsi_its_cam_msgs::msg::HardShoulderStatus& innerhard_shoulder_status() const;

            /*!
             * @brief This function returns a reference to member innerhard_shoulder_status
             * @return Reference to member innerhard_shoulder_status
             */
            eProsima_user_DllExport etsi_its_cam_msgs::msg::HardShoulderStatus& innerhard_shoulder_status();
            /*!
             * @brief This function sets a value in member innerhard_shoulder_status_is_present
             * @param _innerhard_shoulder_status_is_present New value for member innerhard_shoulder_status_is_present
             */
            eProsima_user_DllExport void innerhard_shoulder_status_is_present(
                    bool _innerhard_shoulder_status_is_present);

            /*!
             * @brief This function returns the value of member innerhard_shoulder_status_is_present
             * @return Value of member innerhard_shoulder_status_is_present
             */
            eProsima_user_DllExport bool innerhard_shoulder_status_is_present() const;

            /*!
             * @brief This function returns a reference to member innerhard_shoulder_status_is_present
             * @return Reference to member innerhard_shoulder_status_is_present
             */
            eProsima_user_DllExport bool& innerhard_shoulder_status_is_present();

            /*!
             * @brief This function copies the value in member outerhard_shoulder_status
             * @param _outerhard_shoulder_status New value to be copied in member outerhard_shoulder_status
             */
            eProsima_user_DllExport void outerhard_shoulder_status(
                    const etsi_its_cam_msgs::msg::HardShoulderStatus& _outerhard_shoulder_status);

            /*!
             * @brief This function moves the value in member outerhard_shoulder_status
             * @param _outerhard_shoulder_status New value to be moved in member outerhard_shoulder_status
             */
            eProsima_user_DllExport void outerhard_shoulder_status(
                    etsi_its_cam_msgs::msg::HardShoulderStatus&& _outerhard_shoulder_status);

            /*!
             * @brief This function returns a constant reference to member outerhard_shoulder_status
             * @return Constant reference to member outerhard_shoulder_status
             */
            eProsima_user_DllExport const etsi_its_cam_msgs::msg::HardShoulderStatus& outerhard_shoulder_status() const;

            /*!
             * @brief This function returns a reference to member outerhard_shoulder_status
             * @return Reference to member outerhard_shoulder_status
             */
            eProsima_user_DllExport etsi_its_cam_msgs::msg::HardShoulderStatus& outerhard_shoulder_status();
            /*!
             * @brief This function sets a value in member outerhard_shoulder_status_is_present
             * @param _outerhard_shoulder_status_is_present New value for member outerhard_shoulder_status_is_present
             */
            eProsima_user_DllExport void outerhard_shoulder_status_is_present(
                    bool _outerhard_shoulder_status_is_present);

            /*!
             * @brief This function returns the value of member outerhard_shoulder_status_is_present
             * @return Value of member outerhard_shoulder_status_is_present
             */
            eProsima_user_DllExport bool outerhard_shoulder_status_is_present() const;

            /*!
             * @brief This function returns a reference to member outerhard_shoulder_status_is_present
             * @return Reference to member outerhard_shoulder_status_is_present
             */
            eProsima_user_DllExport bool& outerhard_shoulder_status_is_present();

            /*!
             * @brief This function copies the value in member driving_lane_status
             * @param _driving_lane_status New value to be copied in member driving_lane_status
             */
            eProsima_user_DllExport void driving_lane_status(
                    const etsi_its_cam_msgs::msg::DrivingLaneStatus& _driving_lane_status);

            /*!
             * @brief This function moves the value in member driving_lane_status
             * @param _driving_lane_status New value to be moved in member driving_lane_status
             */
            eProsima_user_DllExport void driving_lane_status(
                    etsi_its_cam_msgs::msg::DrivingLaneStatus&& _driving_lane_status);

            /*!
             * @brief This function returns a constant reference to member driving_lane_status
             * @return Constant reference to member driving_lane_status
             */
            eProsima_user_DllExport const etsi_its_cam_msgs::msg::DrivingLaneStatus& driving_lane_status() const;

            /*!
             * @brief This function returns a reference to member driving_lane_status
             * @return Reference to member driving_lane_status
             */
            eProsima_user_DllExport etsi_its_cam_msgs::msg::DrivingLaneStatus& driving_lane_status();
            /*!
             * @brief This function sets a value in member driving_lane_status_is_present
             * @param _driving_lane_status_is_present New value for member driving_lane_status_is_present
             */
            eProsima_user_DllExport void driving_lane_status_is_present(
                    bool _driving_lane_status_is_present);

            /*!
             * @brief This function returns the value of member driving_lane_status_is_present
             * @return Value of member driving_lane_status_is_present
             */
            eProsima_user_DllExport bool driving_lane_status_is_present() const;

            /*!
             * @brief This function returns a reference to member driving_lane_status_is_present
             * @return Reference to member driving_lane_status_is_present
             */
            eProsima_user_DllExport bool& driving_lane_status_is_present();


            /*!
             * @brief This function returns the maximum serialized size of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(
                    const etsi_its_cam_msgs::msg::ClosedLanes& data,
                    size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(
                    eprosima::fastcdr::Cdr& cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(
                    eprosima::fastcdr::Cdr& cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(
                    eprosima::fastcdr::Cdr& cdr) const;

        private:

            etsi_its_cam_msgs::msg::HardShoulderStatus m_innerhard_shoulder_status;
            bool m_innerhard_shoulder_status_is_present;
            etsi_its_cam_msgs::msg::HardShoulderStatus m_outerhard_shoulder_status;
            bool m_outerhard_shoulder_status_is_present;
            etsi_its_cam_msgs::msg::DrivingLaneStatus m_driving_lane_status;
            bool m_driving_lane_status_is_present;
        };
    } // namespace msg
} // namespace etsi_its_cam_msgs

#endif // _FAST_DDS_GENERATED_ETSI_ITS_CAM_MSGS_MSG_CLOSEDLANES_H_