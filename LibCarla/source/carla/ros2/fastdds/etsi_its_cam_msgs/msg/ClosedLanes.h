// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file ClosedLanes.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifndef _FAST_DDS_GENERATED_ETSI_ITS_CAM_MSGS_MSG_CLOSEDLANES_H_
#define _FAST_DDS_GENERATED_ETSI_ITS_CAM_MSGS_MSG_CLOSEDLANES_H_

#include <array>
#include <bitset>
#include <cstdint>
#include <map>
#include <string>
#include <vector>

#include <fastcdr/cdr/fixed_size_string.hpp>
#include <fastcdr/xcdr/external.hpp>
#include <fastcdr/xcdr/optional.hpp>

#include "DrivingLaneStatus.h"
#include "HardShoulderStatus.h"

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec(dllexport)
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(CLOSEDLANES_SOURCE)
#define CLOSEDLANES_DllAPI __declspec(dllexport)
#else
#define CLOSEDLANES_DllAPI __declspec(dllimport)
#endif  // CLOSEDLANES_SOURCE
#else
#define CLOSEDLANES_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define CLOSEDLANES_DllAPI
#endif  // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
class CdrSizeCalculator;
}  // namespace fastcdr
}  // namespace eprosima

namespace etsi_its_cam_msgs {

namespace msg {

/*!
 * @brief This class represents the structure ClosedLanes defined by the user in the IDL file.
 * @ingroup ClosedLanes
 */
class ClosedLanes {
public:
  /*!
   * @brief Default constructor.
   */
  eProsima_user_DllExport ClosedLanes();

  /*!
   * @brief Default destructor.
   */
  eProsima_user_DllExport ~ClosedLanes();

  /*!
   * @brief Copy constructor.
   * @param x Reference to the object etsi_its_cam_msgs::msg::ClosedLanes that will be copied.
   */
  eProsima_user_DllExport ClosedLanes(const ClosedLanes& x);

  /*!
   * @brief Move constructor.
   * @param x Reference to the object etsi_its_cam_msgs::msg::ClosedLanes that will be copied.
   */
  eProsima_user_DllExport ClosedLanes(ClosedLanes&& x) noexcept;

  /*!
   * @brief Copy assignment.
   * @param x Reference to the object etsi_its_cam_msgs::msg::ClosedLanes that will be copied.
   */
  eProsima_user_DllExport ClosedLanes& operator=(const ClosedLanes& x);

  /*!
   * @brief Move assignment.
   * @param x Reference to the object etsi_its_cam_msgs::msg::ClosedLanes that will be copied.
   */
  eProsima_user_DllExport ClosedLanes& operator=(ClosedLanes&& x) noexcept;

  /*!
   * @brief Comparison operator.
   * @param x etsi_its_cam_msgs::msg::ClosedLanes object to compare.
   */
  eProsima_user_DllExport bool operator==(const ClosedLanes& x) const;

  /*!
   * @brief Comparison operator.
   * @param x etsi_its_cam_msgs::msg::ClosedLanes object to compare.
   */
  eProsima_user_DllExport bool operator!=(const ClosedLanes& x) const;

  /*!
   * @brief This function copies the value in member innerhard_shoulder_status
   * @param _innerhard_shoulder_status New value to be copied in member innerhard_shoulder_status
   */
  eProsima_user_DllExport void innerhard_shoulder_status(
      const etsi_its_cam_msgs::msg::HardShoulderStatus& _innerhard_shoulder_status);

  /*!
   * @brief This function moves the value in member innerhard_shoulder_status
   * @param _innerhard_shoulder_status New value to be moved in member innerhard_shoulder_status
   */
  eProsima_user_DllExport void innerhard_shoulder_status(
      etsi_its_cam_msgs::msg::HardShoulderStatus&& _innerhard_shoulder_status);

  /*!
   * @brief This function returns a constant reference to member innerhard_shoulder_status
   * @return Constant reference to member innerhard_shoulder_status
   */
  eProsima_user_DllExport const etsi_its_cam_msgs::msg::HardShoulderStatus& innerhard_shoulder_status() const;

  /*!
   * @brief This function returns a reference to member innerhard_shoulder_status
   * @return Reference to member innerhard_shoulder_status
   */
  eProsima_user_DllExport etsi_its_cam_msgs::msg::HardShoulderStatus& innerhard_shoulder_status();

  /*!
   * @brief This function sets a value in member innerhard_shoulder_status_is_present
   * @param _innerhard_shoulder_status_is_present New value for member innerhard_shoulder_status_is_present
   */
  eProsima_user_DllExport void innerhard_shoulder_status_is_present(bool _innerhard_shoulder_status_is_present);

  /*!
   * @brief This function returns the value of member innerhard_shoulder_status_is_present
   * @return Value of member innerhard_shoulder_status_is_present
   */
  eProsima_user_DllExport bool innerhard_shoulder_status_is_present() const;

  /*!
   * @brief This function returns a reference to member innerhard_shoulder_status_is_present
   * @return Reference to member innerhard_shoulder_status_is_present
   */
  eProsima_user_DllExport bool& innerhard_shoulder_status_is_present();

  /*!
   * @brief This function copies the value in member outerhard_shoulder_status
   * @param _outerhard_shoulder_status New value to be copied in member outerhard_shoulder_status
   */
  eProsima_user_DllExport void outerhard_shoulder_status(
      const etsi_its_cam_msgs::msg::HardShoulderStatus& _outerhard_shoulder_status);

  /*!
   * @brief This function moves the value in member outerhard_shoulder_status
   * @param _outerhard_shoulder_status New value to be moved in member outerhard_shoulder_status
   */
  eProsima_user_DllExport void outerhard_shoulder_status(
      etsi_its_cam_msgs::msg::HardShoulderStatus&& _outerhard_shoulder_status);

  /*!
   * @brief This function returns a constant reference to member outerhard_shoulder_status
   * @return Constant reference to member outerhard_shoulder_status
   */
  eProsima_user_DllExport const etsi_its_cam_msgs::msg::HardShoulderStatus& outerhard_shoulder_status() const;

  /*!
   * @brief This function returns a reference to member outerhard_shoulder_status
   * @return Reference to member outerhard_shoulder_status
   */
  eProsima_user_DllExport etsi_its_cam_msgs::msg::HardShoulderStatus& outerhard_shoulder_status();

  /*!
   * @brief This function sets a value in member outerhard_shoulder_status_is_present
   * @param _outerhard_shoulder_status_is_present New value for member outerhard_shoulder_status_is_present
   */
  eProsima_user_DllExport void outerhard_shoulder_status_is_present(bool _outerhard_shoulder_status_is_present);

  /*!
   * @brief This function returns the value of member outerhard_shoulder_status_is_present
   * @return Value of member outerhard_shoulder_status_is_present
   */
  eProsima_user_DllExport bool outerhard_shoulder_status_is_present() const;

  /*!
   * @brief This function returns a reference to member outerhard_shoulder_status_is_present
   * @return Reference to member outerhard_shoulder_status_is_present
   */
  eProsima_user_DllExport bool& outerhard_shoulder_status_is_present();

  /*!
   * @brief This function copies the value in member driving_lane_status
   * @param _driving_lane_status New value to be copied in member driving_lane_status
   */
  eProsima_user_DllExport void driving_lane_status(
      const etsi_its_cam_msgs::msg::DrivingLaneStatus& _driving_lane_status);

  /*!
   * @brief This function moves the value in member driving_lane_status
   * @param _driving_lane_status New value to be moved in member driving_lane_status
   */
  eProsima_user_DllExport void driving_lane_status(etsi_its_cam_msgs::msg::DrivingLaneStatus&& _driving_lane_status);

  /*!
   * @brief This function returns a constant reference to member driving_lane_status
   * @return Constant reference to member driving_lane_status
   */
  eProsima_user_DllExport const etsi_its_cam_msgs::msg::DrivingLaneStatus& driving_lane_status() const;

  /*!
   * @brief This function returns a reference to member driving_lane_status
   * @return Reference to member driving_lane_status
   */
  eProsima_user_DllExport etsi_its_cam_msgs::msg::DrivingLaneStatus& driving_lane_status();

  /*!
   * @brief This function sets a value in member driving_lane_status_is_present
   * @param _driving_lane_status_is_present New value for member driving_lane_status_is_present
   */
  eProsima_user_DllExport void driving_lane_status_is_present(bool _driving_lane_status_is_present);

  /*!
   * @brief This function returns the value of member driving_lane_status_is_present
   * @return Value of member driving_lane_status_is_present
   */
  eProsima_user_DllExport bool driving_lane_status_is_present() const;

  /*!
   * @brief This function returns a reference to member driving_lane_status_is_present
   * @return Reference to member driving_lane_status_is_present
   */
  eProsima_user_DllExport bool& driving_lane_status_is_present();

private:
  etsi_its_cam_msgs::msg::HardShoulderStatus m_innerhard_shoulder_status;
  bool m_innerhard_shoulder_status_is_present{false};
  etsi_its_cam_msgs::msg::HardShoulderStatus m_outerhard_shoulder_status;
  bool m_outerhard_shoulder_status_is_present{false};
  etsi_its_cam_msgs::msg::DrivingLaneStatus m_driving_lane_status;
  bool m_driving_lane_status_is_present{false};
};

}  // namespace msg

}  // namespace etsi_its_cam_msgs

#endif  // _FAST_DDS_GENERATED_ETSI_ITS_CAM_MSGS_MSG_CLOSEDLANES_H_
