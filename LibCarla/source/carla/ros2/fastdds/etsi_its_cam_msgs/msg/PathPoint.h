// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file PathPoint.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifndef _FAST_DDS_GENERATED_ETSI_ITS_CAM_MSGS_MSG_PATHPOINT_H_
#define _FAST_DDS_GENERATED_ETSI_ITS_CAM_MSGS_MSG_PATHPOINT_H_

#include <array>
#include <bitset>
#include <cstdint>
#include <map>
#include <string>
#include <vector>

#include <fastcdr/cdr/fixed_size_string.hpp>
#include <fastcdr/xcdr/external.hpp>
#include <fastcdr/xcdr/optional.hpp>

#include "DeltaReferencePosition.h"
#include "PathDeltaTime.h"

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec(dllexport)
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(PATHPOINT_SOURCE)
#define PATHPOINT_DllAPI __declspec(dllexport)
#else
#define PATHPOINT_DllAPI __declspec(dllimport)
#endif  // PATHPOINT_SOURCE
#else
#define PATHPOINT_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define PATHPOINT_DllAPI
#endif  // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
class CdrSizeCalculator;
}  // namespace fastcdr
}  // namespace eprosima

namespace etsi_its_cam_msgs {

namespace msg {

/*!
 * @brief This class represents the structure PathPoint defined by the user in the IDL file.
 * @ingroup PathPoint
 */
class PathPoint {
public:
  /*!
   * @brief Default constructor.
   */
  eProsima_user_DllExport PathPoint();

  /*!
   * @brief Default destructor.
   */
  eProsima_user_DllExport ~PathPoint();

  /*!
   * @brief Copy constructor.
   * @param x Reference to the object etsi_its_cam_msgs::msg::PathPoint that will be copied.
   */
  eProsima_user_DllExport PathPoint(const PathPoint& x);

  /*!
   * @brief Move constructor.
   * @param x Reference to the object etsi_its_cam_msgs::msg::PathPoint that will be copied.
   */
  eProsima_user_DllExport PathPoint(PathPoint&& x) noexcept;

  /*!
   * @brief Copy assignment.
   * @param x Reference to the object etsi_its_cam_msgs::msg::PathPoint that will be copied.
   */
  eProsima_user_DllExport PathPoint& operator=(const PathPoint& x);

  /*!
   * @brief Move assignment.
   * @param x Reference to the object etsi_its_cam_msgs::msg::PathPoint that will be copied.
   */
  eProsima_user_DllExport PathPoint& operator=(PathPoint&& x) noexcept;

  /*!
   * @brief Comparison operator.
   * @param x etsi_its_cam_msgs::msg::PathPoint object to compare.
   */
  eProsima_user_DllExport bool operator==(const PathPoint& x) const;

  /*!
   * @brief Comparison operator.
   * @param x etsi_its_cam_msgs::msg::PathPoint object to compare.
   */
  eProsima_user_DllExport bool operator!=(const PathPoint& x) const;

  /*!
   * @brief This function copies the value in member path_position
   * @param _path_position New value to be copied in member path_position
   */
  eProsima_user_DllExport void path_position(const etsi_its_cam_msgs::msg::DeltaReferencePosition& _path_position);

  /*!
   * @brief This function moves the value in member path_position
   * @param _path_position New value to be moved in member path_position
   */
  eProsima_user_DllExport void path_position(etsi_its_cam_msgs::msg::DeltaReferencePosition&& _path_position);

  /*!
   * @brief This function returns a constant reference to member path_position
   * @return Constant reference to member path_position
   */
  eProsima_user_DllExport const etsi_its_cam_msgs::msg::DeltaReferencePosition& path_position() const;

  /*!
   * @brief This function returns a reference to member path_position
   * @return Reference to member path_position
   */
  eProsima_user_DllExport etsi_its_cam_msgs::msg::DeltaReferencePosition& path_position();

  /*!
   * @brief This function copies the value in member path_delta_time
   * @param _path_delta_time New value to be copied in member path_delta_time
   */
  eProsima_user_DllExport void path_delta_time(const etsi_its_cam_msgs::msg::PathDeltaTime& _path_delta_time);

  /*!
   * @brief This function moves the value in member path_delta_time
   * @param _path_delta_time New value to be moved in member path_delta_time
   */
  eProsima_user_DllExport void path_delta_time(etsi_its_cam_msgs::msg::PathDeltaTime&& _path_delta_time);

  /*!
   * @brief This function returns a constant reference to member path_delta_time
   * @return Constant reference to member path_delta_time
   */
  eProsima_user_DllExport const etsi_its_cam_msgs::msg::PathDeltaTime& path_delta_time() const;

  /*!
   * @brief This function returns a reference to member path_delta_time
   * @return Reference to member path_delta_time
   */
  eProsima_user_DllExport etsi_its_cam_msgs::msg::PathDeltaTime& path_delta_time();

  /*!
   * @brief This function sets a value in member path_delta_time_is_present
   * @param _path_delta_time_is_present New value for member path_delta_time_is_present
   */
  eProsima_user_DllExport void path_delta_time_is_present(bool _path_delta_time_is_present);

  /*!
   * @brief This function returns the value of member path_delta_time_is_present
   * @return Value of member path_delta_time_is_present
   */
  eProsima_user_DllExport bool path_delta_time_is_present() const;

  /*!
   * @brief This function returns a reference to member path_delta_time_is_present
   * @return Reference to member path_delta_time_is_present
   */
  eProsima_user_DllExport bool& path_delta_time_is_present();

private:
  etsi_its_cam_msgs::msg::DeltaReferencePosition m_path_position;
  etsi_its_cam_msgs::msg::PathDeltaTime m_path_delta_time;
  bool m_path_delta_time_is_present{false};
};

}  // namespace msg

}  // namespace etsi_its_cam_msgs

#endif  // _FAST_DDS_GENERATED_ETSI_ITS_CAM_MSGS_MSG_PATHPOINT_H_
