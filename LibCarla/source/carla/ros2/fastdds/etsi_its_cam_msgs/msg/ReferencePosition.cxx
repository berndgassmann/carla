// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file ReferencePosition.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "ReferencePosition.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

etsi_its_cam_msgs::msg::ReferencePosition::ReferencePosition()
{
    // m_latitude com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@58399d82

    // m_longitude com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@26f96b85

    // m_position_confidence_ellipse com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@46d8f407

    // m_altitude com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@3c0036b


}

etsi_its_cam_msgs::msg::ReferencePosition::~ReferencePosition()
{



}

etsi_its_cam_msgs::msg::ReferencePosition::ReferencePosition(
        const ReferencePosition& x)
{
    m_latitude = x.m_latitude;
    m_longitude = x.m_longitude;
    m_position_confidence_ellipse = x.m_position_confidence_ellipse;
    m_altitude = x.m_altitude;
}

etsi_its_cam_msgs::msg::ReferencePosition::ReferencePosition(
        ReferencePosition&& x)
{
    m_latitude = std::move(x.m_latitude);
    m_longitude = std::move(x.m_longitude);
    m_position_confidence_ellipse = std::move(x.m_position_confidence_ellipse);
    m_altitude = std::move(x.m_altitude);
}

etsi_its_cam_msgs::msg::ReferencePosition& etsi_its_cam_msgs::msg::ReferencePosition::operator =(
        const ReferencePosition& x)
{

    m_latitude = x.m_latitude;
    m_longitude = x.m_longitude;
    m_position_confidence_ellipse = x.m_position_confidence_ellipse;
    m_altitude = x.m_altitude;

    return *this;
}

etsi_its_cam_msgs::msg::ReferencePosition& etsi_its_cam_msgs::msg::ReferencePosition::operator =(
        ReferencePosition&& x)
{

    m_latitude = std::move(x.m_latitude);
    m_longitude = std::move(x.m_longitude);
    m_position_confidence_ellipse = std::move(x.m_position_confidence_ellipse);
    m_altitude = std::move(x.m_altitude);

    return *this;
}

bool etsi_its_cam_msgs::msg::ReferencePosition::operator ==(
        const ReferencePosition& x) const
{

    return (m_latitude == x.m_latitude && m_longitude == x.m_longitude && m_position_confidence_ellipse == x.m_position_confidence_ellipse && m_altitude == x.m_altitude);
}

bool etsi_its_cam_msgs::msg::ReferencePosition::operator !=(
        const ReferencePosition& x) const
{
    return !(*this == x);
}

size_t etsi_its_cam_msgs::msg::ReferencePosition::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += etsi_its_cam_msgs::msg::Latitude::getMaxCdrSerializedSize(current_alignment);
    current_alignment += etsi_its_cam_msgs::msg::Longitude::getMaxCdrSerializedSize(current_alignment);
    current_alignment += etsi_its_cam_msgs::msg::PosConfidenceEllipse::getMaxCdrSerializedSize(current_alignment);
    current_alignment += etsi_its_cam_msgs::msg::Altitude::getMaxCdrSerializedSize(current_alignment);

    return current_alignment - initial_alignment;
}

size_t etsi_its_cam_msgs::msg::ReferencePosition::getCdrSerializedSize(
        const etsi_its_cam_msgs::msg::ReferencePosition& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += etsi_its_cam_msgs::msg::Latitude::getCdrSerializedSize(data.latitude(), current_alignment);
    current_alignment += etsi_its_cam_msgs::msg::Longitude::getCdrSerializedSize(data.longitude(), current_alignment);
    current_alignment += etsi_its_cam_msgs::msg::PosConfidenceEllipse::getCdrSerializedSize(data.position_confidence_ellipse(), current_alignment);
    current_alignment += etsi_its_cam_msgs::msg::Altitude::getCdrSerializedSize(data.altitude(), current_alignment);

    return current_alignment - initial_alignment;
}

void etsi_its_cam_msgs::msg::ReferencePosition::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_latitude;
    scdr << m_longitude;
    scdr << m_position_confidence_ellipse;
    scdr << m_altitude;

}

void etsi_its_cam_msgs::msg::ReferencePosition::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_latitude;
    dcdr >> m_longitude;
    dcdr >> m_position_confidence_ellipse;
    dcdr >> m_altitude;
}

/*!
 * @brief This function copies the value in member latitude_
 * @param _latitude New value to be copied in member latitude_
 */
void etsi_its_cam_msgs::msg::ReferencePosition::latitude(
        const etsi_its_cam_msgs::msg::Latitude& _latitude)
{
    m_latitude = _latitude;
}

/*!
 * @brief This function moves the value in member latitude_
 * @param _latitude New value to be moved in member latitude_
 */
void etsi_its_cam_msgs::msg::ReferencePosition::latitude(
        etsi_its_cam_msgs::msg::Latitude&& _latitude)
{
    m_latitude = std::move(_latitude);
}

/*!
 * @brief This function returns a constant reference to member latitude_
 * @return Constant reference to member latitude_
 */
const etsi_its_cam_msgs::msg::Latitude& etsi_its_cam_msgs::msg::ReferencePosition::latitude() const
{
    return m_latitude;
}

/*!
 * @brief This function returns a reference to member latitude_
 * @return Reference to member latitude_
 */
etsi_its_cam_msgs::msg::Latitude& etsi_its_cam_msgs::msg::ReferencePosition::latitude()
{
    return m_latitude;
}
/*!
 * @brief This function copies the value in member longitude_
 * @param _longitude New value to be copied in member longitude_
 */
void etsi_its_cam_msgs::msg::ReferencePosition::longitude(
        const etsi_its_cam_msgs::msg::Longitude& _longitude)
{
    m_longitude = _longitude;
}

/*!
 * @brief This function moves the value in member longitude_
 * @param _longitude New value to be moved in member longitude_
 */
void etsi_its_cam_msgs::msg::ReferencePosition::longitude(
        etsi_its_cam_msgs::msg::Longitude&& _longitude)
{
    m_longitude = std::move(_longitude);
}

/*!
 * @brief This function returns a constant reference to member longitude_
 * @return Constant reference to member longitude_
 */
const etsi_its_cam_msgs::msg::Longitude& etsi_its_cam_msgs::msg::ReferencePosition::longitude() const
{
    return m_longitude;
}

/*!
 * @brief This function returns a reference to member longitude_
 * @return Reference to member longitude_
 */
etsi_its_cam_msgs::msg::Longitude& etsi_its_cam_msgs::msg::ReferencePosition::longitude()
{
    return m_longitude;
}
/*!
 * @brief This function copies the value in member position_confidence_ellipse
 * @param _position_confidence_ellipse New value to be copied in member position_confidence_ellipse
 */
void etsi_its_cam_msgs::msg::ReferencePosition::position_confidence_ellipse(
        const etsi_its_cam_msgs::msg::PosConfidenceEllipse& _position_confidence_ellipse)
{
    m_position_confidence_ellipse = _position_confidence_ellipse;
}

/*!
 * @brief This function moves the value in member position_confidence_ellipse
 * @param _position_confidence_ellipse New value to be moved in member position_confidence_ellipse
 */
void etsi_its_cam_msgs::msg::ReferencePosition::position_confidence_ellipse(
        etsi_its_cam_msgs::msg::PosConfidenceEllipse&& _position_confidence_ellipse)
{
    m_position_confidence_ellipse = std::move(_position_confidence_ellipse);
}

/*!
 * @brief This function returns a constant reference to member position_confidence_ellipse
 * @return Constant reference to member position_confidence_ellipse
 */
const etsi_its_cam_msgs::msg::PosConfidenceEllipse& etsi_its_cam_msgs::msg::ReferencePosition::position_confidence_ellipse() const
{
    return m_position_confidence_ellipse;
}

/*!
 * @brief This function returns a reference to member position_confidence_ellipse
 * @return Reference to member position_confidence_ellipse
 */
etsi_its_cam_msgs::msg::PosConfidenceEllipse& etsi_its_cam_msgs::msg::ReferencePosition::position_confidence_ellipse()
{
    return m_position_confidence_ellipse;
}
/*!
 * @brief This function copies the value in member altitude_
 * @param _altitude New value to be copied in member altitude_
 */
void etsi_its_cam_msgs::msg::ReferencePosition::altitude(
        const etsi_its_cam_msgs::msg::Altitude& _altitude)
{
    m_altitude = _altitude;
}

/*!
 * @brief This function moves the value in member altitude_
 * @param _altitude New value to be moved in member altitude_
 */
void etsi_its_cam_msgs::msg::ReferencePosition::altitude(
        etsi_its_cam_msgs::msg::Altitude&& _altitude)
{
    m_altitude = std::move(_altitude);
}

/*!
 * @brief This function returns a constant reference to member altitude_
 * @return Constant reference to member altitude_
 */
const etsi_its_cam_msgs::msg::Altitude& etsi_its_cam_msgs::msg::ReferencePosition::altitude() const
{
    return m_altitude;
}

/*!
 * @brief This function returns a reference to member altitude_
 * @return Reference to member altitude_
 */
etsi_its_cam_msgs::msg::Altitude& etsi_its_cam_msgs::msg::ReferencePosition::altitude()
{
    return m_altitude;
}

size_t etsi_its_cam_msgs::msg::ReferencePosition::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;



    return current_align;
}

bool etsi_its_cam_msgs::msg::ReferencePosition::isKeyDefined()
{
    return false;
}

void etsi_its_cam_msgs::msg::ReferencePosition::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
        
}


