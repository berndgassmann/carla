// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file ReferencePosition.cpp
 * This source file contains the implementation of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "ReferencePosition.h"

#include <fastcdr/Cdr.h>


#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>


namespace etsi_its_cam_msgs {

namespace msg {



ReferencePosition::ReferencePosition()
{
}

ReferencePosition::~ReferencePosition()
{
}

ReferencePosition::ReferencePosition(
        const ReferencePosition& x)
{
    m_latitude = x.m_latitude;
    m_longitude = x.m_longitude;
    m_position_confidence_ellipse = x.m_position_confidence_ellipse;
    m_altitude = x.m_altitude;
}

ReferencePosition::ReferencePosition(
        ReferencePosition&& x) noexcept
{
    m_latitude = std::move(x.m_latitude);
    m_longitude = std::move(x.m_longitude);
    m_position_confidence_ellipse = std::move(x.m_position_confidence_ellipse);
    m_altitude = std::move(x.m_altitude);
}

ReferencePosition& ReferencePosition::operator =(
        const ReferencePosition& x)
{

    m_latitude = x.m_latitude;
    m_longitude = x.m_longitude;
    m_position_confidence_ellipse = x.m_position_confidence_ellipse;
    m_altitude = x.m_altitude;
    return *this;
}

ReferencePosition& ReferencePosition::operator =(
        ReferencePosition&& x) noexcept
{

    m_latitude = std::move(x.m_latitude);
    m_longitude = std::move(x.m_longitude);
    m_position_confidence_ellipse = std::move(x.m_position_confidence_ellipse);
    m_altitude = std::move(x.m_altitude);
    return *this;
}

bool ReferencePosition::operator ==(
        const ReferencePosition& x) const
{
    return (m_latitude == x.m_latitude &&
           m_longitude == x.m_longitude &&
           m_position_confidence_ellipse == x.m_position_confidence_ellipse &&
           m_altitude == x.m_altitude);
}

bool ReferencePosition::operator !=(
        const ReferencePosition& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member latitude
 * @param _latitude New value to be copied in member latitude
 */
void ReferencePosition::latitude(
        const etsi_its_cam_msgs::msg::Latitude& _latitude)
{
    m_latitude = _latitude;
}

/*!
 * @brief This function moves the value in member latitude
 * @param _latitude New value to be moved in member latitude
 */
void ReferencePosition::latitude(
        etsi_its_cam_msgs::msg::Latitude&& _latitude)
{
    m_latitude = std::move(_latitude);
}

/*!
 * @brief This function returns a constant reference to member latitude
 * @return Constant reference to member latitude
 */
const etsi_its_cam_msgs::msg::Latitude& ReferencePosition::latitude() const
{
    return m_latitude;
}

/*!
 * @brief This function returns a reference to member latitude
 * @return Reference to member latitude
 */
etsi_its_cam_msgs::msg::Latitude& ReferencePosition::latitude()
{
    return m_latitude;
}


/*!
 * @brief This function copies the value in member longitude
 * @param _longitude New value to be copied in member longitude
 */
void ReferencePosition::longitude(
        const etsi_its_cam_msgs::msg::Longitude& _longitude)
{
    m_longitude = _longitude;
}

/*!
 * @brief This function moves the value in member longitude
 * @param _longitude New value to be moved in member longitude
 */
void ReferencePosition::longitude(
        etsi_its_cam_msgs::msg::Longitude&& _longitude)
{
    m_longitude = std::move(_longitude);
}

/*!
 * @brief This function returns a constant reference to member longitude
 * @return Constant reference to member longitude
 */
const etsi_its_cam_msgs::msg::Longitude& ReferencePosition::longitude() const
{
    return m_longitude;
}

/*!
 * @brief This function returns a reference to member longitude
 * @return Reference to member longitude
 */
etsi_its_cam_msgs::msg::Longitude& ReferencePosition::longitude()
{
    return m_longitude;
}


/*!
 * @brief This function copies the value in member position_confidence_ellipse
 * @param _position_confidence_ellipse New value to be copied in member position_confidence_ellipse
 */
void ReferencePosition::position_confidence_ellipse(
        const etsi_its_cam_msgs::msg::PosConfidenceEllipse& _position_confidence_ellipse)
{
    m_position_confidence_ellipse = _position_confidence_ellipse;
}

/*!
 * @brief This function moves the value in member position_confidence_ellipse
 * @param _position_confidence_ellipse New value to be moved in member position_confidence_ellipse
 */
void ReferencePosition::position_confidence_ellipse(
        etsi_its_cam_msgs::msg::PosConfidenceEllipse&& _position_confidence_ellipse)
{
    m_position_confidence_ellipse = std::move(_position_confidence_ellipse);
}

/*!
 * @brief This function returns a constant reference to member position_confidence_ellipse
 * @return Constant reference to member position_confidence_ellipse
 */
const etsi_its_cam_msgs::msg::PosConfidenceEllipse& ReferencePosition::position_confidence_ellipse() const
{
    return m_position_confidence_ellipse;
}

/*!
 * @brief This function returns a reference to member position_confidence_ellipse
 * @return Reference to member position_confidence_ellipse
 */
etsi_its_cam_msgs::msg::PosConfidenceEllipse& ReferencePosition::position_confidence_ellipse()
{
    return m_position_confidence_ellipse;
}


/*!
 * @brief This function copies the value in member altitude
 * @param _altitude New value to be copied in member altitude
 */
void ReferencePosition::altitude(
        const etsi_its_cam_msgs::msg::Altitude& _altitude)
{
    m_altitude = _altitude;
}

/*!
 * @brief This function moves the value in member altitude
 * @param _altitude New value to be moved in member altitude
 */
void ReferencePosition::altitude(
        etsi_its_cam_msgs::msg::Altitude&& _altitude)
{
    m_altitude = std::move(_altitude);
}

/*!
 * @brief This function returns a constant reference to member altitude
 * @return Constant reference to member altitude
 */
const etsi_its_cam_msgs::msg::Altitude& ReferencePosition::altitude() const
{
    return m_altitude;
}

/*!
 * @brief This function returns a reference to member altitude
 * @return Reference to member altitude
 */
etsi_its_cam_msgs::msg::Altitude& ReferencePosition::altitude()
{
    return m_altitude;
}




} // namespace msg


} // namespace etsi_its_cam_msgs
// Include auxiliary functions like for serializing/deserializing.
#include "ReferencePositionCdrAux.ipp"

