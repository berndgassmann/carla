// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file RoadWorksContainerBasic.cpp
 * This source file contains the implementation of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "RoadWorksContainerBasic.h"

#include <fastcdr/Cdr.h>


#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>


namespace etsi_its_cam_msgs {

namespace msg {



RoadWorksContainerBasic::RoadWorksContainerBasic()
{
}

RoadWorksContainerBasic::~RoadWorksContainerBasic()
{
}

RoadWorksContainerBasic::RoadWorksContainerBasic(
        const RoadWorksContainerBasic& x)
{
    m_roadworks_sub_cause_code = x.m_roadworks_sub_cause_code;
    m_roadworks_sub_cause_code_is_present = x.m_roadworks_sub_cause_code_is_present;
    m_light_bar_siren_in_use = x.m_light_bar_siren_in_use;
    m_closed_lanes = x.m_closed_lanes;
    m_closed_lanes_is_present = x.m_closed_lanes_is_present;
}

RoadWorksContainerBasic::RoadWorksContainerBasic(
        RoadWorksContainerBasic&& x) noexcept
{
    m_roadworks_sub_cause_code = std::move(x.m_roadworks_sub_cause_code);
    m_roadworks_sub_cause_code_is_present = x.m_roadworks_sub_cause_code_is_present;
    m_light_bar_siren_in_use = std::move(x.m_light_bar_siren_in_use);
    m_closed_lanes = std::move(x.m_closed_lanes);
    m_closed_lanes_is_present = x.m_closed_lanes_is_present;
}

RoadWorksContainerBasic& RoadWorksContainerBasic::operator =(
        const RoadWorksContainerBasic& x)
{

    m_roadworks_sub_cause_code = x.m_roadworks_sub_cause_code;
    m_roadworks_sub_cause_code_is_present = x.m_roadworks_sub_cause_code_is_present;
    m_light_bar_siren_in_use = x.m_light_bar_siren_in_use;
    m_closed_lanes = x.m_closed_lanes;
    m_closed_lanes_is_present = x.m_closed_lanes_is_present;
    return *this;
}

RoadWorksContainerBasic& RoadWorksContainerBasic::operator =(
        RoadWorksContainerBasic&& x) noexcept
{

    m_roadworks_sub_cause_code = std::move(x.m_roadworks_sub_cause_code);
    m_roadworks_sub_cause_code_is_present = x.m_roadworks_sub_cause_code_is_present;
    m_light_bar_siren_in_use = std::move(x.m_light_bar_siren_in_use);
    m_closed_lanes = std::move(x.m_closed_lanes);
    m_closed_lanes_is_present = x.m_closed_lanes_is_present;
    return *this;
}

bool RoadWorksContainerBasic::operator ==(
        const RoadWorksContainerBasic& x) const
{
    return (m_roadworks_sub_cause_code == x.m_roadworks_sub_cause_code &&
           m_roadworks_sub_cause_code_is_present == x.m_roadworks_sub_cause_code_is_present &&
           m_light_bar_siren_in_use == x.m_light_bar_siren_in_use &&
           m_closed_lanes == x.m_closed_lanes &&
           m_closed_lanes_is_present == x.m_closed_lanes_is_present);
}

bool RoadWorksContainerBasic::operator !=(
        const RoadWorksContainerBasic& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member roadworks_sub_cause_code
 * @param _roadworks_sub_cause_code New value to be copied in member roadworks_sub_cause_code
 */
void RoadWorksContainerBasic::roadworks_sub_cause_code(
        const etsi_its_cam_msgs::msg::RoadworksSubCauseCode& _roadworks_sub_cause_code)
{
    m_roadworks_sub_cause_code = _roadworks_sub_cause_code;
}

/*!
 * @brief This function moves the value in member roadworks_sub_cause_code
 * @param _roadworks_sub_cause_code New value to be moved in member roadworks_sub_cause_code
 */
void RoadWorksContainerBasic::roadworks_sub_cause_code(
        etsi_its_cam_msgs::msg::RoadworksSubCauseCode&& _roadworks_sub_cause_code)
{
    m_roadworks_sub_cause_code = std::move(_roadworks_sub_cause_code);
}

/*!
 * @brief This function returns a constant reference to member roadworks_sub_cause_code
 * @return Constant reference to member roadworks_sub_cause_code
 */
const etsi_its_cam_msgs::msg::RoadworksSubCauseCode& RoadWorksContainerBasic::roadworks_sub_cause_code() const
{
    return m_roadworks_sub_cause_code;
}

/*!
 * @brief This function returns a reference to member roadworks_sub_cause_code
 * @return Reference to member roadworks_sub_cause_code
 */
etsi_its_cam_msgs::msg::RoadworksSubCauseCode& RoadWorksContainerBasic::roadworks_sub_cause_code()
{
    return m_roadworks_sub_cause_code;
}


/*!
 * @brief This function sets a value in member roadworks_sub_cause_code_is_present
 * @param _roadworks_sub_cause_code_is_present New value for member roadworks_sub_cause_code_is_present
 */
void RoadWorksContainerBasic::roadworks_sub_cause_code_is_present(
        bool _roadworks_sub_cause_code_is_present)
{
    m_roadworks_sub_cause_code_is_present = _roadworks_sub_cause_code_is_present;
}

/*!
 * @brief This function returns the value of member roadworks_sub_cause_code_is_present
 * @return Value of member roadworks_sub_cause_code_is_present
 */
bool RoadWorksContainerBasic::roadworks_sub_cause_code_is_present() const
{
    return m_roadworks_sub_cause_code_is_present;
}

/*!
 * @brief This function returns a reference to member roadworks_sub_cause_code_is_present
 * @return Reference to member roadworks_sub_cause_code_is_present
 */
bool& RoadWorksContainerBasic::roadworks_sub_cause_code_is_present()
{
    return m_roadworks_sub_cause_code_is_present;
}


/*!
 * @brief This function copies the value in member light_bar_siren_in_use
 * @param _light_bar_siren_in_use New value to be copied in member light_bar_siren_in_use
 */
void RoadWorksContainerBasic::light_bar_siren_in_use(
        const etsi_its_cam_msgs::msg::LightBarSirenInUse& _light_bar_siren_in_use)
{
    m_light_bar_siren_in_use = _light_bar_siren_in_use;
}

/*!
 * @brief This function moves the value in member light_bar_siren_in_use
 * @param _light_bar_siren_in_use New value to be moved in member light_bar_siren_in_use
 */
void RoadWorksContainerBasic::light_bar_siren_in_use(
        etsi_its_cam_msgs::msg::LightBarSirenInUse&& _light_bar_siren_in_use)
{
    m_light_bar_siren_in_use = std::move(_light_bar_siren_in_use);
}

/*!
 * @brief This function returns a constant reference to member light_bar_siren_in_use
 * @return Constant reference to member light_bar_siren_in_use
 */
const etsi_its_cam_msgs::msg::LightBarSirenInUse& RoadWorksContainerBasic::light_bar_siren_in_use() const
{
    return m_light_bar_siren_in_use;
}

/*!
 * @brief This function returns a reference to member light_bar_siren_in_use
 * @return Reference to member light_bar_siren_in_use
 */
etsi_its_cam_msgs::msg::LightBarSirenInUse& RoadWorksContainerBasic::light_bar_siren_in_use()
{
    return m_light_bar_siren_in_use;
}


/*!
 * @brief This function copies the value in member closed_lanes
 * @param _closed_lanes New value to be copied in member closed_lanes
 */
void RoadWorksContainerBasic::closed_lanes(
        const etsi_its_cam_msgs::msg::ClosedLanes& _closed_lanes)
{
    m_closed_lanes = _closed_lanes;
}

/*!
 * @brief This function moves the value in member closed_lanes
 * @param _closed_lanes New value to be moved in member closed_lanes
 */
void RoadWorksContainerBasic::closed_lanes(
        etsi_its_cam_msgs::msg::ClosedLanes&& _closed_lanes)
{
    m_closed_lanes = std::move(_closed_lanes);
}

/*!
 * @brief This function returns a constant reference to member closed_lanes
 * @return Constant reference to member closed_lanes
 */
const etsi_its_cam_msgs::msg::ClosedLanes& RoadWorksContainerBasic::closed_lanes() const
{
    return m_closed_lanes;
}

/*!
 * @brief This function returns a reference to member closed_lanes
 * @return Reference to member closed_lanes
 */
etsi_its_cam_msgs::msg::ClosedLanes& RoadWorksContainerBasic::closed_lanes()
{
    return m_closed_lanes;
}


/*!
 * @brief This function sets a value in member closed_lanes_is_present
 * @param _closed_lanes_is_present New value for member closed_lanes_is_present
 */
void RoadWorksContainerBasic::closed_lanes_is_present(
        bool _closed_lanes_is_present)
{
    m_closed_lanes_is_present = _closed_lanes_is_present;
}

/*!
 * @brief This function returns the value of member closed_lanes_is_present
 * @return Value of member closed_lanes_is_present
 */
bool RoadWorksContainerBasic::closed_lanes_is_present() const
{
    return m_closed_lanes_is_present;
}

/*!
 * @brief This function returns a reference to member closed_lanes_is_present
 * @return Reference to member closed_lanes_is_present
 */
bool& RoadWorksContainerBasic::closed_lanes_is_present()
{
    return m_closed_lanes_is_present;
}




} // namespace msg


} // namespace etsi_its_cam_msgs
// Include auxiliary functions like for serializing/deserializing.
#include "RoadWorksContainerBasicCdrAux.ipp"

