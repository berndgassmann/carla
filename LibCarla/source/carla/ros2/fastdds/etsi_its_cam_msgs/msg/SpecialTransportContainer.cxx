// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file SpecialTransportContainer.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "SpecialTransportContainer.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

etsi_its_cam_msgs::msg::SpecialTransportContainer::SpecialTransportContainer()
{
    // m_special_transport_type com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@9bd0fa6

    // m_light_bar_siren_in_use com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@59d2103b


}

etsi_its_cam_msgs::msg::SpecialTransportContainer::~SpecialTransportContainer()
{

}

etsi_its_cam_msgs::msg::SpecialTransportContainer::SpecialTransportContainer(
        const SpecialTransportContainer& x)
{
    m_special_transport_type = x.m_special_transport_type;
    m_light_bar_siren_in_use = x.m_light_bar_siren_in_use;
}

etsi_its_cam_msgs::msg::SpecialTransportContainer::SpecialTransportContainer(
        SpecialTransportContainer&& x)
{
    m_special_transport_type = std::move(x.m_special_transport_type);
    m_light_bar_siren_in_use = std::move(x.m_light_bar_siren_in_use);
}

etsi_its_cam_msgs::msg::SpecialTransportContainer& etsi_its_cam_msgs::msg::SpecialTransportContainer::operator =(
        const SpecialTransportContainer& x)
{

    m_special_transport_type = x.m_special_transport_type;
    m_light_bar_siren_in_use = x.m_light_bar_siren_in_use;

    return *this;
}

etsi_its_cam_msgs::msg::SpecialTransportContainer& etsi_its_cam_msgs::msg::SpecialTransportContainer::operator =(
        SpecialTransportContainer&& x)
{

    m_special_transport_type = std::move(x.m_special_transport_type);
    m_light_bar_siren_in_use = std::move(x.m_light_bar_siren_in_use);

    return *this;
}

bool etsi_its_cam_msgs::msg::SpecialTransportContainer::operator ==(
        const SpecialTransportContainer& x) const
{

    return (m_special_transport_type == x.m_special_transport_type && m_light_bar_siren_in_use == x.m_light_bar_siren_in_use);
}

bool etsi_its_cam_msgs::msg::SpecialTransportContainer::operator !=(
        const SpecialTransportContainer& x) const
{
    return !(*this == x);
}

size_t etsi_its_cam_msgs::msg::SpecialTransportContainer::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += etsi_its_cam_msgs::msg::SpecialTransportType::getMaxCdrSerializedSize(current_alignment);
    current_alignment += etsi_its_cam_msgs::msg::LightBarSirenInUse::getMaxCdrSerializedSize(current_alignment);

    return current_alignment - initial_alignment;
}

size_t etsi_its_cam_msgs::msg::SpecialTransportContainer::getCdrSerializedSize(
        const etsi_its_cam_msgs::msg::SpecialTransportContainer& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += etsi_its_cam_msgs::msg::SpecialTransportType::getCdrSerializedSize(data.special_transport_type(), current_alignment);
    current_alignment += etsi_its_cam_msgs::msg::LightBarSirenInUse::getCdrSerializedSize(data.light_bar_siren_in_use(), current_alignment);

    return current_alignment - initial_alignment;
}

void etsi_its_cam_msgs::msg::SpecialTransportContainer::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_special_transport_type;
    scdr << m_light_bar_siren_in_use;

}

void etsi_its_cam_msgs::msg::SpecialTransportContainer::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_special_transport_type;
    dcdr >> m_light_bar_siren_in_use;
}

/*!
 * @brief This function copies the value in member special_transport_type
 * @param _special_transport_type New value to be copied in member special_transport_type
 */
void etsi_its_cam_msgs::msg::SpecialTransportContainer::special_transport_type(
        const etsi_its_cam_msgs::msg::SpecialTransportType& _special_transport_type)
{
    m_special_transport_type = _special_transport_type;
}

/*!
 * @brief This function moves the value in member special_transport_type
 * @param _special_transport_type New value to be moved in member special_transport_type
 */
void etsi_its_cam_msgs::msg::SpecialTransportContainer::special_transport_type(
        etsi_its_cam_msgs::msg::SpecialTransportType&& _special_transport_type)
{
    m_special_transport_type = std::move(_special_transport_type);
}

/*!
 * @brief This function returns a constant reference to member special_transport_type
 * @return Constant reference to member special_transport_type
 */
const etsi_its_cam_msgs::msg::SpecialTransportType& etsi_its_cam_msgs::msg::SpecialTransportContainer::special_transport_type() const
{
    return m_special_transport_type;
}

/*!
 * @brief This function returns a reference to member special_transport_type
 * @return Reference to member special_transport_type
 */
etsi_its_cam_msgs::msg::SpecialTransportType& etsi_its_cam_msgs::msg::SpecialTransportContainer::special_transport_type()
{
    return m_special_transport_type;
}
/*!
 * @brief This function copies the value in member light_bar_siren_in_use
 * @param _light_bar_siren_in_use New value to be copied in member light_bar_siren_in_use
 */
void etsi_its_cam_msgs::msg::SpecialTransportContainer::light_bar_siren_in_use(
        const etsi_its_cam_msgs::msg::LightBarSirenInUse& _light_bar_siren_in_use)
{
    m_light_bar_siren_in_use = _light_bar_siren_in_use;
}

/*!
 * @brief This function moves the value in member light_bar_siren_in_use
 * @param _light_bar_siren_in_use New value to be moved in member light_bar_siren_in_use
 */
void etsi_its_cam_msgs::msg::SpecialTransportContainer::light_bar_siren_in_use(
        etsi_its_cam_msgs::msg::LightBarSirenInUse&& _light_bar_siren_in_use)
{
    m_light_bar_siren_in_use = std::move(_light_bar_siren_in_use);
}

/*!
 * @brief This function returns a constant reference to member light_bar_siren_in_use
 * @return Constant reference to member light_bar_siren_in_use
 */
const etsi_its_cam_msgs::msg::LightBarSirenInUse& etsi_its_cam_msgs::msg::SpecialTransportContainer::light_bar_siren_in_use() const
{
    return m_light_bar_siren_in_use;
}

/*!
 * @brief This function returns a reference to member light_bar_siren_in_use
 * @return Reference to member light_bar_siren_in_use
 */
etsi_its_cam_msgs::msg::LightBarSirenInUse& etsi_its_cam_msgs::msg::SpecialTransportContainer::light_bar_siren_in_use()
{
    return m_light_bar_siren_in_use;
}

size_t etsi_its_cam_msgs::msg::SpecialTransportContainer::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;



    return current_align;
}

bool etsi_its_cam_msgs::msg::SpecialTransportContainer::isKeyDefined()
{
    return false;
}

void etsi_its_cam_msgs::msg::SpecialTransportContainer::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
      
}


