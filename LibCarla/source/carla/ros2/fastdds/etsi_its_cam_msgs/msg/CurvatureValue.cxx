// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file CurvatureValue.cpp
 * This source file contains the implementation of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "CurvatureValue.h"

#include <fastcdr/Cdr.h>


#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>


namespace etsi_its_cam_msgs {

namespace msg {

namespace CurvatureValue_Constants {


} // namespace CurvatureValue_Constants


CurvatureValue::CurvatureValue()
{
}

CurvatureValue::~CurvatureValue()
{
}

CurvatureValue::CurvatureValue(
        const CurvatureValue& x)
{
    m_value = x.m_value;
}

CurvatureValue::CurvatureValue(
        CurvatureValue&& x) noexcept
{
    m_value = x.m_value;
}

CurvatureValue& CurvatureValue::operator =(
        const CurvatureValue& x)
{

    m_value = x.m_value;
    return *this;
}

CurvatureValue& CurvatureValue::operator =(
        CurvatureValue&& x) noexcept
{

    m_value = x.m_value;
    return *this;
}

bool CurvatureValue::operator ==(
        const CurvatureValue& x) const
{
    return (m_value == x.m_value);
}

bool CurvatureValue::operator !=(
        const CurvatureValue& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function sets a value in member value
 * @param _value New value for member value
 */
void CurvatureValue::value(
        int16_t _value)
{
    m_value = _value;
}

/*!
 * @brief This function returns the value of member value
 * @return Value of member value
 */
int16_t CurvatureValue::value() const
{
    return m_value;
}

/*!
 * @brief This function returns a reference to member value
 * @return Reference to member value
 */
int16_t& CurvatureValue::value()
{
    return m_value;
}




} // namespace msg


} // namespace etsi_its_cam_msgs
// Include auxiliary functions like for serializing/deserializing.
#include "CurvatureValueCdrAux.ipp"

