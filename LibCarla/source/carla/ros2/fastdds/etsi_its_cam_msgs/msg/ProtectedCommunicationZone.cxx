// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file ProtectedCommunicationZone.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "ProtectedCommunicationZone.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

etsi_its_cam_msgs::msg::ProtectedCommunicationZone::ProtectedCommunicationZone()
{
    // m_protected_zone_type com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@545f80bf

    // m_expiry_time com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@66f66866

    // m_expiry_time_is_present com.eprosima.idl.parser.typecode.PrimitiveTypeCode@22fa55b2
    m_expiry_time_is_present = false;
    // m_protected_zone_latitude com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@4d666b41

    // m_protected_zone_longitude com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@6594402a

    // m_protected_zone_radius com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@30f4b1a6

    // m_protected_zone_radius_is_present com.eprosima.idl.parser.typecode.PrimitiveTypeCode@405325cf
    m_protected_zone_radius_is_present = false;
    // m_protected_zone_id com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@3e1162e7

    // m_protected_zone_id_is_present com.eprosima.idl.parser.typecode.PrimitiveTypeCode@79c3f01f
    m_protected_zone_id_is_present = false;

}

etsi_its_cam_msgs::msg::ProtectedCommunicationZone::~ProtectedCommunicationZone()
{








}

etsi_its_cam_msgs::msg::ProtectedCommunicationZone::ProtectedCommunicationZone(
        const ProtectedCommunicationZone& x)
{
    m_protected_zone_type = x.m_protected_zone_type;
    m_expiry_time = x.m_expiry_time;
    m_expiry_time_is_present = x.m_expiry_time_is_present;
    m_protected_zone_latitude = x.m_protected_zone_latitude;
    m_protected_zone_longitude = x.m_protected_zone_longitude;
    m_protected_zone_radius = x.m_protected_zone_radius;
    m_protected_zone_radius_is_present = x.m_protected_zone_radius_is_present;
    m_protected_zone_id = x.m_protected_zone_id;
    m_protected_zone_id_is_present = x.m_protected_zone_id_is_present;
}

etsi_its_cam_msgs::msg::ProtectedCommunicationZone::ProtectedCommunicationZone(
        ProtectedCommunicationZone&& x)
{
    m_protected_zone_type = std::move(x.m_protected_zone_type);
    m_expiry_time = std::move(x.m_expiry_time);
    m_expiry_time_is_present = x.m_expiry_time_is_present;
    m_protected_zone_latitude = std::move(x.m_protected_zone_latitude);
    m_protected_zone_longitude = std::move(x.m_protected_zone_longitude);
    m_protected_zone_radius = std::move(x.m_protected_zone_radius);
    m_protected_zone_radius_is_present = x.m_protected_zone_radius_is_present;
    m_protected_zone_id = std::move(x.m_protected_zone_id);
    m_protected_zone_id_is_present = x.m_protected_zone_id_is_present;
}

etsi_its_cam_msgs::msg::ProtectedCommunicationZone& etsi_its_cam_msgs::msg::ProtectedCommunicationZone::operator =(
        const ProtectedCommunicationZone& x)
{

    m_protected_zone_type = x.m_protected_zone_type;
    m_expiry_time = x.m_expiry_time;
    m_expiry_time_is_present = x.m_expiry_time_is_present;
    m_protected_zone_latitude = x.m_protected_zone_latitude;
    m_protected_zone_longitude = x.m_protected_zone_longitude;
    m_protected_zone_radius = x.m_protected_zone_radius;
    m_protected_zone_radius_is_present = x.m_protected_zone_radius_is_present;
    m_protected_zone_id = x.m_protected_zone_id;
    m_protected_zone_id_is_present = x.m_protected_zone_id_is_present;

    return *this;
}

etsi_its_cam_msgs::msg::ProtectedCommunicationZone& etsi_its_cam_msgs::msg::ProtectedCommunicationZone::operator =(
        ProtectedCommunicationZone&& x)
{

    m_protected_zone_type = std::move(x.m_protected_zone_type);
    m_expiry_time = std::move(x.m_expiry_time);
    m_expiry_time_is_present = x.m_expiry_time_is_present;
    m_protected_zone_latitude = std::move(x.m_protected_zone_latitude);
    m_protected_zone_longitude = std::move(x.m_protected_zone_longitude);
    m_protected_zone_radius = std::move(x.m_protected_zone_radius);
    m_protected_zone_radius_is_present = x.m_protected_zone_radius_is_present;
    m_protected_zone_id = std::move(x.m_protected_zone_id);
    m_protected_zone_id_is_present = x.m_protected_zone_id_is_present;

    return *this;
}

bool etsi_its_cam_msgs::msg::ProtectedCommunicationZone::operator ==(
        const ProtectedCommunicationZone& x) const
{

    return (m_protected_zone_type == x.m_protected_zone_type && m_expiry_time == x.m_expiry_time && m_expiry_time_is_present == x.m_expiry_time_is_present && m_protected_zone_latitude == x.m_protected_zone_latitude && m_protected_zone_longitude == x.m_protected_zone_longitude && m_protected_zone_radius == x.m_protected_zone_radius && m_protected_zone_radius_is_present == x.m_protected_zone_radius_is_present && m_protected_zone_id == x.m_protected_zone_id && m_protected_zone_id_is_present == x.m_protected_zone_id_is_present);
}

bool etsi_its_cam_msgs::msg::ProtectedCommunicationZone::operator !=(
        const ProtectedCommunicationZone& x) const
{
    return !(*this == x);
}

size_t etsi_its_cam_msgs::msg::ProtectedCommunicationZone::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += etsi_its_cam_msgs::msg::ProtectedZoneType::getMaxCdrSerializedSize(current_alignment);
    current_alignment += etsi_its_cam_msgs::msg::TimestampIts::getMaxCdrSerializedSize(current_alignment);
    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += etsi_its_cam_msgs::msg::Latitude::getMaxCdrSerializedSize(current_alignment);
    current_alignment += etsi_its_cam_msgs::msg::Longitude::getMaxCdrSerializedSize(current_alignment);
    current_alignment += etsi_its_cam_msgs::msg::ProtectedZoneRadius::getMaxCdrSerializedSize(current_alignment);
    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += etsi_its_cam_msgs::msg::ProtectedZoneID::getMaxCdrSerializedSize(current_alignment);
    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}

size_t etsi_its_cam_msgs::msg::ProtectedCommunicationZone::getCdrSerializedSize(
        const etsi_its_cam_msgs::msg::ProtectedCommunicationZone& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += etsi_its_cam_msgs::msg::ProtectedZoneType::getCdrSerializedSize(data.protected_zone_type(), current_alignment);
    current_alignment += etsi_its_cam_msgs::msg::TimestampIts::getCdrSerializedSize(data.expiry_time(), current_alignment);
    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += etsi_its_cam_msgs::msg::Latitude::getCdrSerializedSize(data.protected_zone_latitude(), current_alignment);
    current_alignment += etsi_its_cam_msgs::msg::Longitude::getCdrSerializedSize(data.protected_zone_longitude(), current_alignment);
    current_alignment += etsi_its_cam_msgs::msg::ProtectedZoneRadius::getCdrSerializedSize(data.protected_zone_radius(), current_alignment);
    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += etsi_its_cam_msgs::msg::ProtectedZoneID::getCdrSerializedSize(data.protected_zone_id(), current_alignment);
    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}

void etsi_its_cam_msgs::msg::ProtectedCommunicationZone::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_protected_zone_type;
    scdr << m_expiry_time;
    scdr << m_expiry_time_is_present;
    scdr << m_protected_zone_latitude;
    scdr << m_protected_zone_longitude;
    scdr << m_protected_zone_radius;
    scdr << m_protected_zone_radius_is_present;
    scdr << m_protected_zone_id;
    scdr << m_protected_zone_id_is_present;

}

void etsi_its_cam_msgs::msg::ProtectedCommunicationZone::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_protected_zone_type;
    dcdr >> m_expiry_time;
    dcdr >> m_expiry_time_is_present;
    dcdr >> m_protected_zone_latitude;
    dcdr >> m_protected_zone_longitude;
    dcdr >> m_protected_zone_radius;
    dcdr >> m_protected_zone_radius_is_present;
    dcdr >> m_protected_zone_id;
    dcdr >> m_protected_zone_id_is_present;
}

/*!
 * @brief This function copies the value in member protected_zone_type
 * @param _protected_zone_type New value to be copied in member protected_zone_type
 */
void etsi_its_cam_msgs::msg::ProtectedCommunicationZone::protected_zone_type(
        const etsi_its_cam_msgs::msg::ProtectedZoneType& _protected_zone_type)
{
    m_protected_zone_type = _protected_zone_type;
}

/*!
 * @brief This function moves the value in member protected_zone_type
 * @param _protected_zone_type New value to be moved in member protected_zone_type
 */
void etsi_its_cam_msgs::msg::ProtectedCommunicationZone::protected_zone_type(
        etsi_its_cam_msgs::msg::ProtectedZoneType&& _protected_zone_type)
{
    m_protected_zone_type = std::move(_protected_zone_type);
}

/*!
 * @brief This function returns a constant reference to member protected_zone_type
 * @return Constant reference to member protected_zone_type
 */
const etsi_its_cam_msgs::msg::ProtectedZoneType& etsi_its_cam_msgs::msg::ProtectedCommunicationZone::protected_zone_type() const
{
    return m_protected_zone_type;
}

/*!
 * @brief This function returns a reference to member protected_zone_type
 * @return Reference to member protected_zone_type
 */
etsi_its_cam_msgs::msg::ProtectedZoneType& etsi_its_cam_msgs::msg::ProtectedCommunicationZone::protected_zone_type()
{
    return m_protected_zone_type;
}
/*!
 * @brief This function copies the value in member expiry_time
 * @param _expiry_time New value to be copied in member expiry_time
 */
void etsi_its_cam_msgs::msg::ProtectedCommunicationZone::expiry_time(
        const etsi_its_cam_msgs::msg::TimestampIts& _expiry_time)
{
    m_expiry_time = _expiry_time;
}

/*!
 * @brief This function moves the value in member expiry_time
 * @param _expiry_time New value to be moved in member expiry_time
 */
void etsi_its_cam_msgs::msg::ProtectedCommunicationZone::expiry_time(
        etsi_its_cam_msgs::msg::TimestampIts&& _expiry_time)
{
    m_expiry_time = std::move(_expiry_time);
}

/*!
 * @brief This function returns a constant reference to member expiry_time
 * @return Constant reference to member expiry_time
 */
const etsi_its_cam_msgs::msg::TimestampIts& etsi_its_cam_msgs::msg::ProtectedCommunicationZone::expiry_time() const
{
    return m_expiry_time;
}

/*!
 * @brief This function returns a reference to member expiry_time
 * @return Reference to member expiry_time
 */
etsi_its_cam_msgs::msg::TimestampIts& etsi_its_cam_msgs::msg::ProtectedCommunicationZone::expiry_time()
{
    return m_expiry_time;
}
/*!
 * @brief This function sets a value in member expiry_time_is_present
 * @param _expiry_time_is_present New value for member expiry_time_is_present
 */
void etsi_its_cam_msgs::msg::ProtectedCommunicationZone::expiry_time_is_present(
        bool _expiry_time_is_present)
{
    m_expiry_time_is_present = _expiry_time_is_present;
}

/*!
 * @brief This function returns the value of member expiry_time_is_present
 * @return Value of member expiry_time_is_present
 */
bool etsi_its_cam_msgs::msg::ProtectedCommunicationZone::expiry_time_is_present() const
{
    return m_expiry_time_is_present;
}

/*!
 * @brief This function returns a reference to member expiry_time_is_present
 * @return Reference to member expiry_time_is_present
 */
bool& etsi_its_cam_msgs::msg::ProtectedCommunicationZone::expiry_time_is_present()
{
    return m_expiry_time_is_present;
}

/*!
 * @brief This function copies the value in member protected_zone_latitude
 * @param _protected_zone_latitude New value to be copied in member protected_zone_latitude
 */
void etsi_its_cam_msgs::msg::ProtectedCommunicationZone::protected_zone_latitude(
        const etsi_its_cam_msgs::msg::Latitude& _protected_zone_latitude)
{
    m_protected_zone_latitude = _protected_zone_latitude;
}

/*!
 * @brief This function moves the value in member protected_zone_latitude
 * @param _protected_zone_latitude New value to be moved in member protected_zone_latitude
 */
void etsi_its_cam_msgs::msg::ProtectedCommunicationZone::protected_zone_latitude(
        etsi_its_cam_msgs::msg::Latitude&& _protected_zone_latitude)
{
    m_protected_zone_latitude = std::move(_protected_zone_latitude);
}

/*!
 * @brief This function returns a constant reference to member protected_zone_latitude
 * @return Constant reference to member protected_zone_latitude
 */
const etsi_its_cam_msgs::msg::Latitude& etsi_its_cam_msgs::msg::ProtectedCommunicationZone::protected_zone_latitude() const
{
    return m_protected_zone_latitude;
}

/*!
 * @brief This function returns a reference to member protected_zone_latitude
 * @return Reference to member protected_zone_latitude
 */
etsi_its_cam_msgs::msg::Latitude& etsi_its_cam_msgs::msg::ProtectedCommunicationZone::protected_zone_latitude()
{
    return m_protected_zone_latitude;
}
/*!
 * @brief This function copies the value in member protected_zone_longitude
 * @param _protected_zone_longitude New value to be copied in member protected_zone_longitude
 */
void etsi_its_cam_msgs::msg::ProtectedCommunicationZone::protected_zone_longitude(
        const etsi_its_cam_msgs::msg::Longitude& _protected_zone_longitude)
{
    m_protected_zone_longitude = _protected_zone_longitude;
}

/*!
 * @brief This function moves the value in member protected_zone_longitude
 * @param _protected_zone_longitude New value to be moved in member protected_zone_longitude
 */
void etsi_its_cam_msgs::msg::ProtectedCommunicationZone::protected_zone_longitude(
        etsi_its_cam_msgs::msg::Longitude&& _protected_zone_longitude)
{
    m_protected_zone_longitude = std::move(_protected_zone_longitude);
}

/*!
 * @brief This function returns a constant reference to member protected_zone_longitude
 * @return Constant reference to member protected_zone_longitude
 */
const etsi_its_cam_msgs::msg::Longitude& etsi_its_cam_msgs::msg::ProtectedCommunicationZone::protected_zone_longitude() const
{
    return m_protected_zone_longitude;
}

/*!
 * @brief This function returns a reference to member protected_zone_longitude
 * @return Reference to member protected_zone_longitude
 */
etsi_its_cam_msgs::msg::Longitude& etsi_its_cam_msgs::msg::ProtectedCommunicationZone::protected_zone_longitude()
{
    return m_protected_zone_longitude;
}
/*!
 * @brief This function copies the value in member protected_zone_radius
 * @param _protected_zone_radius New value to be copied in member protected_zone_radius
 */
void etsi_its_cam_msgs::msg::ProtectedCommunicationZone::protected_zone_radius(
        const etsi_its_cam_msgs::msg::ProtectedZoneRadius& _protected_zone_radius)
{
    m_protected_zone_radius = _protected_zone_radius;
}

/*!
 * @brief This function moves the value in member protected_zone_radius
 * @param _protected_zone_radius New value to be moved in member protected_zone_radius
 */
void etsi_its_cam_msgs::msg::ProtectedCommunicationZone::protected_zone_radius(
        etsi_its_cam_msgs::msg::ProtectedZoneRadius&& _protected_zone_radius)
{
    m_protected_zone_radius = std::move(_protected_zone_radius);
}

/*!
 * @brief This function returns a constant reference to member protected_zone_radius
 * @return Constant reference to member protected_zone_radius
 */
const etsi_its_cam_msgs::msg::ProtectedZoneRadius& etsi_its_cam_msgs::msg::ProtectedCommunicationZone::protected_zone_radius() const
{
    return m_protected_zone_radius;
}

/*!
 * @brief This function returns a reference to member protected_zone_radius
 * @return Reference to member protected_zone_radius
 */
etsi_its_cam_msgs::msg::ProtectedZoneRadius& etsi_its_cam_msgs::msg::ProtectedCommunicationZone::protected_zone_radius()
{
    return m_protected_zone_radius;
}
/*!
 * @brief This function sets a value in member protected_zone_radius_is_present
 * @param _protected_zone_radius_is_present New value for member protected_zone_radius_is_present
 */
void etsi_its_cam_msgs::msg::ProtectedCommunicationZone::protected_zone_radius_is_present(
        bool _protected_zone_radius_is_present)
{
    m_protected_zone_radius_is_present = _protected_zone_radius_is_present;
}

/*!
 * @brief This function returns the value of member protected_zone_radius_is_present
 * @return Value of member protected_zone_radius_is_present
 */
bool etsi_its_cam_msgs::msg::ProtectedCommunicationZone::protected_zone_radius_is_present() const
{
    return m_protected_zone_radius_is_present;
}

/*!
 * @brief This function returns a reference to member protected_zone_radius_is_present
 * @return Reference to member protected_zone_radius_is_present
 */
bool& etsi_its_cam_msgs::msg::ProtectedCommunicationZone::protected_zone_radius_is_present()
{
    return m_protected_zone_radius_is_present;
}

/*!
 * @brief This function copies the value in member protected_zone_id
 * @param _protected_zone_id New value to be copied in member protected_zone_id
 */
void etsi_its_cam_msgs::msg::ProtectedCommunicationZone::protected_zone_id(
        const etsi_its_cam_msgs::msg::ProtectedZoneID& _protected_zone_id)
{
    m_protected_zone_id = _protected_zone_id;
}

/*!
 * @brief This function moves the value in member protected_zone_id
 * @param _protected_zone_id New value to be moved in member protected_zone_id
 */
void etsi_its_cam_msgs::msg::ProtectedCommunicationZone::protected_zone_id(
        etsi_its_cam_msgs::msg::ProtectedZoneID&& _protected_zone_id)
{
    m_protected_zone_id = std::move(_protected_zone_id);
}

/*!
 * @brief This function returns a constant reference to member protected_zone_id
 * @return Constant reference to member protected_zone_id
 */
const etsi_its_cam_msgs::msg::ProtectedZoneID& etsi_its_cam_msgs::msg::ProtectedCommunicationZone::protected_zone_id() const
{
    return m_protected_zone_id;
}

/*!
 * @brief This function returns a reference to member protected_zone_id
 * @return Reference to member protected_zone_id
 */
etsi_its_cam_msgs::msg::ProtectedZoneID& etsi_its_cam_msgs::msg::ProtectedCommunicationZone::protected_zone_id()
{
    return m_protected_zone_id;
}
/*!
 * @brief This function sets a value in member protected_zone_id_is_present
 * @param _protected_zone_id_is_present New value for member protected_zone_id_is_present
 */
void etsi_its_cam_msgs::msg::ProtectedCommunicationZone::protected_zone_id_is_present(
        bool _protected_zone_id_is_present)
{
    m_protected_zone_id_is_present = _protected_zone_id_is_present;
}

/*!
 * @brief This function returns the value of member protected_zone_id_is_present
 * @return Value of member protected_zone_id_is_present
 */
bool etsi_its_cam_msgs::msg::ProtectedCommunicationZone::protected_zone_id_is_present() const
{
    return m_protected_zone_id_is_present;
}

/*!
 * @brief This function returns a reference to member protected_zone_id_is_present
 * @return Reference to member protected_zone_id_is_present
 */
bool& etsi_its_cam_msgs::msg::ProtectedCommunicationZone::protected_zone_id_is_present()
{
    return m_protected_zone_id_is_present;
}


size_t etsi_its_cam_msgs::msg::ProtectedCommunicationZone::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;



    return current_align;
}

bool etsi_its_cam_msgs::msg::ProtectedCommunicationZone::isKeyDefined()
{
    return false;
}

void etsi_its_cam_msgs::msg::ProtectedCommunicationZone::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
             
}


