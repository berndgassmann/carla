// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file DeltaReferencePosition.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifndef _FAST_DDS_GENERATED_ETSI_ITS_CAM_MSGS_MSG_DELTAREFERENCEPOSITION_H_
#define _FAST_DDS_GENERATED_ETSI_ITS_CAM_MSGS_MSG_DELTAREFERENCEPOSITION_H_

#include <array>
#include <bitset>
#include <cstdint>
#include <map>
#include <string>
#include <vector>

#include <fastcdr/cdr/fixed_size_string.hpp>
#include <fastcdr/xcdr/external.hpp>
#include <fastcdr/xcdr/optional.hpp>

#include "DeltaAltitude.h"
#include "DeltaLatitude.h"
#include "DeltaLongitude.h"

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec(dllexport)
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(DELTAREFERENCEPOSITION_SOURCE)
#define DELTAREFERENCEPOSITION_DllAPI __declspec(dllexport)
#else
#define DELTAREFERENCEPOSITION_DllAPI __declspec(dllimport)
#endif  // DELTAREFERENCEPOSITION_SOURCE
#else
#define DELTAREFERENCEPOSITION_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define DELTAREFERENCEPOSITION_DllAPI
#endif  // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
class CdrSizeCalculator;
}  // namespace fastcdr
}  // namespace eprosima

namespace etsi_its_cam_msgs {

namespace msg {

/*!
 * @brief This class represents the structure DeltaReferencePosition defined by the user in the IDL file.
 * @ingroup DeltaReferencePosition
 */
class DeltaReferencePosition {
public:
  /*!
   * @brief Default constructor.
   */
  eProsima_user_DllExport DeltaReferencePosition();

  /*!
   * @brief Default destructor.
   */
  eProsima_user_DllExport ~DeltaReferencePosition();

  /*!
   * @brief Copy constructor.
   * @param x Reference to the object etsi_its_cam_msgs::msg::DeltaReferencePosition that will be copied.
   */
  eProsima_user_DllExport DeltaReferencePosition(const DeltaReferencePosition& x);

  /*!
   * @brief Move constructor.
   * @param x Reference to the object etsi_its_cam_msgs::msg::DeltaReferencePosition that will be copied.
   */
  eProsima_user_DllExport DeltaReferencePosition(DeltaReferencePosition&& x) noexcept;

  /*!
   * @brief Copy assignment.
   * @param x Reference to the object etsi_its_cam_msgs::msg::DeltaReferencePosition that will be copied.
   */
  eProsima_user_DllExport DeltaReferencePosition& operator=(const DeltaReferencePosition& x);

  /*!
   * @brief Move assignment.
   * @param x Reference to the object etsi_its_cam_msgs::msg::DeltaReferencePosition that will be copied.
   */
  eProsima_user_DllExport DeltaReferencePosition& operator=(DeltaReferencePosition&& x) noexcept;

  /*!
   * @brief Comparison operator.
   * @param x etsi_its_cam_msgs::msg::DeltaReferencePosition object to compare.
   */
  eProsima_user_DllExport bool operator==(const DeltaReferencePosition& x) const;

  /*!
   * @brief Comparison operator.
   * @param x etsi_its_cam_msgs::msg::DeltaReferencePosition object to compare.
   */
  eProsima_user_DllExport bool operator!=(const DeltaReferencePosition& x) const;

  /*!
   * @brief This function copies the value in member delta_latitude
   * @param _delta_latitude New value to be copied in member delta_latitude
   */
  eProsima_user_DllExport void delta_latitude(const etsi_its_cam_msgs::msg::DeltaLatitude& _delta_latitude);

  /*!
   * @brief This function moves the value in member delta_latitude
   * @param _delta_latitude New value to be moved in member delta_latitude
   */
  eProsima_user_DllExport void delta_latitude(etsi_its_cam_msgs::msg::DeltaLatitude&& _delta_latitude);

  /*!
   * @brief This function returns a constant reference to member delta_latitude
   * @return Constant reference to member delta_latitude
   */
  eProsima_user_DllExport const etsi_its_cam_msgs::msg::DeltaLatitude& delta_latitude() const;

  /*!
   * @brief This function returns a reference to member delta_latitude
   * @return Reference to member delta_latitude
   */
  eProsima_user_DllExport etsi_its_cam_msgs::msg::DeltaLatitude& delta_latitude();

  /*!
   * @brief This function copies the value in member delta_longitude
   * @param _delta_longitude New value to be copied in member delta_longitude
   */
  eProsima_user_DllExport void delta_longitude(const etsi_its_cam_msgs::msg::DeltaLongitude& _delta_longitude);

  /*!
   * @brief This function moves the value in member delta_longitude
   * @param _delta_longitude New value to be moved in member delta_longitude
   */
  eProsima_user_DllExport void delta_longitude(etsi_its_cam_msgs::msg::DeltaLongitude&& _delta_longitude);

  /*!
   * @brief This function returns a constant reference to member delta_longitude
   * @return Constant reference to member delta_longitude
   */
  eProsima_user_DllExport const etsi_its_cam_msgs::msg::DeltaLongitude& delta_longitude() const;

  /*!
   * @brief This function returns a reference to member delta_longitude
   * @return Reference to member delta_longitude
   */
  eProsima_user_DllExport etsi_its_cam_msgs::msg::DeltaLongitude& delta_longitude();

  /*!
   * @brief This function copies the value in member delta_altitude
   * @param _delta_altitude New value to be copied in member delta_altitude
   */
  eProsima_user_DllExport void delta_altitude(const etsi_its_cam_msgs::msg::DeltaAltitude& _delta_altitude);

  /*!
   * @brief This function moves the value in member delta_altitude
   * @param _delta_altitude New value to be moved in member delta_altitude
   */
  eProsima_user_DllExport void delta_altitude(etsi_its_cam_msgs::msg::DeltaAltitude&& _delta_altitude);

  /*!
   * @brief This function returns a constant reference to member delta_altitude
   * @return Constant reference to member delta_altitude
   */
  eProsima_user_DllExport const etsi_its_cam_msgs::msg::DeltaAltitude& delta_altitude() const;

  /*!
   * @brief This function returns a reference to member delta_altitude
   * @return Reference to member delta_altitude
   */
  eProsima_user_DllExport etsi_its_cam_msgs::msg::DeltaAltitude& delta_altitude();

private:
  etsi_its_cam_msgs::msg::DeltaLatitude m_delta_latitude;
  etsi_its_cam_msgs::msg::DeltaLongitude m_delta_longitude;
  etsi_its_cam_msgs::msg::DeltaAltitude m_delta_altitude;
};

}  // namespace msg

}  // namespace etsi_its_cam_msgs

#endif  // _FAST_DDS_GENERATED_ETSI_ITS_CAM_MSGS_MSG_DELTAREFERENCEPOSITION_H_
