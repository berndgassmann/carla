// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file DrivingLaneStatus.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifndef _FAST_DDS_GENERATED_ETSI_ITS_CAM_MSGS_MSG_DRIVINGLANESTATUS_H_
#define _FAST_DDS_GENERATED_ETSI_ITS_CAM_MSGS_MSG_DRIVINGLANESTATUS_H_

#include <array>
#include <bitset>
#include <cstdint>
#include <map>
#include <string>
#include <vector>

#include <fastcdr/cdr/fixed_size_string.hpp>
#include <fastcdr/xcdr/external.hpp>
#include <fastcdr/xcdr/optional.hpp>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec(dllexport)
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(DRIVINGLANESTATUS_SOURCE)
#define DRIVINGLANESTATUS_DllAPI __declspec(dllexport)
#else
#define DRIVINGLANESTATUS_DllAPI __declspec(dllimport)
#endif  // DRIVINGLANESTATUS_SOURCE
#else
#define DRIVINGLANESTATUS_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define DRIVINGLANESTATUS_DllAPI
#endif  // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
class CdrSizeCalculator;
}  // namespace fastcdr
}  // namespace eprosima

namespace etsi_its_cam_msgs {

namespace msg {

namespace DrivingLaneStatus_Constants {

const uint8_t MIN_SIZE_BITS = 1;
const uint8_t MAX_SIZE_BITS = 13;

}  // namespace DrivingLaneStatus_Constants

/*!
 * @brief This class represents the structure DrivingLaneStatus defined by the user in the IDL file.
 * @ingroup DrivingLaneStatus
 */
class DrivingLaneStatus {
public:
  /*!
   * @brief Default constructor.
   */
  eProsima_user_DllExport DrivingLaneStatus();

  /*!
   * @brief Default destructor.
   */
  eProsima_user_DllExport ~DrivingLaneStatus();

  /*!
   * @brief Copy constructor.
   * @param x Reference to the object etsi_its_cam_msgs::msg::DrivingLaneStatus that will be copied.
   */
  eProsima_user_DllExport DrivingLaneStatus(const DrivingLaneStatus& x);

  /*!
   * @brief Move constructor.
   * @param x Reference to the object etsi_its_cam_msgs::msg::DrivingLaneStatus that will be copied.
   */
  eProsima_user_DllExport DrivingLaneStatus(DrivingLaneStatus&& x) noexcept;

  /*!
   * @brief Copy assignment.
   * @param x Reference to the object etsi_its_cam_msgs::msg::DrivingLaneStatus that will be copied.
   */
  eProsima_user_DllExport DrivingLaneStatus& operator=(const DrivingLaneStatus& x);

  /*!
   * @brief Move assignment.
   * @param x Reference to the object etsi_its_cam_msgs::msg::DrivingLaneStatus that will be copied.
   */
  eProsima_user_DllExport DrivingLaneStatus& operator=(DrivingLaneStatus&& x) noexcept;

  /*!
   * @brief Comparison operator.
   * @param x etsi_its_cam_msgs::msg::DrivingLaneStatus object to compare.
   */
  eProsima_user_DllExport bool operator==(const DrivingLaneStatus& x) const;

  /*!
   * @brief Comparison operator.
   * @param x etsi_its_cam_msgs::msg::DrivingLaneStatus object to compare.
   */
  eProsima_user_DllExport bool operator!=(const DrivingLaneStatus& x) const;

  /*!
   * @brief This function copies the value in member value
   * @param _value New value to be copied in member value
   */
  eProsima_user_DllExport void value(const std::vector<uint8_t>& _value);

  /*!
   * @brief This function moves the value in member value
   * @param _value New value to be moved in member value
   */
  eProsima_user_DllExport void value(std::vector<uint8_t>&& _value);

  /*!
   * @brief This function returns a constant reference to member value
   * @return Constant reference to member value
   */
  eProsima_user_DllExport const std::vector<uint8_t>& value() const;

  /*!
   * @brief This function returns a reference to member value
   * @return Reference to member value
   */
  eProsima_user_DllExport std::vector<uint8_t>& value();

  /*!
   * @brief This function sets a value in member bits_unused
   * @param _bits_unused New value for member bits_unused
   */
  eProsima_user_DllExport void bits_unused(uint8_t _bits_unused);

  /*!
   * @brief This function returns the value of member bits_unused
   * @return Value of member bits_unused
   */
  eProsima_user_DllExport uint8_t bits_unused() const;

  /*!
   * @brief This function returns a reference to member bits_unused
   * @return Reference to member bits_unused
   */
  eProsima_user_DllExport uint8_t& bits_unused();

private:
  std::vector<uint8_t> m_value;
  uint8_t m_bits_unused{0};
};

}  // namespace msg

}  // namespace etsi_its_cam_msgs

#endif  // _FAST_DDS_GENERATED_ETSI_ITS_CAM_MSGS_MSG_DRIVINGLANESTATUS_H_
