// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file SafetyCarContainer.cpp
 * This source file contains the implementation of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "SafetyCarContainer.h"

#include <fastcdr/Cdr.h>


#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>


namespace etsi_its_cam_msgs {

namespace msg {



SafetyCarContainer::SafetyCarContainer()
{
}

SafetyCarContainer::~SafetyCarContainer()
{
}

SafetyCarContainer::SafetyCarContainer(
        const SafetyCarContainer& x)
{
    m_light_bar_siren_in_use = x.m_light_bar_siren_in_use;
    m_incident_indication = x.m_incident_indication;
    m_incident_indication_is_present = x.m_incident_indication_is_present;
    m_traffic_rule = x.m_traffic_rule;
    m_traffic_rule_is_present = x.m_traffic_rule_is_present;
    m_speed_limit = x.m_speed_limit;
    m_speed_limit_is_present = x.m_speed_limit_is_present;
}

SafetyCarContainer::SafetyCarContainer(
        SafetyCarContainer&& x) noexcept
{
    m_light_bar_siren_in_use = std::move(x.m_light_bar_siren_in_use);
    m_incident_indication = std::move(x.m_incident_indication);
    m_incident_indication_is_present = x.m_incident_indication_is_present;
    m_traffic_rule = std::move(x.m_traffic_rule);
    m_traffic_rule_is_present = x.m_traffic_rule_is_present;
    m_speed_limit = std::move(x.m_speed_limit);
    m_speed_limit_is_present = x.m_speed_limit_is_present;
}

SafetyCarContainer& SafetyCarContainer::operator =(
        const SafetyCarContainer& x)
{

    m_light_bar_siren_in_use = x.m_light_bar_siren_in_use;
    m_incident_indication = x.m_incident_indication;
    m_incident_indication_is_present = x.m_incident_indication_is_present;
    m_traffic_rule = x.m_traffic_rule;
    m_traffic_rule_is_present = x.m_traffic_rule_is_present;
    m_speed_limit = x.m_speed_limit;
    m_speed_limit_is_present = x.m_speed_limit_is_present;
    return *this;
}

SafetyCarContainer& SafetyCarContainer::operator =(
        SafetyCarContainer&& x) noexcept
{

    m_light_bar_siren_in_use = std::move(x.m_light_bar_siren_in_use);
    m_incident_indication = std::move(x.m_incident_indication);
    m_incident_indication_is_present = x.m_incident_indication_is_present;
    m_traffic_rule = std::move(x.m_traffic_rule);
    m_traffic_rule_is_present = x.m_traffic_rule_is_present;
    m_speed_limit = std::move(x.m_speed_limit);
    m_speed_limit_is_present = x.m_speed_limit_is_present;
    return *this;
}

bool SafetyCarContainer::operator ==(
        const SafetyCarContainer& x) const
{
    return (m_light_bar_siren_in_use == x.m_light_bar_siren_in_use &&
           m_incident_indication == x.m_incident_indication &&
           m_incident_indication_is_present == x.m_incident_indication_is_present &&
           m_traffic_rule == x.m_traffic_rule &&
           m_traffic_rule_is_present == x.m_traffic_rule_is_present &&
           m_speed_limit == x.m_speed_limit &&
           m_speed_limit_is_present == x.m_speed_limit_is_present);
}

bool SafetyCarContainer::operator !=(
        const SafetyCarContainer& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member light_bar_siren_in_use
 * @param _light_bar_siren_in_use New value to be copied in member light_bar_siren_in_use
 */
void SafetyCarContainer::light_bar_siren_in_use(
        const etsi_its_cam_msgs::msg::LightBarSirenInUse& _light_bar_siren_in_use)
{
    m_light_bar_siren_in_use = _light_bar_siren_in_use;
}

/*!
 * @brief This function moves the value in member light_bar_siren_in_use
 * @param _light_bar_siren_in_use New value to be moved in member light_bar_siren_in_use
 */
void SafetyCarContainer::light_bar_siren_in_use(
        etsi_its_cam_msgs::msg::LightBarSirenInUse&& _light_bar_siren_in_use)
{
    m_light_bar_siren_in_use = std::move(_light_bar_siren_in_use);
}

/*!
 * @brief This function returns a constant reference to member light_bar_siren_in_use
 * @return Constant reference to member light_bar_siren_in_use
 */
const etsi_its_cam_msgs::msg::LightBarSirenInUse& SafetyCarContainer::light_bar_siren_in_use() const
{
    return m_light_bar_siren_in_use;
}

/*!
 * @brief This function returns a reference to member light_bar_siren_in_use
 * @return Reference to member light_bar_siren_in_use
 */
etsi_its_cam_msgs::msg::LightBarSirenInUse& SafetyCarContainer::light_bar_siren_in_use()
{
    return m_light_bar_siren_in_use;
}


/*!
 * @brief This function copies the value in member incident_indication
 * @param _incident_indication New value to be copied in member incident_indication
 */
void SafetyCarContainer::incident_indication(
        const etsi_its_cam_msgs::msg::CauseCode& _incident_indication)
{
    m_incident_indication = _incident_indication;
}

/*!
 * @brief This function moves the value in member incident_indication
 * @param _incident_indication New value to be moved in member incident_indication
 */
void SafetyCarContainer::incident_indication(
        etsi_its_cam_msgs::msg::CauseCode&& _incident_indication)
{
    m_incident_indication = std::move(_incident_indication);
}

/*!
 * @brief This function returns a constant reference to member incident_indication
 * @return Constant reference to member incident_indication
 */
const etsi_its_cam_msgs::msg::CauseCode& SafetyCarContainer::incident_indication() const
{
    return m_incident_indication;
}

/*!
 * @brief This function returns a reference to member incident_indication
 * @return Reference to member incident_indication
 */
etsi_its_cam_msgs::msg::CauseCode& SafetyCarContainer::incident_indication()
{
    return m_incident_indication;
}


/*!
 * @brief This function sets a value in member incident_indication_is_present
 * @param _incident_indication_is_present New value for member incident_indication_is_present
 */
void SafetyCarContainer::incident_indication_is_present(
        bool _incident_indication_is_present)
{
    m_incident_indication_is_present = _incident_indication_is_present;
}

/*!
 * @brief This function returns the value of member incident_indication_is_present
 * @return Value of member incident_indication_is_present
 */
bool SafetyCarContainer::incident_indication_is_present() const
{
    return m_incident_indication_is_present;
}

/*!
 * @brief This function returns a reference to member incident_indication_is_present
 * @return Reference to member incident_indication_is_present
 */
bool& SafetyCarContainer::incident_indication_is_present()
{
    return m_incident_indication_is_present;
}


/*!
 * @brief This function copies the value in member traffic_rule
 * @param _traffic_rule New value to be copied in member traffic_rule
 */
void SafetyCarContainer::traffic_rule(
        const etsi_its_cam_msgs::msg::TrafficRule& _traffic_rule)
{
    m_traffic_rule = _traffic_rule;
}

/*!
 * @brief This function moves the value in member traffic_rule
 * @param _traffic_rule New value to be moved in member traffic_rule
 */
void SafetyCarContainer::traffic_rule(
        etsi_its_cam_msgs::msg::TrafficRule&& _traffic_rule)
{
    m_traffic_rule = std::move(_traffic_rule);
}

/*!
 * @brief This function returns a constant reference to member traffic_rule
 * @return Constant reference to member traffic_rule
 */
const etsi_its_cam_msgs::msg::TrafficRule& SafetyCarContainer::traffic_rule() const
{
    return m_traffic_rule;
}

/*!
 * @brief This function returns a reference to member traffic_rule
 * @return Reference to member traffic_rule
 */
etsi_its_cam_msgs::msg::TrafficRule& SafetyCarContainer::traffic_rule()
{
    return m_traffic_rule;
}


/*!
 * @brief This function sets a value in member traffic_rule_is_present
 * @param _traffic_rule_is_present New value for member traffic_rule_is_present
 */
void SafetyCarContainer::traffic_rule_is_present(
        bool _traffic_rule_is_present)
{
    m_traffic_rule_is_present = _traffic_rule_is_present;
}

/*!
 * @brief This function returns the value of member traffic_rule_is_present
 * @return Value of member traffic_rule_is_present
 */
bool SafetyCarContainer::traffic_rule_is_present() const
{
    return m_traffic_rule_is_present;
}

/*!
 * @brief This function returns a reference to member traffic_rule_is_present
 * @return Reference to member traffic_rule_is_present
 */
bool& SafetyCarContainer::traffic_rule_is_present()
{
    return m_traffic_rule_is_present;
}


/*!
 * @brief This function copies the value in member speed_limit
 * @param _speed_limit New value to be copied in member speed_limit
 */
void SafetyCarContainer::speed_limit(
        const etsi_its_cam_msgs::msg::SpeedLimit& _speed_limit)
{
    m_speed_limit = _speed_limit;
}

/*!
 * @brief This function moves the value in member speed_limit
 * @param _speed_limit New value to be moved in member speed_limit
 */
void SafetyCarContainer::speed_limit(
        etsi_its_cam_msgs::msg::SpeedLimit&& _speed_limit)
{
    m_speed_limit = std::move(_speed_limit);
}

/*!
 * @brief This function returns a constant reference to member speed_limit
 * @return Constant reference to member speed_limit
 */
const etsi_its_cam_msgs::msg::SpeedLimit& SafetyCarContainer::speed_limit() const
{
    return m_speed_limit;
}

/*!
 * @brief This function returns a reference to member speed_limit
 * @return Reference to member speed_limit
 */
etsi_its_cam_msgs::msg::SpeedLimit& SafetyCarContainer::speed_limit()
{
    return m_speed_limit;
}


/*!
 * @brief This function sets a value in member speed_limit_is_present
 * @param _speed_limit_is_present New value for member speed_limit_is_present
 */
void SafetyCarContainer::speed_limit_is_present(
        bool _speed_limit_is_present)
{
    m_speed_limit_is_present = _speed_limit_is_present;
}

/*!
 * @brief This function returns the value of member speed_limit_is_present
 * @return Value of member speed_limit_is_present
 */
bool SafetyCarContainer::speed_limit_is_present() const
{
    return m_speed_limit_is_present;
}

/*!
 * @brief This function returns a reference to member speed_limit_is_present
 * @return Reference to member speed_limit_is_present
 */
bool& SafetyCarContainer::speed_limit_is_present()
{
    return m_speed_limit_is_present;
}




} // namespace msg


} // namespace etsi_its_cam_msgs
// Include auxiliary functions like for serializing/deserializing.
#include "SafetyCarContainerCdrAux.ipp"

