// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file SafetyCarContainer.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "SafetyCarContainer.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

etsi_its_cam_msgs::msg::SafetyCarContainer::SafetyCarContainer()
{
    // m_light_bar_siren_in_use com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@5b58ed3c

    // m_incident_indication com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@24faea88

    // m_incident_indication_is_present com.eprosima.idl.parser.typecode.PrimitiveTypeCode@3a320ade
    m_incident_indication_is_present = false;
    // m_traffic_rule com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@64beebb7

    // m_traffic_rule_is_present com.eprosima.idl.parser.typecode.PrimitiveTypeCode@7813cb11
    m_traffic_rule_is_present = false;
    // m_speed_limit com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@bcec031

    // m_speed_limit_is_present com.eprosima.idl.parser.typecode.PrimitiveTypeCode@21005f6c
    m_speed_limit_is_present = false;

}

etsi_its_cam_msgs::msg::SafetyCarContainer::~SafetyCarContainer()
{






}

etsi_its_cam_msgs::msg::SafetyCarContainer::SafetyCarContainer(
        const SafetyCarContainer& x)
{
    m_light_bar_siren_in_use = x.m_light_bar_siren_in_use;
    m_incident_indication = x.m_incident_indication;
    m_incident_indication_is_present = x.m_incident_indication_is_present;
    m_traffic_rule = x.m_traffic_rule;
    m_traffic_rule_is_present = x.m_traffic_rule_is_present;
    m_speed_limit = x.m_speed_limit;
    m_speed_limit_is_present = x.m_speed_limit_is_present;
}

etsi_its_cam_msgs::msg::SafetyCarContainer::SafetyCarContainer(
        SafetyCarContainer&& x)
{
    m_light_bar_siren_in_use = std::move(x.m_light_bar_siren_in_use);
    m_incident_indication = std::move(x.m_incident_indication);
    m_incident_indication_is_present = x.m_incident_indication_is_present;
    m_traffic_rule = std::move(x.m_traffic_rule);
    m_traffic_rule_is_present = x.m_traffic_rule_is_present;
    m_speed_limit = std::move(x.m_speed_limit);
    m_speed_limit_is_present = x.m_speed_limit_is_present;
}

etsi_its_cam_msgs::msg::SafetyCarContainer& etsi_its_cam_msgs::msg::SafetyCarContainer::operator =(
        const SafetyCarContainer& x)
{

    m_light_bar_siren_in_use = x.m_light_bar_siren_in_use;
    m_incident_indication = x.m_incident_indication;
    m_incident_indication_is_present = x.m_incident_indication_is_present;
    m_traffic_rule = x.m_traffic_rule;
    m_traffic_rule_is_present = x.m_traffic_rule_is_present;
    m_speed_limit = x.m_speed_limit;
    m_speed_limit_is_present = x.m_speed_limit_is_present;

    return *this;
}

etsi_its_cam_msgs::msg::SafetyCarContainer& etsi_its_cam_msgs::msg::SafetyCarContainer::operator =(
        SafetyCarContainer&& x)
{

    m_light_bar_siren_in_use = std::move(x.m_light_bar_siren_in_use);
    m_incident_indication = std::move(x.m_incident_indication);
    m_incident_indication_is_present = x.m_incident_indication_is_present;
    m_traffic_rule = std::move(x.m_traffic_rule);
    m_traffic_rule_is_present = x.m_traffic_rule_is_present;
    m_speed_limit = std::move(x.m_speed_limit);
    m_speed_limit_is_present = x.m_speed_limit_is_present;

    return *this;
}

bool etsi_its_cam_msgs::msg::SafetyCarContainer::operator ==(
        const SafetyCarContainer& x) const
{

    return (m_light_bar_siren_in_use == x.m_light_bar_siren_in_use && m_incident_indication == x.m_incident_indication && m_incident_indication_is_present == x.m_incident_indication_is_present && m_traffic_rule == x.m_traffic_rule && m_traffic_rule_is_present == x.m_traffic_rule_is_present && m_speed_limit == x.m_speed_limit && m_speed_limit_is_present == x.m_speed_limit_is_present);
}

bool etsi_its_cam_msgs::msg::SafetyCarContainer::operator !=(
        const SafetyCarContainer& x) const
{
    return !(*this == x);
}

size_t etsi_its_cam_msgs::msg::SafetyCarContainer::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += etsi_its_cam_msgs::msg::LightBarSirenInUse::getMaxCdrSerializedSize(current_alignment);
    current_alignment += etsi_its_cam_msgs::msg::CauseCode::getMaxCdrSerializedSize(current_alignment);
    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += etsi_its_cam_msgs::msg::TrafficRule::getMaxCdrSerializedSize(current_alignment);
    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += etsi_its_cam_msgs::msg::SpeedLimit::getMaxCdrSerializedSize(current_alignment);
    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}

size_t etsi_its_cam_msgs::msg::SafetyCarContainer::getCdrSerializedSize(
        const etsi_its_cam_msgs::msg::SafetyCarContainer& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += etsi_its_cam_msgs::msg::LightBarSirenInUse::getCdrSerializedSize(data.light_bar_siren_in_use(), current_alignment);
    current_alignment += etsi_its_cam_msgs::msg::CauseCode::getCdrSerializedSize(data.incident_indication(), current_alignment);
    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += etsi_its_cam_msgs::msg::TrafficRule::getCdrSerializedSize(data.traffic_rule(), current_alignment);
    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += etsi_its_cam_msgs::msg::SpeedLimit::getCdrSerializedSize(data.speed_limit(), current_alignment);
    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}

void etsi_its_cam_msgs::msg::SafetyCarContainer::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_light_bar_siren_in_use;
    scdr << m_incident_indication;
    scdr << m_incident_indication_is_present;
    scdr << m_traffic_rule;
    scdr << m_traffic_rule_is_present;
    scdr << m_speed_limit;
    scdr << m_speed_limit_is_present;

}

void etsi_its_cam_msgs::msg::SafetyCarContainer::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_light_bar_siren_in_use;
    dcdr >> m_incident_indication;
    dcdr >> m_incident_indication_is_present;
    dcdr >> m_traffic_rule;
    dcdr >> m_traffic_rule_is_present;
    dcdr >> m_speed_limit;
    dcdr >> m_speed_limit_is_present;
}

/*!
 * @brief This function copies the value in member light_bar_siren_in_use
 * @param _light_bar_siren_in_use New value to be copied in member light_bar_siren_in_use
 */
void etsi_its_cam_msgs::msg::SafetyCarContainer::light_bar_siren_in_use(
        const etsi_its_cam_msgs::msg::LightBarSirenInUse& _light_bar_siren_in_use)
{
    m_light_bar_siren_in_use = _light_bar_siren_in_use;
}

/*!
 * @brief This function moves the value in member light_bar_siren_in_use
 * @param _light_bar_siren_in_use New value to be moved in member light_bar_siren_in_use
 */
void etsi_its_cam_msgs::msg::SafetyCarContainer::light_bar_siren_in_use(
        etsi_its_cam_msgs::msg::LightBarSirenInUse&& _light_bar_siren_in_use)
{
    m_light_bar_siren_in_use = std::move(_light_bar_siren_in_use);
}

/*!
 * @brief This function returns a constant reference to member light_bar_siren_in_use
 * @return Constant reference to member light_bar_siren_in_use
 */
const etsi_its_cam_msgs::msg::LightBarSirenInUse& etsi_its_cam_msgs::msg::SafetyCarContainer::light_bar_siren_in_use() const
{
    return m_light_bar_siren_in_use;
}

/*!
 * @brief This function returns a reference to member light_bar_siren_in_use
 * @return Reference to member light_bar_siren_in_use
 */
etsi_its_cam_msgs::msg::LightBarSirenInUse& etsi_its_cam_msgs::msg::SafetyCarContainer::light_bar_siren_in_use()
{
    return m_light_bar_siren_in_use;
}
/*!
 * @brief This function copies the value in member incident_indication
 * @param _incident_indication New value to be copied in member incident_indication
 */
void etsi_its_cam_msgs::msg::SafetyCarContainer::incident_indication(
        const etsi_its_cam_msgs::msg::CauseCode& _incident_indication)
{
    m_incident_indication = _incident_indication;
}

/*!
 * @brief This function moves the value in member incident_indication
 * @param _incident_indication New value to be moved in member incident_indication
 */
void etsi_its_cam_msgs::msg::SafetyCarContainer::incident_indication(
        etsi_its_cam_msgs::msg::CauseCode&& _incident_indication)
{
    m_incident_indication = std::move(_incident_indication);
}

/*!
 * @brief This function returns a constant reference to member incident_indication
 * @return Constant reference to member incident_indication
 */
const etsi_its_cam_msgs::msg::CauseCode& etsi_its_cam_msgs::msg::SafetyCarContainer::incident_indication() const
{
    return m_incident_indication;
}

/*!
 * @brief This function returns a reference to member incident_indication
 * @return Reference to member incident_indication
 */
etsi_its_cam_msgs::msg::CauseCode& etsi_its_cam_msgs::msg::SafetyCarContainer::incident_indication()
{
    return m_incident_indication;
}
/*!
 * @brief This function sets a value in member incident_indication_is_present
 * @param _incident_indication_is_present New value for member incident_indication_is_present
 */
void etsi_its_cam_msgs::msg::SafetyCarContainer::incident_indication_is_present(
        bool _incident_indication_is_present)
{
    m_incident_indication_is_present = _incident_indication_is_present;
}

/*!
 * @brief This function returns the value of member incident_indication_is_present
 * @return Value of member incident_indication_is_present
 */
bool etsi_its_cam_msgs::msg::SafetyCarContainer::incident_indication_is_present() const
{
    return m_incident_indication_is_present;
}

/*!
 * @brief This function returns a reference to member incident_indication_is_present
 * @return Reference to member incident_indication_is_present
 */
bool& etsi_its_cam_msgs::msg::SafetyCarContainer::incident_indication_is_present()
{
    return m_incident_indication_is_present;
}

/*!
 * @brief This function copies the value in member traffic_rule
 * @param _traffic_rule New value to be copied in member traffic_rule
 */
void etsi_its_cam_msgs::msg::SafetyCarContainer::traffic_rule(
        const etsi_its_cam_msgs::msg::TrafficRule& _traffic_rule)
{
    m_traffic_rule = _traffic_rule;
}

/*!
 * @brief This function moves the value in member traffic_rule
 * @param _traffic_rule New value to be moved in member traffic_rule
 */
void etsi_its_cam_msgs::msg::SafetyCarContainer::traffic_rule(
        etsi_its_cam_msgs::msg::TrafficRule&& _traffic_rule)
{
    m_traffic_rule = std::move(_traffic_rule);
}

/*!
 * @brief This function returns a constant reference to member traffic_rule
 * @return Constant reference to member traffic_rule
 */
const etsi_its_cam_msgs::msg::TrafficRule& etsi_its_cam_msgs::msg::SafetyCarContainer::traffic_rule() const
{
    return m_traffic_rule;
}

/*!
 * @brief This function returns a reference to member traffic_rule
 * @return Reference to member traffic_rule
 */
etsi_its_cam_msgs::msg::TrafficRule& etsi_its_cam_msgs::msg::SafetyCarContainer::traffic_rule()
{
    return m_traffic_rule;
}
/*!
 * @brief This function sets a value in member traffic_rule_is_present
 * @param _traffic_rule_is_present New value for member traffic_rule_is_present
 */
void etsi_its_cam_msgs::msg::SafetyCarContainer::traffic_rule_is_present(
        bool _traffic_rule_is_present)
{
    m_traffic_rule_is_present = _traffic_rule_is_present;
}

/*!
 * @brief This function returns the value of member traffic_rule_is_present
 * @return Value of member traffic_rule_is_present
 */
bool etsi_its_cam_msgs::msg::SafetyCarContainer::traffic_rule_is_present() const
{
    return m_traffic_rule_is_present;
}

/*!
 * @brief This function returns a reference to member traffic_rule_is_present
 * @return Reference to member traffic_rule_is_present
 */
bool& etsi_its_cam_msgs::msg::SafetyCarContainer::traffic_rule_is_present()
{
    return m_traffic_rule_is_present;
}

/*!
 * @brief This function copies the value in member speed_limit
 * @param _speed_limit New value to be copied in member speed_limit
 */
void etsi_its_cam_msgs::msg::SafetyCarContainer::speed_limit(
        const etsi_its_cam_msgs::msg::SpeedLimit& _speed_limit)
{
    m_speed_limit = _speed_limit;
}

/*!
 * @brief This function moves the value in member speed_limit
 * @param _speed_limit New value to be moved in member speed_limit
 */
void etsi_its_cam_msgs::msg::SafetyCarContainer::speed_limit(
        etsi_its_cam_msgs::msg::SpeedLimit&& _speed_limit)
{
    m_speed_limit = std::move(_speed_limit);
}

/*!
 * @brief This function returns a constant reference to member speed_limit
 * @return Constant reference to member speed_limit
 */
const etsi_its_cam_msgs::msg::SpeedLimit& etsi_its_cam_msgs::msg::SafetyCarContainer::speed_limit() const
{
    return m_speed_limit;
}

/*!
 * @brief This function returns a reference to member speed_limit
 * @return Reference to member speed_limit
 */
etsi_its_cam_msgs::msg::SpeedLimit& etsi_its_cam_msgs::msg::SafetyCarContainer::speed_limit()
{
    return m_speed_limit;
}
/*!
 * @brief This function sets a value in member speed_limit_is_present
 * @param _speed_limit_is_present New value for member speed_limit_is_present
 */
void etsi_its_cam_msgs::msg::SafetyCarContainer::speed_limit_is_present(
        bool _speed_limit_is_present)
{
    m_speed_limit_is_present = _speed_limit_is_present;
}

/*!
 * @brief This function returns the value of member speed_limit_is_present
 * @return Value of member speed_limit_is_present
 */
bool etsi_its_cam_msgs::msg::SafetyCarContainer::speed_limit_is_present() const
{
    return m_speed_limit_is_present;
}

/*!
 * @brief This function returns a reference to member speed_limit_is_present
 * @return Reference to member speed_limit_is_present
 */
bool& etsi_its_cam_msgs::msg::SafetyCarContainer::speed_limit_is_present()
{
    return m_speed_limit_is_present;
}


size_t etsi_its_cam_msgs::msg::SafetyCarContainer::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;



    return current_align;
}

bool etsi_its_cam_msgs::msg::SafetyCarContainer::isKeyDefined()
{
    return false;
}

void etsi_its_cam_msgs::msg::SafetyCarContainer::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
           
}


