// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file ExteriorLights.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _FAST_DDS_GENERATED_ETSI_ITS_CAM_MSGS_MSG_EXTERIORLIGHTS_H_
#define _FAST_DDS_GENERATED_ETSI_ITS_CAM_MSGS_MSG_EXTERIORLIGHTS_H_


#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(ExteriorLights_SOURCE)
#define ExteriorLights_DllAPI __declspec( dllexport )
#else
#define ExteriorLights_DllAPI __declspec( dllimport )
#endif // ExteriorLights_SOURCE
#else
#define ExteriorLights_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define ExteriorLights_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
} // namespace fastcdr
} // namespace eprosima


namespace etsi_its_cam_msgs {
    namespace msg {
        namespace ExteriorLights_Constants {
            const uint8_t SIZE_BITS = 8;
            const uint8_t BIT_INDEX_LOW_BEAM_HEADLIGHTS_ON = 0;
            const uint8_t BIT_INDEX_HIGH_BEAM_HEADLIGHTS_ON = 1;
            const uint8_t BIT_INDEX_LEFT_TURN_SIGNAL_ON = 2;
            const uint8_t BIT_INDEX_RIGHT_TURN_SIGNAL_ON = 3;
            const uint8_t BIT_INDEX_DAYTIME_RUNNING_LIGHTS_ON = 4;
            const uint8_t BIT_INDEX_REVERSE_LIGHT_ON = 5;
            const uint8_t BIT_INDEX_FOG_LIGHT_ON = 6;
            const uint8_t BIT_INDEX_PARKING_LIGHTS_ON = 7;
        } // namespace ExteriorLights_Constants
        /*!
         * @brief This class represents the structure ExteriorLights defined by the user in the IDL file.
         * @ingroup EXTERIORLIGHTS
         */
        class ExteriorLights
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport ExteriorLights();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~ExteriorLights();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object etsi_its_cam_msgs::msg::ExteriorLights that will be copied.
             */
            eProsima_user_DllExport ExteriorLights(
                    const ExteriorLights& x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object etsi_its_cam_msgs::msg::ExteriorLights that will be copied.
             */
            eProsima_user_DllExport ExteriorLights(
                    ExteriorLights&& x);

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object etsi_its_cam_msgs::msg::ExteriorLights that will be copied.
             */
            eProsima_user_DllExport ExteriorLights& operator =(
                    const ExteriorLights& x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object etsi_its_cam_msgs::msg::ExteriorLights that will be copied.
             */
            eProsima_user_DllExport ExteriorLights& operator =(
                    ExteriorLights&& x);

            /*!
             * @brief Comparison operator.
             * @param x etsi_its_cam_msgs::msg::ExteriorLights object to compare.
             */
            eProsima_user_DllExport bool operator ==(
                    const ExteriorLights& x) const;

            /*!
             * @brief Comparison operator.
             * @param x etsi_its_cam_msgs::msg::ExteriorLights object to compare.
             */
            eProsima_user_DllExport bool operator !=(
                    const ExteriorLights& x) const;

            /*!
             * @brief This function copies the value in member value
             * @param _value New value to be copied in member value
             */
            eProsima_user_DllExport void value(
                    const std::vector<uint8_t>& _value);

            /*!
             * @brief This function moves the value in member value
             * @param _value New value to be moved in member value
             */
            eProsima_user_DllExport void value(
                    std::vector<uint8_t>&& _value);

            /*!
             * @brief This function returns a constant reference to member value
             * @return Constant reference to member value
             */
            eProsima_user_DllExport const std::vector<uint8_t>& value() const;

            /*!
             * @brief This function returns a reference to member value
             * @return Reference to member value
             */
            eProsima_user_DllExport std::vector<uint8_t>& value();
            /*!
             * @brief This function sets a value in member bits_unused
             * @param _bits_unused New value for member bits_unused
             */
            eProsima_user_DllExport void bits_unused(
                    uint8_t _bits_unused);

            /*!
             * @brief This function returns the value of member bits_unused
             * @return Value of member bits_unused
             */
            eProsima_user_DllExport uint8_t bits_unused() const;

            /*!
             * @brief This function returns a reference to member bits_unused
             * @return Reference to member bits_unused
             */
            eProsima_user_DllExport uint8_t& bits_unused();


            /*!
             * @brief This function returns the maximum serialized size of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(
                    const etsi_its_cam_msgs::msg::ExteriorLights& data,
                    size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(
                    eprosima::fastcdr::Cdr& cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(
                    eprosima::fastcdr::Cdr& cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(
                    eprosima::fastcdr::Cdr& cdr) const;

        private:

            std::vector<uint8_t> m_value;
            uint8_t m_bits_unused;
        };
    } // namespace msg
} // namespace etsi_its_cam_msgs

#endif // _FAST_DDS_GENERATED_ETSI_ITS_CAM_MSGS_MSG_EXTERIORLIGHTS_H_