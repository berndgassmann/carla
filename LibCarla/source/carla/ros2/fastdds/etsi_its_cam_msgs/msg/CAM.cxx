// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file CAM.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "CAM.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

etsi_its_cam_msgs::msg::CAM::CAM()
{
    // m_header com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@618c5d94

    // m_cam com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@5b40ceb


}

etsi_its_cam_msgs::msg::CAM::~CAM()
{

}

etsi_its_cam_msgs::msg::CAM::CAM(
        const CAM& x)
{
    m_header = x.m_header;
    m_cam = x.m_cam;
}

etsi_its_cam_msgs::msg::CAM::CAM(
        CAM&& x)
{
    m_header = std::move(x.m_header);
    m_cam = std::move(x.m_cam);
}

etsi_its_cam_msgs::msg::CAM& etsi_its_cam_msgs::msg::CAM::operator =(
        const CAM& x)
{

    m_header = x.m_header;
    m_cam = x.m_cam;

    return *this;
}

etsi_its_cam_msgs::msg::CAM& etsi_its_cam_msgs::msg::CAM::operator =(
        CAM&& x)
{

    m_header = std::move(x.m_header);
    m_cam = std::move(x.m_cam);

    return *this;
}

bool etsi_its_cam_msgs::msg::CAM::operator ==(
        const CAM& x) const
{

    return (m_header == x.m_header && m_cam == x.m_cam);
}

bool etsi_its_cam_msgs::msg::CAM::operator !=(
        const CAM& x) const
{
    return !(*this == x);
}

size_t etsi_its_cam_msgs::msg::CAM::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += etsi_its_cam_msgs::msg::ItsPduHeader::getMaxCdrSerializedSize(current_alignment);
    current_alignment += etsi_its_cam_msgs::msg::CoopAwareness::getMaxCdrSerializedSize(current_alignment);

    return current_alignment - initial_alignment;
}

size_t etsi_its_cam_msgs::msg::CAM::getCdrSerializedSize(
        const etsi_its_cam_msgs::msg::CAM& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += etsi_its_cam_msgs::msg::ItsPduHeader::getCdrSerializedSize(data.header(), current_alignment);
    current_alignment += etsi_its_cam_msgs::msg::CoopAwareness::getCdrSerializedSize(data.cam(), current_alignment);

    return current_alignment - initial_alignment;
}

void etsi_its_cam_msgs::msg::CAM::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_header;
    scdr << m_cam;

}

void etsi_its_cam_msgs::msg::CAM::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_header;
    dcdr >> m_cam;
}

/*!
 * @brief This function copies the value in member header
 * @param _header New value to be copied in member header
 */
void etsi_its_cam_msgs::msg::CAM::header(
        const etsi_its_cam_msgs::msg::ItsPduHeader& _header)
{
    m_header = _header;
}

/*!
 * @brief This function moves the value in member header
 * @param _header New value to be moved in member header
 */
void etsi_its_cam_msgs::msg::CAM::header(
        etsi_its_cam_msgs::msg::ItsPduHeader&& _header)
{
    m_header = std::move(_header);
}

/*!
 * @brief This function returns a constant reference to member header
 * @return Constant reference to member header
 */
const etsi_its_cam_msgs::msg::ItsPduHeader& etsi_its_cam_msgs::msg::CAM::header() const
{
    return m_header;
}

/*!
 * @brief This function returns a reference to member header
 * @return Reference to member header
 */
etsi_its_cam_msgs::msg::ItsPduHeader& etsi_its_cam_msgs::msg::CAM::header()
{
    return m_header;
}
/*!
 * @brief This function copies the value in member cam
 * @param _cam New value to be copied in member cam
 */
void etsi_its_cam_msgs::msg::CAM::cam(
        const etsi_its_cam_msgs::msg::CoopAwareness& _cam)
{
    m_cam = _cam;
}

/*!
 * @brief This function moves the value in member cam
 * @param _cam New value to be moved in member cam
 */
void etsi_its_cam_msgs::msg::CAM::cam(
        etsi_its_cam_msgs::msg::CoopAwareness&& _cam)
{
    m_cam = std::move(_cam);
}

/*!
 * @brief This function returns a constant reference to member cam
 * @return Constant reference to member cam
 */
const etsi_its_cam_msgs::msg::CoopAwareness& etsi_its_cam_msgs::msg::CAM::cam() const
{
    return m_cam;
}

/*!
 * @brief This function returns a reference to member cam
 * @return Reference to member cam
 */
etsi_its_cam_msgs::msg::CoopAwareness& etsi_its_cam_msgs::msg::CAM::cam()
{
    return m_cam;
}

size_t etsi_its_cam_msgs::msg::CAM::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;



    return current_align;
}

bool etsi_its_cam_msgs::msg::CAM::isKeyDefined()
{
    return false;
}

void etsi_its_cam_msgs::msg::CAM::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
      
}


