// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file BasicVehicleContainerLowFrequency.cpp
 * This source file contains the implementation of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "BasicVehicleContainerLowFrequency.h"

#include <fastcdr/Cdr.h>


#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>


namespace etsi_its_cam_msgs {

namespace msg {



BasicVehicleContainerLowFrequency::BasicVehicleContainerLowFrequency()
{
}

BasicVehicleContainerLowFrequency::~BasicVehicleContainerLowFrequency()
{
}

BasicVehicleContainerLowFrequency::BasicVehicleContainerLowFrequency(
        const BasicVehicleContainerLowFrequency& x)
{
    m_vehicle_role = x.m_vehicle_role;
    m_exterior_lights = x.m_exterior_lights;
    m_path_history = x.m_path_history;
}

BasicVehicleContainerLowFrequency::BasicVehicleContainerLowFrequency(
        BasicVehicleContainerLowFrequency&& x) noexcept
{
    m_vehicle_role = std::move(x.m_vehicle_role);
    m_exterior_lights = std::move(x.m_exterior_lights);
    m_path_history = std::move(x.m_path_history);
}

BasicVehicleContainerLowFrequency& BasicVehicleContainerLowFrequency::operator =(
        const BasicVehicleContainerLowFrequency& x)
{

    m_vehicle_role = x.m_vehicle_role;
    m_exterior_lights = x.m_exterior_lights;
    m_path_history = x.m_path_history;
    return *this;
}

BasicVehicleContainerLowFrequency& BasicVehicleContainerLowFrequency::operator =(
        BasicVehicleContainerLowFrequency&& x) noexcept
{

    m_vehicle_role = std::move(x.m_vehicle_role);
    m_exterior_lights = std::move(x.m_exterior_lights);
    m_path_history = std::move(x.m_path_history);
    return *this;
}

bool BasicVehicleContainerLowFrequency::operator ==(
        const BasicVehicleContainerLowFrequency& x) const
{
    return (m_vehicle_role == x.m_vehicle_role &&
           m_exterior_lights == x.m_exterior_lights &&
           m_path_history == x.m_path_history);
}

bool BasicVehicleContainerLowFrequency::operator !=(
        const BasicVehicleContainerLowFrequency& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member vehicle_role
 * @param _vehicle_role New value to be copied in member vehicle_role
 */
void BasicVehicleContainerLowFrequency::vehicle_role(
        const etsi_its_cam_msgs::msg::VehicleRole& _vehicle_role)
{
    m_vehicle_role = _vehicle_role;
}

/*!
 * @brief This function moves the value in member vehicle_role
 * @param _vehicle_role New value to be moved in member vehicle_role
 */
void BasicVehicleContainerLowFrequency::vehicle_role(
        etsi_its_cam_msgs::msg::VehicleRole&& _vehicle_role)
{
    m_vehicle_role = std::move(_vehicle_role);
}

/*!
 * @brief This function returns a constant reference to member vehicle_role
 * @return Constant reference to member vehicle_role
 */
const etsi_its_cam_msgs::msg::VehicleRole& BasicVehicleContainerLowFrequency::vehicle_role() const
{
    return m_vehicle_role;
}

/*!
 * @brief This function returns a reference to member vehicle_role
 * @return Reference to member vehicle_role
 */
etsi_its_cam_msgs::msg::VehicleRole& BasicVehicleContainerLowFrequency::vehicle_role()
{
    return m_vehicle_role;
}


/*!
 * @brief This function copies the value in member exterior_lights
 * @param _exterior_lights New value to be copied in member exterior_lights
 */
void BasicVehicleContainerLowFrequency::exterior_lights(
        const etsi_its_cam_msgs::msg::ExteriorLights& _exterior_lights)
{
    m_exterior_lights = _exterior_lights;
}

/*!
 * @brief This function moves the value in member exterior_lights
 * @param _exterior_lights New value to be moved in member exterior_lights
 */
void BasicVehicleContainerLowFrequency::exterior_lights(
        etsi_its_cam_msgs::msg::ExteriorLights&& _exterior_lights)
{
    m_exterior_lights = std::move(_exterior_lights);
}

/*!
 * @brief This function returns a constant reference to member exterior_lights
 * @return Constant reference to member exterior_lights
 */
const etsi_its_cam_msgs::msg::ExteriorLights& BasicVehicleContainerLowFrequency::exterior_lights() const
{
    return m_exterior_lights;
}

/*!
 * @brief This function returns a reference to member exterior_lights
 * @return Reference to member exterior_lights
 */
etsi_its_cam_msgs::msg::ExteriorLights& BasicVehicleContainerLowFrequency::exterior_lights()
{
    return m_exterior_lights;
}


/*!
 * @brief This function copies the value in member path_history
 * @param _path_history New value to be copied in member path_history
 */
void BasicVehicleContainerLowFrequency::path_history(
        const etsi_its_cam_msgs::msg::PathHistory& _path_history)
{
    m_path_history = _path_history;
}

/*!
 * @brief This function moves the value in member path_history
 * @param _path_history New value to be moved in member path_history
 */
void BasicVehicleContainerLowFrequency::path_history(
        etsi_its_cam_msgs::msg::PathHistory&& _path_history)
{
    m_path_history = std::move(_path_history);
}

/*!
 * @brief This function returns a constant reference to member path_history
 * @return Constant reference to member path_history
 */
const etsi_its_cam_msgs::msg::PathHistory& BasicVehicleContainerLowFrequency::path_history() const
{
    return m_path_history;
}

/*!
 * @brief This function returns a reference to member path_history
 * @return Reference to member path_history
 */
etsi_its_cam_msgs::msg::PathHistory& BasicVehicleContainerLowFrequency::path_history()
{
    return m_path_history;
}




} // namespace msg


} // namespace etsi_its_cam_msgs
// Include auxiliary functions like for serializing/deserializing.
#include "BasicVehicleContainerLowFrequencyCdrAux.ipp"

