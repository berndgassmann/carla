// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file BasicVehicleContainerLowFrequency.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "BasicVehicleContainerLowFrequency.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

etsi_its_cam_msgs::msg::BasicVehicleContainerLowFrequency::BasicVehicleContainerLowFrequency()
{
    // m_vehicle_role com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@210386e0

    // m_exterior_lights com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@3d4d3fe7

    // m_path_history com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@65f87a2c


}

etsi_its_cam_msgs::msg::BasicVehicleContainerLowFrequency::~BasicVehicleContainerLowFrequency()
{


}

etsi_its_cam_msgs::msg::BasicVehicleContainerLowFrequency::BasicVehicleContainerLowFrequency(
        const BasicVehicleContainerLowFrequency& x)
{
    m_vehicle_role = x.m_vehicle_role;
    m_exterior_lights = x.m_exterior_lights;
    m_path_history = x.m_path_history;
}

etsi_its_cam_msgs::msg::BasicVehicleContainerLowFrequency::BasicVehicleContainerLowFrequency(
        BasicVehicleContainerLowFrequency&& x)
{
    m_vehicle_role = std::move(x.m_vehicle_role);
    m_exterior_lights = std::move(x.m_exterior_lights);
    m_path_history = std::move(x.m_path_history);
}

etsi_its_cam_msgs::msg::BasicVehicleContainerLowFrequency& etsi_its_cam_msgs::msg::BasicVehicleContainerLowFrequency::operator =(
        const BasicVehicleContainerLowFrequency& x)
{

    m_vehicle_role = x.m_vehicle_role;
    m_exterior_lights = x.m_exterior_lights;
    m_path_history = x.m_path_history;

    return *this;
}

etsi_its_cam_msgs::msg::BasicVehicleContainerLowFrequency& etsi_its_cam_msgs::msg::BasicVehicleContainerLowFrequency::operator =(
        BasicVehicleContainerLowFrequency&& x)
{

    m_vehicle_role = std::move(x.m_vehicle_role);
    m_exterior_lights = std::move(x.m_exterior_lights);
    m_path_history = std::move(x.m_path_history);

    return *this;
}

bool etsi_its_cam_msgs::msg::BasicVehicleContainerLowFrequency::operator ==(
        const BasicVehicleContainerLowFrequency& x) const
{

    return (m_vehicle_role == x.m_vehicle_role && m_exterior_lights == x.m_exterior_lights && m_path_history == x.m_path_history);
}

bool etsi_its_cam_msgs::msg::BasicVehicleContainerLowFrequency::operator !=(
        const BasicVehicleContainerLowFrequency& x) const
{
    return !(*this == x);
}

size_t etsi_its_cam_msgs::msg::BasicVehicleContainerLowFrequency::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += etsi_its_cam_msgs::msg::VehicleRole::getMaxCdrSerializedSize(current_alignment);
    current_alignment += etsi_its_cam_msgs::msg::ExteriorLights::getMaxCdrSerializedSize(current_alignment);
    current_alignment += etsi_its_cam_msgs::msg::PathHistory::getMaxCdrSerializedSize(current_alignment);

    return current_alignment - initial_alignment;
}

size_t etsi_its_cam_msgs::msg::BasicVehicleContainerLowFrequency::getCdrSerializedSize(
        const etsi_its_cam_msgs::msg::BasicVehicleContainerLowFrequency& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += etsi_its_cam_msgs::msg::VehicleRole::getCdrSerializedSize(data.vehicle_role(), current_alignment);
    current_alignment += etsi_its_cam_msgs::msg::ExteriorLights::getCdrSerializedSize(data.exterior_lights(), current_alignment);
    current_alignment += etsi_its_cam_msgs::msg::PathHistory::getCdrSerializedSize(data.path_history(), current_alignment);

    return current_alignment - initial_alignment;
}

void etsi_its_cam_msgs::msg::BasicVehicleContainerLowFrequency::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_vehicle_role;
    scdr << m_exterior_lights;
    scdr << m_path_history;

}

void etsi_its_cam_msgs::msg::BasicVehicleContainerLowFrequency::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_vehicle_role;
    dcdr >> m_exterior_lights;
    dcdr >> m_path_history;
}

/*!
 * @brief This function copies the value in member vehicle_role
 * @param _vehicle_role New value to be copied in member vehicle_role
 */
void etsi_its_cam_msgs::msg::BasicVehicleContainerLowFrequency::vehicle_role(
        const etsi_its_cam_msgs::msg::VehicleRole& _vehicle_role)
{
    m_vehicle_role = _vehicle_role;
}

/*!
 * @brief This function moves the value in member vehicle_role
 * @param _vehicle_role New value to be moved in member vehicle_role
 */
void etsi_its_cam_msgs::msg::BasicVehicleContainerLowFrequency::vehicle_role(
        etsi_its_cam_msgs::msg::VehicleRole&& _vehicle_role)
{
    m_vehicle_role = std::move(_vehicle_role);
}

/*!
 * @brief This function returns a constant reference to member vehicle_role
 * @return Constant reference to member vehicle_role
 */
const etsi_its_cam_msgs::msg::VehicleRole& etsi_its_cam_msgs::msg::BasicVehicleContainerLowFrequency::vehicle_role() const
{
    return m_vehicle_role;
}

/*!
 * @brief This function returns a reference to member vehicle_role
 * @return Reference to member vehicle_role
 */
etsi_its_cam_msgs::msg::VehicleRole& etsi_its_cam_msgs::msg::BasicVehicleContainerLowFrequency::vehicle_role()
{
    return m_vehicle_role;
}
/*!
 * @brief This function copies the value in member exterior_lights
 * @param _exterior_lights New value to be copied in member exterior_lights
 */
void etsi_its_cam_msgs::msg::BasicVehicleContainerLowFrequency::exterior_lights(
        const etsi_its_cam_msgs::msg::ExteriorLights& _exterior_lights)
{
    m_exterior_lights = _exterior_lights;
}

/*!
 * @brief This function moves the value in member exterior_lights
 * @param _exterior_lights New value to be moved in member exterior_lights
 */
void etsi_its_cam_msgs::msg::BasicVehicleContainerLowFrequency::exterior_lights(
        etsi_its_cam_msgs::msg::ExteriorLights&& _exterior_lights)
{
    m_exterior_lights = std::move(_exterior_lights);
}

/*!
 * @brief This function returns a constant reference to member exterior_lights
 * @return Constant reference to member exterior_lights
 */
const etsi_its_cam_msgs::msg::ExteriorLights& etsi_its_cam_msgs::msg::BasicVehicleContainerLowFrequency::exterior_lights() const
{
    return m_exterior_lights;
}

/*!
 * @brief This function returns a reference to member exterior_lights
 * @return Reference to member exterior_lights
 */
etsi_its_cam_msgs::msg::ExteriorLights& etsi_its_cam_msgs::msg::BasicVehicleContainerLowFrequency::exterior_lights()
{
    return m_exterior_lights;
}
/*!
 * @brief This function copies the value in member path_history
 * @param _path_history New value to be copied in member path_history
 */
void etsi_its_cam_msgs::msg::BasicVehicleContainerLowFrequency::path_history(
        const etsi_its_cam_msgs::msg::PathHistory& _path_history)
{
    m_path_history = _path_history;
}

/*!
 * @brief This function moves the value in member path_history
 * @param _path_history New value to be moved in member path_history
 */
void etsi_its_cam_msgs::msg::BasicVehicleContainerLowFrequency::path_history(
        etsi_its_cam_msgs::msg::PathHistory&& _path_history)
{
    m_path_history = std::move(_path_history);
}

/*!
 * @brief This function returns a constant reference to member path_history
 * @return Constant reference to member path_history
 */
const etsi_its_cam_msgs::msg::PathHistory& etsi_its_cam_msgs::msg::BasicVehicleContainerLowFrequency::path_history() const
{
    return m_path_history;
}

/*!
 * @brief This function returns a reference to member path_history
 * @return Reference to member path_history
 */
etsi_its_cam_msgs::msg::PathHistory& etsi_its_cam_msgs::msg::BasicVehicleContainerLowFrequency::path_history()
{
    return m_path_history;
}

size_t etsi_its_cam_msgs::msg::BasicVehicleContainerLowFrequency::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;



    return current_align;
}

bool etsi_its_cam_msgs::msg::BasicVehicleContainerLowFrequency::isKeyDefined()
{
    return false;
}

void etsi_its_cam_msgs::msg::BasicVehicleContainerLowFrequency::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
       
}


