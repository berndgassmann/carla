// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file PosConfidenceEllipse.cpp
 * This source file contains the implementation of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "PosConfidenceEllipse.h"

#include <fastcdr/Cdr.h>


#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>


namespace etsi_its_cam_msgs {

namespace msg {



PosConfidenceEllipse::PosConfidenceEllipse()
{
}

PosConfidenceEllipse::~PosConfidenceEllipse()
{
}

PosConfidenceEllipse::PosConfidenceEllipse(
        const PosConfidenceEllipse& x)
{
    m_semi_major_confidence = x.m_semi_major_confidence;
    m_semi_minor_confidence = x.m_semi_minor_confidence;
    m_semi_major_orientation = x.m_semi_major_orientation;
}

PosConfidenceEllipse::PosConfidenceEllipse(
        PosConfidenceEllipse&& x) noexcept
{
    m_semi_major_confidence = std::move(x.m_semi_major_confidence);
    m_semi_minor_confidence = std::move(x.m_semi_minor_confidence);
    m_semi_major_orientation = std::move(x.m_semi_major_orientation);
}

PosConfidenceEllipse& PosConfidenceEllipse::operator =(
        const PosConfidenceEllipse& x)
{

    m_semi_major_confidence = x.m_semi_major_confidence;
    m_semi_minor_confidence = x.m_semi_minor_confidence;
    m_semi_major_orientation = x.m_semi_major_orientation;
    return *this;
}

PosConfidenceEllipse& PosConfidenceEllipse::operator =(
        PosConfidenceEllipse&& x) noexcept
{

    m_semi_major_confidence = std::move(x.m_semi_major_confidence);
    m_semi_minor_confidence = std::move(x.m_semi_minor_confidence);
    m_semi_major_orientation = std::move(x.m_semi_major_orientation);
    return *this;
}

bool PosConfidenceEllipse::operator ==(
        const PosConfidenceEllipse& x) const
{
    return (m_semi_major_confidence == x.m_semi_major_confidence &&
           m_semi_minor_confidence == x.m_semi_minor_confidence &&
           m_semi_major_orientation == x.m_semi_major_orientation);
}

bool PosConfidenceEllipse::operator !=(
        const PosConfidenceEllipse& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member semi_major_confidence
 * @param _semi_major_confidence New value to be copied in member semi_major_confidence
 */
void PosConfidenceEllipse::semi_major_confidence(
        const etsi_its_cam_msgs::msg::SemiAxisLength& _semi_major_confidence)
{
    m_semi_major_confidence = _semi_major_confidence;
}

/*!
 * @brief This function moves the value in member semi_major_confidence
 * @param _semi_major_confidence New value to be moved in member semi_major_confidence
 */
void PosConfidenceEllipse::semi_major_confidence(
        etsi_its_cam_msgs::msg::SemiAxisLength&& _semi_major_confidence)
{
    m_semi_major_confidence = std::move(_semi_major_confidence);
}

/*!
 * @brief This function returns a constant reference to member semi_major_confidence
 * @return Constant reference to member semi_major_confidence
 */
const etsi_its_cam_msgs::msg::SemiAxisLength& PosConfidenceEllipse::semi_major_confidence() const
{
    return m_semi_major_confidence;
}

/*!
 * @brief This function returns a reference to member semi_major_confidence
 * @return Reference to member semi_major_confidence
 */
etsi_its_cam_msgs::msg::SemiAxisLength& PosConfidenceEllipse::semi_major_confidence()
{
    return m_semi_major_confidence;
}


/*!
 * @brief This function copies the value in member semi_minor_confidence
 * @param _semi_minor_confidence New value to be copied in member semi_minor_confidence
 */
void PosConfidenceEllipse::semi_minor_confidence(
        const etsi_its_cam_msgs::msg::SemiAxisLength& _semi_minor_confidence)
{
    m_semi_minor_confidence = _semi_minor_confidence;
}

/*!
 * @brief This function moves the value in member semi_minor_confidence
 * @param _semi_minor_confidence New value to be moved in member semi_minor_confidence
 */
void PosConfidenceEllipse::semi_minor_confidence(
        etsi_its_cam_msgs::msg::SemiAxisLength&& _semi_minor_confidence)
{
    m_semi_minor_confidence = std::move(_semi_minor_confidence);
}

/*!
 * @brief This function returns a constant reference to member semi_minor_confidence
 * @return Constant reference to member semi_minor_confidence
 */
const etsi_its_cam_msgs::msg::SemiAxisLength& PosConfidenceEllipse::semi_minor_confidence() const
{
    return m_semi_minor_confidence;
}

/*!
 * @brief This function returns a reference to member semi_minor_confidence
 * @return Reference to member semi_minor_confidence
 */
etsi_its_cam_msgs::msg::SemiAxisLength& PosConfidenceEllipse::semi_minor_confidence()
{
    return m_semi_minor_confidence;
}


/*!
 * @brief This function copies the value in member semi_major_orientation
 * @param _semi_major_orientation New value to be copied in member semi_major_orientation
 */
void PosConfidenceEllipse::semi_major_orientation(
        const etsi_its_cam_msgs::msg::HeadingValue& _semi_major_orientation)
{
    m_semi_major_orientation = _semi_major_orientation;
}

/*!
 * @brief This function moves the value in member semi_major_orientation
 * @param _semi_major_orientation New value to be moved in member semi_major_orientation
 */
void PosConfidenceEllipse::semi_major_orientation(
        etsi_its_cam_msgs::msg::HeadingValue&& _semi_major_orientation)
{
    m_semi_major_orientation = std::move(_semi_major_orientation);
}

/*!
 * @brief This function returns a constant reference to member semi_major_orientation
 * @return Constant reference to member semi_major_orientation
 */
const etsi_its_cam_msgs::msg::HeadingValue& PosConfidenceEllipse::semi_major_orientation() const
{
    return m_semi_major_orientation;
}

/*!
 * @brief This function returns a reference to member semi_major_orientation
 * @return Reference to member semi_major_orientation
 */
etsi_its_cam_msgs::msg::HeadingValue& PosConfidenceEllipse::semi_major_orientation()
{
    return m_semi_major_orientation;
}




} // namespace msg


} // namespace etsi_its_cam_msgs
// Include auxiliary functions like for serializing/deserializing.
#include "PosConfidenceEllipseCdrAux.ipp"

