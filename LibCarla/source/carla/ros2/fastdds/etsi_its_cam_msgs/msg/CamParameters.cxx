// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file CamParameters.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "CamParameters.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

etsi_its_cam_msgs::msg::CamParameters::CamParameters()
{
    // m_basic_container com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@773cbf4f

    // m_high_frequency_container com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@6b54655f

    // m_low_frequency_container com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@665e9289

    // m_low_frequency_container_is_present com.eprosima.idl.parser.typecode.PrimitiveTypeCode@7d3430a7
    m_low_frequency_container_is_present = false;
    // m_special_vehicle_container com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@6f603e89

    // m_special_vehicle_container_is_present com.eprosima.idl.parser.typecode.PrimitiveTypeCode@2756c0a7
    m_special_vehicle_container_is_present = false;

}

etsi_its_cam_msgs::msg::CamParameters::~CamParameters()
{





}

etsi_its_cam_msgs::msg::CamParameters::CamParameters(
        const CamParameters& x)
{
    m_basic_container = x.m_basic_container;
    m_high_frequency_container = x.m_high_frequency_container;
    m_low_frequency_container = x.m_low_frequency_container;
    m_low_frequency_container_is_present = x.m_low_frequency_container_is_present;
    m_special_vehicle_container = x.m_special_vehicle_container;
    m_special_vehicle_container_is_present = x.m_special_vehicle_container_is_present;
}

etsi_its_cam_msgs::msg::CamParameters::CamParameters(
        CamParameters&& x)
{
    m_basic_container = std::move(x.m_basic_container);
    m_high_frequency_container = std::move(x.m_high_frequency_container);
    m_low_frequency_container = std::move(x.m_low_frequency_container);
    m_low_frequency_container_is_present = x.m_low_frequency_container_is_present;
    m_special_vehicle_container = std::move(x.m_special_vehicle_container);
    m_special_vehicle_container_is_present = x.m_special_vehicle_container_is_present;
}

etsi_its_cam_msgs::msg::CamParameters& etsi_its_cam_msgs::msg::CamParameters::operator =(
        const CamParameters& x)
{

    m_basic_container = x.m_basic_container;
    m_high_frequency_container = x.m_high_frequency_container;
    m_low_frequency_container = x.m_low_frequency_container;
    m_low_frequency_container_is_present = x.m_low_frequency_container_is_present;
    m_special_vehicle_container = x.m_special_vehicle_container;
    m_special_vehicle_container_is_present = x.m_special_vehicle_container_is_present;

    return *this;
}

etsi_its_cam_msgs::msg::CamParameters& etsi_its_cam_msgs::msg::CamParameters::operator =(
        CamParameters&& x)
{

    m_basic_container = std::move(x.m_basic_container);
    m_high_frequency_container = std::move(x.m_high_frequency_container);
    m_low_frequency_container = std::move(x.m_low_frequency_container);
    m_low_frequency_container_is_present = x.m_low_frequency_container_is_present;
    m_special_vehicle_container = std::move(x.m_special_vehicle_container);
    m_special_vehicle_container_is_present = x.m_special_vehicle_container_is_present;

    return *this;
}

bool etsi_its_cam_msgs::msg::CamParameters::operator ==(
        const CamParameters& x) const
{

    return (m_basic_container == x.m_basic_container && m_high_frequency_container == x.m_high_frequency_container && m_low_frequency_container == x.m_low_frequency_container && m_low_frequency_container_is_present == x.m_low_frequency_container_is_present && m_special_vehicle_container == x.m_special_vehicle_container && m_special_vehicle_container_is_present == x.m_special_vehicle_container_is_present);
}

bool etsi_its_cam_msgs::msg::CamParameters::operator !=(
        const CamParameters& x) const
{
    return !(*this == x);
}

size_t etsi_its_cam_msgs::msg::CamParameters::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += etsi_its_cam_msgs::msg::BasicContainer::getMaxCdrSerializedSize(current_alignment);
    current_alignment += etsi_its_cam_msgs::msg::HighFrequencyContainer::getMaxCdrSerializedSize(current_alignment);
    current_alignment += etsi_its_cam_msgs::msg::LowFrequencyContainer::getMaxCdrSerializedSize(current_alignment);
    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += etsi_its_cam_msgs::msg::SpecialVehicleContainer::getMaxCdrSerializedSize(current_alignment);
    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}

size_t etsi_its_cam_msgs::msg::CamParameters::getCdrSerializedSize(
        const etsi_its_cam_msgs::msg::CamParameters& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += etsi_its_cam_msgs::msg::BasicContainer::getCdrSerializedSize(data.basic_container(), current_alignment);
    current_alignment += etsi_its_cam_msgs::msg::HighFrequencyContainer::getCdrSerializedSize(data.high_frequency_container(), current_alignment);
    current_alignment += etsi_its_cam_msgs::msg::LowFrequencyContainer::getCdrSerializedSize(data.low_frequency_container(), current_alignment);
    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += etsi_its_cam_msgs::msg::SpecialVehicleContainer::getCdrSerializedSize(data.special_vehicle_container(), current_alignment);
    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}

void etsi_its_cam_msgs::msg::CamParameters::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_basic_container;
    scdr << m_high_frequency_container;
    scdr << m_low_frequency_container;
    scdr << m_low_frequency_container_is_present;
    scdr << m_special_vehicle_container;
    scdr << m_special_vehicle_container_is_present;

}

void etsi_its_cam_msgs::msg::CamParameters::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_basic_container;
    dcdr >> m_high_frequency_container;
    dcdr >> m_low_frequency_container;
    dcdr >> m_low_frequency_container_is_present;
    dcdr >> m_special_vehicle_container;
    dcdr >> m_special_vehicle_container_is_present;
}

/*!
 * @brief This function copies the value in member basic_container
 * @param _basic_container New value to be copied in member basic_container
 */
void etsi_its_cam_msgs::msg::CamParameters::basic_container(
        const etsi_its_cam_msgs::msg::BasicContainer& _basic_container)
{
    m_basic_container = _basic_container;
}

/*!
 * @brief This function moves the value in member basic_container
 * @param _basic_container New value to be moved in member basic_container
 */
void etsi_its_cam_msgs::msg::CamParameters::basic_container(
        etsi_its_cam_msgs::msg::BasicContainer&& _basic_container)
{
    m_basic_container = std::move(_basic_container);
}

/*!
 * @brief This function returns a constant reference to member basic_container
 * @return Constant reference to member basic_container
 */
const etsi_its_cam_msgs::msg::BasicContainer& etsi_its_cam_msgs::msg::CamParameters::basic_container() const
{
    return m_basic_container;
}

/*!
 * @brief This function returns a reference to member basic_container
 * @return Reference to member basic_container
 */
etsi_its_cam_msgs::msg::BasicContainer& etsi_its_cam_msgs::msg::CamParameters::basic_container()
{
    return m_basic_container;
}
/*!
 * @brief This function copies the value in member high_frequency_container
 * @param _high_frequency_container New value to be copied in member high_frequency_container
 */
void etsi_its_cam_msgs::msg::CamParameters::high_frequency_container(
        const etsi_its_cam_msgs::msg::HighFrequencyContainer& _high_frequency_container)
{
    m_high_frequency_container = _high_frequency_container;
}

/*!
 * @brief This function moves the value in member high_frequency_container
 * @param _high_frequency_container New value to be moved in member high_frequency_container
 */
void etsi_its_cam_msgs::msg::CamParameters::high_frequency_container(
        etsi_its_cam_msgs::msg::HighFrequencyContainer&& _high_frequency_container)
{
    m_high_frequency_container = std::move(_high_frequency_container);
}

/*!
 * @brief This function returns a constant reference to member high_frequency_container
 * @return Constant reference to member high_frequency_container
 */
const etsi_its_cam_msgs::msg::HighFrequencyContainer& etsi_its_cam_msgs::msg::CamParameters::high_frequency_container() const
{
    return m_high_frequency_container;
}

/*!
 * @brief This function returns a reference to member high_frequency_container
 * @return Reference to member high_frequency_container
 */
etsi_its_cam_msgs::msg::HighFrequencyContainer& etsi_its_cam_msgs::msg::CamParameters::high_frequency_container()
{
    return m_high_frequency_container;
}
/*!
 * @brief This function copies the value in member low_frequency_container
 * @param _low_frequency_container New value to be copied in member low_frequency_container
 */
void etsi_its_cam_msgs::msg::CamParameters::low_frequency_container(
        const etsi_its_cam_msgs::msg::LowFrequencyContainer& _low_frequency_container)
{
    m_low_frequency_container = _low_frequency_container;
}

/*!
 * @brief This function moves the value in member low_frequency_container
 * @param _low_frequency_container New value to be moved in member low_frequency_container
 */
void etsi_its_cam_msgs::msg::CamParameters::low_frequency_container(
        etsi_its_cam_msgs::msg::LowFrequencyContainer&& _low_frequency_container)
{
    m_low_frequency_container = std::move(_low_frequency_container);
}

/*!
 * @brief This function returns a constant reference to member low_frequency_container
 * @return Constant reference to member low_frequency_container
 */
const etsi_its_cam_msgs::msg::LowFrequencyContainer& etsi_its_cam_msgs::msg::CamParameters::low_frequency_container() const
{
    return m_low_frequency_container;
}

/*!
 * @brief This function returns a reference to member low_frequency_container
 * @return Reference to member low_frequency_container
 */
etsi_its_cam_msgs::msg::LowFrequencyContainer& etsi_its_cam_msgs::msg::CamParameters::low_frequency_container()
{
    return m_low_frequency_container;
}
/*!
 * @brief This function sets a value in member low_frequency_container_is_present
 * @param _low_frequency_container_is_present New value for member low_frequency_container_is_present
 */
void etsi_its_cam_msgs::msg::CamParameters::low_frequency_container_is_present(
        bool _low_frequency_container_is_present)
{
    m_low_frequency_container_is_present = _low_frequency_container_is_present;
}

/*!
 * @brief This function returns the value of member low_frequency_container_is_present
 * @return Value of member low_frequency_container_is_present
 */
bool etsi_its_cam_msgs::msg::CamParameters::low_frequency_container_is_present() const
{
    return m_low_frequency_container_is_present;
}

/*!
 * @brief This function returns a reference to member low_frequency_container_is_present
 * @return Reference to member low_frequency_container_is_present
 */
bool& etsi_its_cam_msgs::msg::CamParameters::low_frequency_container_is_present()
{
    return m_low_frequency_container_is_present;
}

/*!
 * @brief This function copies the value in member special_vehicle_container
 * @param _special_vehicle_container New value to be copied in member special_vehicle_container
 */
void etsi_its_cam_msgs::msg::CamParameters::special_vehicle_container(
        const etsi_its_cam_msgs::msg::SpecialVehicleContainer& _special_vehicle_container)
{
    m_special_vehicle_container = _special_vehicle_container;
}

/*!
 * @brief This function moves the value in member special_vehicle_container
 * @param _special_vehicle_container New value to be moved in member special_vehicle_container
 */
void etsi_its_cam_msgs::msg::CamParameters::special_vehicle_container(
        etsi_its_cam_msgs::msg::SpecialVehicleContainer&& _special_vehicle_container)
{
    m_special_vehicle_container = std::move(_special_vehicle_container);
}

/*!
 * @brief This function returns a constant reference to member special_vehicle_container
 * @return Constant reference to member special_vehicle_container
 */
const etsi_its_cam_msgs::msg::SpecialVehicleContainer& etsi_its_cam_msgs::msg::CamParameters::special_vehicle_container() const
{
    return m_special_vehicle_container;
}

/*!
 * @brief This function returns a reference to member special_vehicle_container
 * @return Reference to member special_vehicle_container
 */
etsi_its_cam_msgs::msg::SpecialVehicleContainer& etsi_its_cam_msgs::msg::CamParameters::special_vehicle_container()
{
    return m_special_vehicle_container;
}
/*!
 * @brief This function sets a value in member special_vehicle_container_is_present
 * @param _special_vehicle_container_is_present New value for member special_vehicle_container_is_present
 */
void etsi_its_cam_msgs::msg::CamParameters::special_vehicle_container_is_present(
        bool _special_vehicle_container_is_present)
{
    m_special_vehicle_container_is_present = _special_vehicle_container_is_present;
}

/*!
 * @brief This function returns the value of member special_vehicle_container_is_present
 * @return Value of member special_vehicle_container_is_present
 */
bool etsi_its_cam_msgs::msg::CamParameters::special_vehicle_container_is_present() const
{
    return m_special_vehicle_container_is_present;
}

/*!
 * @brief This function returns a reference to member special_vehicle_container_is_present
 * @return Reference to member special_vehicle_container_is_present
 */
bool& etsi_its_cam_msgs::msg::CamParameters::special_vehicle_container_is_present()
{
    return m_special_vehicle_container_is_present;
}


size_t etsi_its_cam_msgs::msg::CamParameters::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;



    return current_align;
}

bool etsi_its_cam_msgs::msg::CamParameters::isKeyDefined()
{
    return false;
}

void etsi_its_cam_msgs::msg::CamParameters::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
          
}


