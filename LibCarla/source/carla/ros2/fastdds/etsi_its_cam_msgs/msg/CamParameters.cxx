// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file CamParameters.cpp
 * This source file contains the implementation of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "CamParameters.h"

#include <fastcdr/Cdr.h>


#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>


namespace etsi_its_cam_msgs {

namespace msg {



CamParameters::CamParameters()
{
}

CamParameters::~CamParameters()
{
}

CamParameters::CamParameters(
        const CamParameters& x)
{
    m_basic_container = x.m_basic_container;
    m_high_frequency_container = x.m_high_frequency_container;
    m_low_frequency_container = x.m_low_frequency_container;
    m_low_frequency_container_is_present = x.m_low_frequency_container_is_present;
    m_special_vehicle_container = x.m_special_vehicle_container;
    m_special_vehicle_container_is_present = x.m_special_vehicle_container_is_present;
}

CamParameters::CamParameters(
        CamParameters&& x) noexcept
{
    m_basic_container = std::move(x.m_basic_container);
    m_high_frequency_container = std::move(x.m_high_frequency_container);
    m_low_frequency_container = std::move(x.m_low_frequency_container);
    m_low_frequency_container_is_present = x.m_low_frequency_container_is_present;
    m_special_vehicle_container = std::move(x.m_special_vehicle_container);
    m_special_vehicle_container_is_present = x.m_special_vehicle_container_is_present;
}

CamParameters& CamParameters::operator =(
        const CamParameters& x)
{

    m_basic_container = x.m_basic_container;
    m_high_frequency_container = x.m_high_frequency_container;
    m_low_frequency_container = x.m_low_frequency_container;
    m_low_frequency_container_is_present = x.m_low_frequency_container_is_present;
    m_special_vehicle_container = x.m_special_vehicle_container;
    m_special_vehicle_container_is_present = x.m_special_vehicle_container_is_present;
    return *this;
}

CamParameters& CamParameters::operator =(
        CamParameters&& x) noexcept
{

    m_basic_container = std::move(x.m_basic_container);
    m_high_frequency_container = std::move(x.m_high_frequency_container);
    m_low_frequency_container = std::move(x.m_low_frequency_container);
    m_low_frequency_container_is_present = x.m_low_frequency_container_is_present;
    m_special_vehicle_container = std::move(x.m_special_vehicle_container);
    m_special_vehicle_container_is_present = x.m_special_vehicle_container_is_present;
    return *this;
}

bool CamParameters::operator ==(
        const CamParameters& x) const
{
    return (m_basic_container == x.m_basic_container &&
           m_high_frequency_container == x.m_high_frequency_container &&
           m_low_frequency_container == x.m_low_frequency_container &&
           m_low_frequency_container_is_present == x.m_low_frequency_container_is_present &&
           m_special_vehicle_container == x.m_special_vehicle_container &&
           m_special_vehicle_container_is_present == x.m_special_vehicle_container_is_present);
}

bool CamParameters::operator !=(
        const CamParameters& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member basic_container
 * @param _basic_container New value to be copied in member basic_container
 */
void CamParameters::basic_container(
        const etsi_its_cam_msgs::msg::BasicContainer& _basic_container)
{
    m_basic_container = _basic_container;
}

/*!
 * @brief This function moves the value in member basic_container
 * @param _basic_container New value to be moved in member basic_container
 */
void CamParameters::basic_container(
        etsi_its_cam_msgs::msg::BasicContainer&& _basic_container)
{
    m_basic_container = std::move(_basic_container);
}

/*!
 * @brief This function returns a constant reference to member basic_container
 * @return Constant reference to member basic_container
 */
const etsi_its_cam_msgs::msg::BasicContainer& CamParameters::basic_container() const
{
    return m_basic_container;
}

/*!
 * @brief This function returns a reference to member basic_container
 * @return Reference to member basic_container
 */
etsi_its_cam_msgs::msg::BasicContainer& CamParameters::basic_container()
{
    return m_basic_container;
}


/*!
 * @brief This function copies the value in member high_frequency_container
 * @param _high_frequency_container New value to be copied in member high_frequency_container
 */
void CamParameters::high_frequency_container(
        const etsi_its_cam_msgs::msg::HighFrequencyContainer& _high_frequency_container)
{
    m_high_frequency_container = _high_frequency_container;
}

/*!
 * @brief This function moves the value in member high_frequency_container
 * @param _high_frequency_container New value to be moved in member high_frequency_container
 */
void CamParameters::high_frequency_container(
        etsi_its_cam_msgs::msg::HighFrequencyContainer&& _high_frequency_container)
{
    m_high_frequency_container = std::move(_high_frequency_container);
}

/*!
 * @brief This function returns a constant reference to member high_frequency_container
 * @return Constant reference to member high_frequency_container
 */
const etsi_its_cam_msgs::msg::HighFrequencyContainer& CamParameters::high_frequency_container() const
{
    return m_high_frequency_container;
}

/*!
 * @brief This function returns a reference to member high_frequency_container
 * @return Reference to member high_frequency_container
 */
etsi_its_cam_msgs::msg::HighFrequencyContainer& CamParameters::high_frequency_container()
{
    return m_high_frequency_container;
}


/*!
 * @brief This function copies the value in member low_frequency_container
 * @param _low_frequency_container New value to be copied in member low_frequency_container
 */
void CamParameters::low_frequency_container(
        const etsi_its_cam_msgs::msg::LowFrequencyContainer& _low_frequency_container)
{
    m_low_frequency_container = _low_frequency_container;
}

/*!
 * @brief This function moves the value in member low_frequency_container
 * @param _low_frequency_container New value to be moved in member low_frequency_container
 */
void CamParameters::low_frequency_container(
        etsi_its_cam_msgs::msg::LowFrequencyContainer&& _low_frequency_container)
{
    m_low_frequency_container = std::move(_low_frequency_container);
}

/*!
 * @brief This function returns a constant reference to member low_frequency_container
 * @return Constant reference to member low_frequency_container
 */
const etsi_its_cam_msgs::msg::LowFrequencyContainer& CamParameters::low_frequency_container() const
{
    return m_low_frequency_container;
}

/*!
 * @brief This function returns a reference to member low_frequency_container
 * @return Reference to member low_frequency_container
 */
etsi_its_cam_msgs::msg::LowFrequencyContainer& CamParameters::low_frequency_container()
{
    return m_low_frequency_container;
}


/*!
 * @brief This function sets a value in member low_frequency_container_is_present
 * @param _low_frequency_container_is_present New value for member low_frequency_container_is_present
 */
void CamParameters::low_frequency_container_is_present(
        bool _low_frequency_container_is_present)
{
    m_low_frequency_container_is_present = _low_frequency_container_is_present;
}

/*!
 * @brief This function returns the value of member low_frequency_container_is_present
 * @return Value of member low_frequency_container_is_present
 */
bool CamParameters::low_frequency_container_is_present() const
{
    return m_low_frequency_container_is_present;
}

/*!
 * @brief This function returns a reference to member low_frequency_container_is_present
 * @return Reference to member low_frequency_container_is_present
 */
bool& CamParameters::low_frequency_container_is_present()
{
    return m_low_frequency_container_is_present;
}


/*!
 * @brief This function copies the value in member special_vehicle_container
 * @param _special_vehicle_container New value to be copied in member special_vehicle_container
 */
void CamParameters::special_vehicle_container(
        const etsi_its_cam_msgs::msg::SpecialVehicleContainer& _special_vehicle_container)
{
    m_special_vehicle_container = _special_vehicle_container;
}

/*!
 * @brief This function moves the value in member special_vehicle_container
 * @param _special_vehicle_container New value to be moved in member special_vehicle_container
 */
void CamParameters::special_vehicle_container(
        etsi_its_cam_msgs::msg::SpecialVehicleContainer&& _special_vehicle_container)
{
    m_special_vehicle_container = std::move(_special_vehicle_container);
}

/*!
 * @brief This function returns a constant reference to member special_vehicle_container
 * @return Constant reference to member special_vehicle_container
 */
const etsi_its_cam_msgs::msg::SpecialVehicleContainer& CamParameters::special_vehicle_container() const
{
    return m_special_vehicle_container;
}

/*!
 * @brief This function returns a reference to member special_vehicle_container
 * @return Reference to member special_vehicle_container
 */
etsi_its_cam_msgs::msg::SpecialVehicleContainer& CamParameters::special_vehicle_container()
{
    return m_special_vehicle_container;
}


/*!
 * @brief This function sets a value in member special_vehicle_container_is_present
 * @param _special_vehicle_container_is_present New value for member special_vehicle_container_is_present
 */
void CamParameters::special_vehicle_container_is_present(
        bool _special_vehicle_container_is_present)
{
    m_special_vehicle_container_is_present = _special_vehicle_container_is_present;
}

/*!
 * @brief This function returns the value of member special_vehicle_container_is_present
 * @return Value of member special_vehicle_container_is_present
 */
bool CamParameters::special_vehicle_container_is_present() const
{
    return m_special_vehicle_container_is_present;
}

/*!
 * @brief This function returns a reference to member special_vehicle_container_is_present
 * @return Reference to member special_vehicle_container_is_present
 */
bool& CamParameters::special_vehicle_container_is_present()
{
    return m_special_vehicle_container_is_present;
}




} // namespace msg


} // namespace etsi_its_cam_msgs
// Include auxiliary functions like for serializing/deserializing.
#include "CamParametersCdrAux.ipp"

