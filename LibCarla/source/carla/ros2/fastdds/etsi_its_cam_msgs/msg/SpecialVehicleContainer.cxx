// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file SpecialVehicleContainer.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "SpecialVehicleContainer.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>









etsi_its_cam_msgs::msg::SpecialVehicleContainer::SpecialVehicleContainer()
{
    // m_choice com.eprosima.idl.parser.typecode.PrimitiveTypeCode@4275c20c
    m_choice = 0;
    // m_public_transport_container com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@7c56e013

    // m_special_transport_container com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@3fc9dfc5

    // m_dangerous_goods_container com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@40258c2f

    // m_road_works_container_basic com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@2cac4385

    // m_rescue_container com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@6731787b

    // m_emergency_container com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@16f7b4af

    // m_safety_car_container com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@7adf16aa


}

etsi_its_cam_msgs::msg::SpecialVehicleContainer::~SpecialVehicleContainer()
{







}

etsi_its_cam_msgs::msg::SpecialVehicleContainer::SpecialVehicleContainer(
        const SpecialVehicleContainer& x)
{
    m_choice = x.m_choice;
    m_public_transport_container = x.m_public_transport_container;
    m_special_transport_container = x.m_special_transport_container;
    m_dangerous_goods_container = x.m_dangerous_goods_container;
    m_road_works_container_basic = x.m_road_works_container_basic;
    m_rescue_container = x.m_rescue_container;
    m_emergency_container = x.m_emergency_container;
    m_safety_car_container = x.m_safety_car_container;
}

etsi_its_cam_msgs::msg::SpecialVehicleContainer::SpecialVehicleContainer(
        SpecialVehicleContainer&& x)
{
    m_choice = x.m_choice;
    m_public_transport_container = std::move(x.m_public_transport_container);
    m_special_transport_container = std::move(x.m_special_transport_container);
    m_dangerous_goods_container = std::move(x.m_dangerous_goods_container);
    m_road_works_container_basic = std::move(x.m_road_works_container_basic);
    m_rescue_container = std::move(x.m_rescue_container);
    m_emergency_container = std::move(x.m_emergency_container);
    m_safety_car_container = std::move(x.m_safety_car_container);
}

etsi_its_cam_msgs::msg::SpecialVehicleContainer& etsi_its_cam_msgs::msg::SpecialVehicleContainer::operator =(
        const SpecialVehicleContainer& x)
{

    m_choice = x.m_choice;
    m_public_transport_container = x.m_public_transport_container;
    m_special_transport_container = x.m_special_transport_container;
    m_dangerous_goods_container = x.m_dangerous_goods_container;
    m_road_works_container_basic = x.m_road_works_container_basic;
    m_rescue_container = x.m_rescue_container;
    m_emergency_container = x.m_emergency_container;
    m_safety_car_container = x.m_safety_car_container;

    return *this;
}

etsi_its_cam_msgs::msg::SpecialVehicleContainer& etsi_its_cam_msgs::msg::SpecialVehicleContainer::operator =(
        SpecialVehicleContainer&& x)
{

    m_choice = x.m_choice;
    m_public_transport_container = std::move(x.m_public_transport_container);
    m_special_transport_container = std::move(x.m_special_transport_container);
    m_dangerous_goods_container = std::move(x.m_dangerous_goods_container);
    m_road_works_container_basic = std::move(x.m_road_works_container_basic);
    m_rescue_container = std::move(x.m_rescue_container);
    m_emergency_container = std::move(x.m_emergency_container);
    m_safety_car_container = std::move(x.m_safety_car_container);

    return *this;
}

bool etsi_its_cam_msgs::msg::SpecialVehicleContainer::operator ==(
        const SpecialVehicleContainer& x) const
{

    return (m_choice == x.m_choice && m_public_transport_container == x.m_public_transport_container && m_special_transport_container == x.m_special_transport_container && m_dangerous_goods_container == x.m_dangerous_goods_container && m_road_works_container_basic == x.m_road_works_container_basic && m_rescue_container == x.m_rescue_container && m_emergency_container == x.m_emergency_container && m_safety_car_container == x.m_safety_car_container);
}

bool etsi_its_cam_msgs::msg::SpecialVehicleContainer::operator !=(
        const SpecialVehicleContainer& x) const
{
    return !(*this == x);
}

size_t etsi_its_cam_msgs::msg::SpecialVehicleContainer::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += etsi_its_cam_msgs::msg::PublicTransportContainer::getMaxCdrSerializedSize(current_alignment);
    current_alignment += etsi_its_cam_msgs::msg::SpecialTransportContainer::getMaxCdrSerializedSize(current_alignment);
    current_alignment += etsi_its_cam_msgs::msg::DangerousGoodsContainer::getMaxCdrSerializedSize(current_alignment);
    current_alignment += etsi_its_cam_msgs::msg::RoadWorksContainerBasic::getMaxCdrSerializedSize(current_alignment);
    current_alignment += etsi_its_cam_msgs::msg::RescueContainer::getMaxCdrSerializedSize(current_alignment);
    current_alignment += etsi_its_cam_msgs::msg::EmergencyContainer::getMaxCdrSerializedSize(current_alignment);
    current_alignment += etsi_its_cam_msgs::msg::SafetyCarContainer::getMaxCdrSerializedSize(current_alignment);

    return current_alignment - initial_alignment;
}

size_t etsi_its_cam_msgs::msg::SpecialVehicleContainer::getCdrSerializedSize(
        const etsi_its_cam_msgs::msg::SpecialVehicleContainer& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += etsi_its_cam_msgs::msg::PublicTransportContainer::getCdrSerializedSize(data.public_transport_container(), current_alignment);
    current_alignment += etsi_its_cam_msgs::msg::SpecialTransportContainer::getCdrSerializedSize(data.special_transport_container(), current_alignment);
    current_alignment += etsi_its_cam_msgs::msg::DangerousGoodsContainer::getCdrSerializedSize(data.dangerous_goods_container(), current_alignment);
    current_alignment += etsi_its_cam_msgs::msg::RoadWorksContainerBasic::getCdrSerializedSize(data.road_works_container_basic(), current_alignment);
    current_alignment += etsi_its_cam_msgs::msg::RescueContainer::getCdrSerializedSize(data.rescue_container(), current_alignment);
    current_alignment += etsi_its_cam_msgs::msg::EmergencyContainer::getCdrSerializedSize(data.emergency_container(), current_alignment);
    current_alignment += etsi_its_cam_msgs::msg::SafetyCarContainer::getCdrSerializedSize(data.safety_car_container(), current_alignment);

    return current_alignment - initial_alignment;
}

void etsi_its_cam_msgs::msg::SpecialVehicleContainer::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_choice;
    scdr << m_public_transport_container;
    scdr << m_special_transport_container;
    scdr << m_dangerous_goods_container;
    scdr << m_road_works_container_basic;
    scdr << m_rescue_container;
    scdr << m_emergency_container;
    scdr << m_safety_car_container;

}

void etsi_its_cam_msgs::msg::SpecialVehicleContainer::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_choice;
    dcdr >> m_public_transport_container;
    dcdr >> m_special_transport_container;
    dcdr >> m_dangerous_goods_container;
    dcdr >> m_road_works_container_basic;
    dcdr >> m_rescue_container;
    dcdr >> m_emergency_container;
    dcdr >> m_safety_car_container;
}

/*!
 * @brief This function sets a value in member choice
 * @param _choice New value for member choice
 */
void etsi_its_cam_msgs::msg::SpecialVehicleContainer::choice(
        uint8_t _choice)
{
    m_choice = _choice;
}

/*!
 * @brief This function returns the value of member choice
 * @return Value of member choice
 */
uint8_t etsi_its_cam_msgs::msg::SpecialVehicleContainer::choice() const
{
    return m_choice;
}

/*!
 * @brief This function returns a reference to member choice
 * @return Reference to member choice
 */
uint8_t& etsi_its_cam_msgs::msg::SpecialVehicleContainer::choice()
{
    return m_choice;
}

/*!
 * @brief This function copies the value in member public_transport_container
 * @param _public_transport_container New value to be copied in member public_transport_container
 */
void etsi_its_cam_msgs::msg::SpecialVehicleContainer::public_transport_container(
        const etsi_its_cam_msgs::msg::PublicTransportContainer& _public_transport_container)
{
    m_public_transport_container = _public_transport_container;
}

/*!
 * @brief This function moves the value in member public_transport_container
 * @param _public_transport_container New value to be moved in member public_transport_container
 */
void etsi_its_cam_msgs::msg::SpecialVehicleContainer::public_transport_container(
        etsi_its_cam_msgs::msg::PublicTransportContainer&& _public_transport_container)
{
    m_public_transport_container = std::move(_public_transport_container);
}

/*!
 * @brief This function returns a constant reference to member public_transport_container
 * @return Constant reference to member public_transport_container
 */
const etsi_its_cam_msgs::msg::PublicTransportContainer& etsi_its_cam_msgs::msg::SpecialVehicleContainer::public_transport_container() const
{
    return m_public_transport_container;
}

/*!
 * @brief This function returns a reference to member public_transport_container
 * @return Reference to member public_transport_container
 */
etsi_its_cam_msgs::msg::PublicTransportContainer& etsi_its_cam_msgs::msg::SpecialVehicleContainer::public_transport_container()
{
    return m_public_transport_container;
}
/*!
 * @brief This function copies the value in member special_transport_container
 * @param _special_transport_container New value to be copied in member special_transport_container
 */
void etsi_its_cam_msgs::msg::SpecialVehicleContainer::special_transport_container(
        const etsi_its_cam_msgs::msg::SpecialTransportContainer& _special_transport_container)
{
    m_special_transport_container = _special_transport_container;
}

/*!
 * @brief This function moves the value in member special_transport_container
 * @param _special_transport_container New value to be moved in member special_transport_container
 */
void etsi_its_cam_msgs::msg::SpecialVehicleContainer::special_transport_container(
        etsi_its_cam_msgs::msg::SpecialTransportContainer&& _special_transport_container)
{
    m_special_transport_container = std::move(_special_transport_container);
}

/*!
 * @brief This function returns a constant reference to member special_transport_container
 * @return Constant reference to member special_transport_container
 */
const etsi_its_cam_msgs::msg::SpecialTransportContainer& etsi_its_cam_msgs::msg::SpecialVehicleContainer::special_transport_container() const
{
    return m_special_transport_container;
}

/*!
 * @brief This function returns a reference to member special_transport_container
 * @return Reference to member special_transport_container
 */
etsi_its_cam_msgs::msg::SpecialTransportContainer& etsi_its_cam_msgs::msg::SpecialVehicleContainer::special_transport_container()
{
    return m_special_transport_container;
}
/*!
 * @brief This function copies the value in member dangerous_goods_container
 * @param _dangerous_goods_container New value to be copied in member dangerous_goods_container
 */
void etsi_its_cam_msgs::msg::SpecialVehicleContainer::dangerous_goods_container(
        const etsi_its_cam_msgs::msg::DangerousGoodsContainer& _dangerous_goods_container)
{
    m_dangerous_goods_container = _dangerous_goods_container;
}

/*!
 * @brief This function moves the value in member dangerous_goods_container
 * @param _dangerous_goods_container New value to be moved in member dangerous_goods_container
 */
void etsi_its_cam_msgs::msg::SpecialVehicleContainer::dangerous_goods_container(
        etsi_its_cam_msgs::msg::DangerousGoodsContainer&& _dangerous_goods_container)
{
    m_dangerous_goods_container = std::move(_dangerous_goods_container);
}

/*!
 * @brief This function returns a constant reference to member dangerous_goods_container
 * @return Constant reference to member dangerous_goods_container
 */
const etsi_its_cam_msgs::msg::DangerousGoodsContainer& etsi_its_cam_msgs::msg::SpecialVehicleContainer::dangerous_goods_container() const
{
    return m_dangerous_goods_container;
}

/*!
 * @brief This function returns a reference to member dangerous_goods_container
 * @return Reference to member dangerous_goods_container
 */
etsi_its_cam_msgs::msg::DangerousGoodsContainer& etsi_its_cam_msgs::msg::SpecialVehicleContainer::dangerous_goods_container()
{
    return m_dangerous_goods_container;
}
/*!
 * @brief This function copies the value in member road_works_container_basic
 * @param _road_works_container_basic New value to be copied in member road_works_container_basic
 */
void etsi_its_cam_msgs::msg::SpecialVehicleContainer::road_works_container_basic(
        const etsi_its_cam_msgs::msg::RoadWorksContainerBasic& _road_works_container_basic)
{
    m_road_works_container_basic = _road_works_container_basic;
}

/*!
 * @brief This function moves the value in member road_works_container_basic
 * @param _road_works_container_basic New value to be moved in member road_works_container_basic
 */
void etsi_its_cam_msgs::msg::SpecialVehicleContainer::road_works_container_basic(
        etsi_its_cam_msgs::msg::RoadWorksContainerBasic&& _road_works_container_basic)
{
    m_road_works_container_basic = std::move(_road_works_container_basic);
}

/*!
 * @brief This function returns a constant reference to member road_works_container_basic
 * @return Constant reference to member road_works_container_basic
 */
const etsi_its_cam_msgs::msg::RoadWorksContainerBasic& etsi_its_cam_msgs::msg::SpecialVehicleContainer::road_works_container_basic() const
{
    return m_road_works_container_basic;
}

/*!
 * @brief This function returns a reference to member road_works_container_basic
 * @return Reference to member road_works_container_basic
 */
etsi_its_cam_msgs::msg::RoadWorksContainerBasic& etsi_its_cam_msgs::msg::SpecialVehicleContainer::road_works_container_basic()
{
    return m_road_works_container_basic;
}
/*!
 * @brief This function copies the value in member rescue_container
 * @param _rescue_container New value to be copied in member rescue_container
 */
void etsi_its_cam_msgs::msg::SpecialVehicleContainer::rescue_container(
        const etsi_its_cam_msgs::msg::RescueContainer& _rescue_container)
{
    m_rescue_container = _rescue_container;
}

/*!
 * @brief This function moves the value in member rescue_container
 * @param _rescue_container New value to be moved in member rescue_container
 */
void etsi_its_cam_msgs::msg::SpecialVehicleContainer::rescue_container(
        etsi_its_cam_msgs::msg::RescueContainer&& _rescue_container)
{
    m_rescue_container = std::move(_rescue_container);
}

/*!
 * @brief This function returns a constant reference to member rescue_container
 * @return Constant reference to member rescue_container
 */
const etsi_its_cam_msgs::msg::RescueContainer& etsi_its_cam_msgs::msg::SpecialVehicleContainer::rescue_container() const
{
    return m_rescue_container;
}

/*!
 * @brief This function returns a reference to member rescue_container
 * @return Reference to member rescue_container
 */
etsi_its_cam_msgs::msg::RescueContainer& etsi_its_cam_msgs::msg::SpecialVehicleContainer::rescue_container()
{
    return m_rescue_container;
}
/*!
 * @brief This function copies the value in member emergency_container
 * @param _emergency_container New value to be copied in member emergency_container
 */
void etsi_its_cam_msgs::msg::SpecialVehicleContainer::emergency_container(
        const etsi_its_cam_msgs::msg::EmergencyContainer& _emergency_container)
{
    m_emergency_container = _emergency_container;
}

/*!
 * @brief This function moves the value in member emergency_container
 * @param _emergency_container New value to be moved in member emergency_container
 */
void etsi_its_cam_msgs::msg::SpecialVehicleContainer::emergency_container(
        etsi_its_cam_msgs::msg::EmergencyContainer&& _emergency_container)
{
    m_emergency_container = std::move(_emergency_container);
}

/*!
 * @brief This function returns a constant reference to member emergency_container
 * @return Constant reference to member emergency_container
 */
const etsi_its_cam_msgs::msg::EmergencyContainer& etsi_its_cam_msgs::msg::SpecialVehicleContainer::emergency_container() const
{
    return m_emergency_container;
}

/*!
 * @brief This function returns a reference to member emergency_container
 * @return Reference to member emergency_container
 */
etsi_its_cam_msgs::msg::EmergencyContainer& etsi_its_cam_msgs::msg::SpecialVehicleContainer::emergency_container()
{
    return m_emergency_container;
}
/*!
 * @brief This function copies the value in member safety_car_container
 * @param _safety_car_container New value to be copied in member safety_car_container
 */
void etsi_its_cam_msgs::msg::SpecialVehicleContainer::safety_car_container(
        const etsi_its_cam_msgs::msg::SafetyCarContainer& _safety_car_container)
{
    m_safety_car_container = _safety_car_container;
}

/*!
 * @brief This function moves the value in member safety_car_container
 * @param _safety_car_container New value to be moved in member safety_car_container
 */
void etsi_its_cam_msgs::msg::SpecialVehicleContainer::safety_car_container(
        etsi_its_cam_msgs::msg::SafetyCarContainer&& _safety_car_container)
{
    m_safety_car_container = std::move(_safety_car_container);
}

/*!
 * @brief This function returns a constant reference to member safety_car_container
 * @return Constant reference to member safety_car_container
 */
const etsi_its_cam_msgs::msg::SafetyCarContainer& etsi_its_cam_msgs::msg::SpecialVehicleContainer::safety_car_container() const
{
    return m_safety_car_container;
}

/*!
 * @brief This function returns a reference to member safety_car_container
 * @return Reference to member safety_car_container
 */
etsi_its_cam_msgs::msg::SafetyCarContainer& etsi_its_cam_msgs::msg::SpecialVehicleContainer::safety_car_container()
{
    return m_safety_car_container;
}

size_t etsi_its_cam_msgs::msg::SpecialVehicleContainer::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;



    return current_align;
}

bool etsi_its_cam_msgs::msg::SpecialVehicleContainer::isKeyDefined()
{
    return false;
}

void etsi_its_cam_msgs::msg::SpecialVehicleContainer::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
            
}


