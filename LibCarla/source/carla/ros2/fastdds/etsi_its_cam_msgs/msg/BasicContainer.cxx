// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file BasicContainer.cpp
 * This source file contains the implementation of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "BasicContainer.h"

#include <fastcdr/Cdr.h>


#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>


namespace etsi_its_cam_msgs {

namespace msg {



BasicContainer::BasicContainer()
{
}

BasicContainer::~BasicContainer()
{
}

BasicContainer::BasicContainer(
        const BasicContainer& x)
{
    m_station_type = x.m_station_type;
    m_reference_position = x.m_reference_position;
}

BasicContainer::BasicContainer(
        BasicContainer&& x) noexcept
{
    m_station_type = std::move(x.m_station_type);
    m_reference_position = std::move(x.m_reference_position);
}

BasicContainer& BasicContainer::operator =(
        const BasicContainer& x)
{

    m_station_type = x.m_station_type;
    m_reference_position = x.m_reference_position;
    return *this;
}

BasicContainer& BasicContainer::operator =(
        BasicContainer&& x) noexcept
{

    m_station_type = std::move(x.m_station_type);
    m_reference_position = std::move(x.m_reference_position);
    return *this;
}

bool BasicContainer::operator ==(
        const BasicContainer& x) const
{
    return (m_station_type == x.m_station_type &&
           m_reference_position == x.m_reference_position);
}

bool BasicContainer::operator !=(
        const BasicContainer& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member station_type
 * @param _station_type New value to be copied in member station_type
 */
void BasicContainer::station_type(
        const etsi_its_cam_msgs::msg::StationType& _station_type)
{
    m_station_type = _station_type;
}

/*!
 * @brief This function moves the value in member station_type
 * @param _station_type New value to be moved in member station_type
 */
void BasicContainer::station_type(
        etsi_its_cam_msgs::msg::StationType&& _station_type)
{
    m_station_type = std::move(_station_type);
}

/*!
 * @brief This function returns a constant reference to member station_type
 * @return Constant reference to member station_type
 */
const etsi_its_cam_msgs::msg::StationType& BasicContainer::station_type() const
{
    return m_station_type;
}

/*!
 * @brief This function returns a reference to member station_type
 * @return Reference to member station_type
 */
etsi_its_cam_msgs::msg::StationType& BasicContainer::station_type()
{
    return m_station_type;
}


/*!
 * @brief This function copies the value in member reference_position
 * @param _reference_position New value to be copied in member reference_position
 */
void BasicContainer::reference_position(
        const etsi_its_cam_msgs::msg::ReferencePosition& _reference_position)
{
    m_reference_position = _reference_position;
}

/*!
 * @brief This function moves the value in member reference_position
 * @param _reference_position New value to be moved in member reference_position
 */
void BasicContainer::reference_position(
        etsi_its_cam_msgs::msg::ReferencePosition&& _reference_position)
{
    m_reference_position = std::move(_reference_position);
}

/*!
 * @brief This function returns a constant reference to member reference_position
 * @return Constant reference to member reference_position
 */
const etsi_its_cam_msgs::msg::ReferencePosition& BasicContainer::reference_position() const
{
    return m_reference_position;
}

/*!
 * @brief This function returns a reference to member reference_position
 * @return Reference to member reference_position
 */
etsi_its_cam_msgs::msg::ReferencePosition& BasicContainer::reference_position()
{
    return m_reference_position;
}




} // namespace msg


} // namespace etsi_its_cam_msgs
// Include auxiliary functions like for serializing/deserializing.
#include "BasicContainerCdrAux.ipp"

