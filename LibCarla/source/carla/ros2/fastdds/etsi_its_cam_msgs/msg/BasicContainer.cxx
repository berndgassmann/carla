// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file BasicContainer.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "BasicContainer.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

etsi_its_cam_msgs::msg::BasicContainer::BasicContainer()
{
    // m_station_type com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@432034a

    // m_reference_position com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@78de58ea


}

etsi_its_cam_msgs::msg::BasicContainer::~BasicContainer()
{

}

etsi_its_cam_msgs::msg::BasicContainer::BasicContainer(
        const BasicContainer& x)
{
    m_station_type = x.m_station_type;
    m_reference_position = x.m_reference_position;
}

etsi_its_cam_msgs::msg::BasicContainer::BasicContainer(
        BasicContainer&& x)
{
    m_station_type = std::move(x.m_station_type);
    m_reference_position = std::move(x.m_reference_position);
}

etsi_its_cam_msgs::msg::BasicContainer& etsi_its_cam_msgs::msg::BasicContainer::operator =(
        const BasicContainer& x)
{

    m_station_type = x.m_station_type;
    m_reference_position = x.m_reference_position;

    return *this;
}

etsi_its_cam_msgs::msg::BasicContainer& etsi_its_cam_msgs::msg::BasicContainer::operator =(
        BasicContainer&& x)
{

    m_station_type = std::move(x.m_station_type);
    m_reference_position = std::move(x.m_reference_position);

    return *this;
}

bool etsi_its_cam_msgs::msg::BasicContainer::operator ==(
        const BasicContainer& x) const
{

    return (m_station_type == x.m_station_type && m_reference_position == x.m_reference_position);
}

bool etsi_its_cam_msgs::msg::BasicContainer::operator !=(
        const BasicContainer& x) const
{
    return !(*this == x);
}

size_t etsi_its_cam_msgs::msg::BasicContainer::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += etsi_its_cam_msgs::msg::StationType::getMaxCdrSerializedSize(current_alignment);
    current_alignment += etsi_its_cam_msgs::msg::ReferencePosition::getMaxCdrSerializedSize(current_alignment);

    return current_alignment - initial_alignment;
}

size_t etsi_its_cam_msgs::msg::BasicContainer::getCdrSerializedSize(
        const etsi_its_cam_msgs::msg::BasicContainer& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += etsi_its_cam_msgs::msg::StationType::getCdrSerializedSize(data.station_type(), current_alignment);
    current_alignment += etsi_its_cam_msgs::msg::ReferencePosition::getCdrSerializedSize(data.reference_position(), current_alignment);

    return current_alignment - initial_alignment;
}

void etsi_its_cam_msgs::msg::BasicContainer::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_station_type;
    scdr << m_reference_position;

}

void etsi_its_cam_msgs::msg::BasicContainer::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_station_type;
    dcdr >> m_reference_position;
}

/*!
 * @brief This function copies the value in member station_type
 * @param _station_type New value to be copied in member station_type
 */
void etsi_its_cam_msgs::msg::BasicContainer::station_type(
        const etsi_its_cam_msgs::msg::StationType& _station_type)
{
    m_station_type = _station_type;
}

/*!
 * @brief This function moves the value in member station_type
 * @param _station_type New value to be moved in member station_type
 */
void etsi_its_cam_msgs::msg::BasicContainer::station_type(
        etsi_its_cam_msgs::msg::StationType&& _station_type)
{
    m_station_type = std::move(_station_type);
}

/*!
 * @brief This function returns a constant reference to member station_type
 * @return Constant reference to member station_type
 */
const etsi_its_cam_msgs::msg::StationType& etsi_its_cam_msgs::msg::BasicContainer::station_type() const
{
    return m_station_type;
}

/*!
 * @brief This function returns a reference to member station_type
 * @return Reference to member station_type
 */
etsi_its_cam_msgs::msg::StationType& etsi_its_cam_msgs::msg::BasicContainer::station_type()
{
    return m_station_type;
}
/*!
 * @brief This function copies the value in member reference_position
 * @param _reference_position New value to be copied in member reference_position
 */
void etsi_its_cam_msgs::msg::BasicContainer::reference_position(
        const etsi_its_cam_msgs::msg::ReferencePosition& _reference_position)
{
    m_reference_position = _reference_position;
}

/*!
 * @brief This function moves the value in member reference_position
 * @param _reference_position New value to be moved in member reference_position
 */
void etsi_its_cam_msgs::msg::BasicContainer::reference_position(
        etsi_its_cam_msgs::msg::ReferencePosition&& _reference_position)
{
    m_reference_position = std::move(_reference_position);
}

/*!
 * @brief This function returns a constant reference to member reference_position
 * @return Constant reference to member reference_position
 */
const etsi_its_cam_msgs::msg::ReferencePosition& etsi_its_cam_msgs::msg::BasicContainer::reference_position() const
{
    return m_reference_position;
}

/*!
 * @brief This function returns a reference to member reference_position
 * @return Reference to member reference_position
 */
etsi_its_cam_msgs::msg::ReferencePosition& etsi_its_cam_msgs::msg::BasicContainer::reference_position()
{
    return m_reference_position;
}

size_t etsi_its_cam_msgs::msg::BasicContainer::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;



    return current_align;
}

bool etsi_its_cam_msgs::msg::BasicContainer::isKeyDefined()
{
    return false;
}

void etsi_its_cam_msgs::msg::BasicContainer::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
      
}


