// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file DeltaReferencePosition.cpp
 * This source file contains the implementation of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "DeltaReferencePosition.h"

#include <fastcdr/Cdr.h>


#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>


namespace etsi_its_cam_msgs {

namespace msg {



DeltaReferencePosition::DeltaReferencePosition()
{
}

DeltaReferencePosition::~DeltaReferencePosition()
{
}

DeltaReferencePosition::DeltaReferencePosition(
        const DeltaReferencePosition& x)
{
    m_delta_latitude = x.m_delta_latitude;
    m_delta_longitude = x.m_delta_longitude;
    m_delta_altitude = x.m_delta_altitude;
}

DeltaReferencePosition::DeltaReferencePosition(
        DeltaReferencePosition&& x) noexcept
{
    m_delta_latitude = std::move(x.m_delta_latitude);
    m_delta_longitude = std::move(x.m_delta_longitude);
    m_delta_altitude = std::move(x.m_delta_altitude);
}

DeltaReferencePosition& DeltaReferencePosition::operator =(
        const DeltaReferencePosition& x)
{

    m_delta_latitude = x.m_delta_latitude;
    m_delta_longitude = x.m_delta_longitude;
    m_delta_altitude = x.m_delta_altitude;
    return *this;
}

DeltaReferencePosition& DeltaReferencePosition::operator =(
        DeltaReferencePosition&& x) noexcept
{

    m_delta_latitude = std::move(x.m_delta_latitude);
    m_delta_longitude = std::move(x.m_delta_longitude);
    m_delta_altitude = std::move(x.m_delta_altitude);
    return *this;
}

bool DeltaReferencePosition::operator ==(
        const DeltaReferencePosition& x) const
{
    return (m_delta_latitude == x.m_delta_latitude &&
           m_delta_longitude == x.m_delta_longitude &&
           m_delta_altitude == x.m_delta_altitude);
}

bool DeltaReferencePosition::operator !=(
        const DeltaReferencePosition& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member delta_latitude
 * @param _delta_latitude New value to be copied in member delta_latitude
 */
void DeltaReferencePosition::delta_latitude(
        const etsi_its_cam_msgs::msg::DeltaLatitude& _delta_latitude)
{
    m_delta_latitude = _delta_latitude;
}

/*!
 * @brief This function moves the value in member delta_latitude
 * @param _delta_latitude New value to be moved in member delta_latitude
 */
void DeltaReferencePosition::delta_latitude(
        etsi_its_cam_msgs::msg::DeltaLatitude&& _delta_latitude)
{
    m_delta_latitude = std::move(_delta_latitude);
}

/*!
 * @brief This function returns a constant reference to member delta_latitude
 * @return Constant reference to member delta_latitude
 */
const etsi_its_cam_msgs::msg::DeltaLatitude& DeltaReferencePosition::delta_latitude() const
{
    return m_delta_latitude;
}

/*!
 * @brief This function returns a reference to member delta_latitude
 * @return Reference to member delta_latitude
 */
etsi_its_cam_msgs::msg::DeltaLatitude& DeltaReferencePosition::delta_latitude()
{
    return m_delta_latitude;
}


/*!
 * @brief This function copies the value in member delta_longitude
 * @param _delta_longitude New value to be copied in member delta_longitude
 */
void DeltaReferencePosition::delta_longitude(
        const etsi_its_cam_msgs::msg::DeltaLongitude& _delta_longitude)
{
    m_delta_longitude = _delta_longitude;
}

/*!
 * @brief This function moves the value in member delta_longitude
 * @param _delta_longitude New value to be moved in member delta_longitude
 */
void DeltaReferencePosition::delta_longitude(
        etsi_its_cam_msgs::msg::DeltaLongitude&& _delta_longitude)
{
    m_delta_longitude = std::move(_delta_longitude);
}

/*!
 * @brief This function returns a constant reference to member delta_longitude
 * @return Constant reference to member delta_longitude
 */
const etsi_its_cam_msgs::msg::DeltaLongitude& DeltaReferencePosition::delta_longitude() const
{
    return m_delta_longitude;
}

/*!
 * @brief This function returns a reference to member delta_longitude
 * @return Reference to member delta_longitude
 */
etsi_its_cam_msgs::msg::DeltaLongitude& DeltaReferencePosition::delta_longitude()
{
    return m_delta_longitude;
}


/*!
 * @brief This function copies the value in member delta_altitude
 * @param _delta_altitude New value to be copied in member delta_altitude
 */
void DeltaReferencePosition::delta_altitude(
        const etsi_its_cam_msgs::msg::DeltaAltitude& _delta_altitude)
{
    m_delta_altitude = _delta_altitude;
}

/*!
 * @brief This function moves the value in member delta_altitude
 * @param _delta_altitude New value to be moved in member delta_altitude
 */
void DeltaReferencePosition::delta_altitude(
        etsi_its_cam_msgs::msg::DeltaAltitude&& _delta_altitude)
{
    m_delta_altitude = std::move(_delta_altitude);
}

/*!
 * @brief This function returns a constant reference to member delta_altitude
 * @return Constant reference to member delta_altitude
 */
const etsi_its_cam_msgs::msg::DeltaAltitude& DeltaReferencePosition::delta_altitude() const
{
    return m_delta_altitude;
}

/*!
 * @brief This function returns a reference to member delta_altitude
 * @return Reference to member delta_altitude
 */
etsi_its_cam_msgs::msg::DeltaAltitude& DeltaReferencePosition::delta_altitude()
{
    return m_delta_altitude;
}




} // namespace msg


} // namespace etsi_its_cam_msgs
// Include auxiliary functions like for serializing/deserializing.
#include "DeltaReferencePositionCdrAux.ipp"

