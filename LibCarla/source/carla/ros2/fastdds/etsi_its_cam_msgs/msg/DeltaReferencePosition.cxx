// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file DeltaReferencePosition.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "DeltaReferencePosition.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

etsi_its_cam_msgs::msg::DeltaReferencePosition::DeltaReferencePosition()
{
    // m_delta_latitude com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@42deb43a

    // m_delta_longitude com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@1deb2c43

    // m_delta_altitude com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@3bb9efbc


}

etsi_its_cam_msgs::msg::DeltaReferencePosition::~DeltaReferencePosition()
{


}

etsi_its_cam_msgs::msg::DeltaReferencePosition::DeltaReferencePosition(
        const DeltaReferencePosition& x)
{
    m_delta_latitude = x.m_delta_latitude;
    m_delta_longitude = x.m_delta_longitude;
    m_delta_altitude = x.m_delta_altitude;
}

etsi_its_cam_msgs::msg::DeltaReferencePosition::DeltaReferencePosition(
        DeltaReferencePosition&& x)
{
    m_delta_latitude = std::move(x.m_delta_latitude);
    m_delta_longitude = std::move(x.m_delta_longitude);
    m_delta_altitude = std::move(x.m_delta_altitude);
}

etsi_its_cam_msgs::msg::DeltaReferencePosition& etsi_its_cam_msgs::msg::DeltaReferencePosition::operator =(
        const DeltaReferencePosition& x)
{

    m_delta_latitude = x.m_delta_latitude;
    m_delta_longitude = x.m_delta_longitude;
    m_delta_altitude = x.m_delta_altitude;

    return *this;
}

etsi_its_cam_msgs::msg::DeltaReferencePosition& etsi_its_cam_msgs::msg::DeltaReferencePosition::operator =(
        DeltaReferencePosition&& x)
{

    m_delta_latitude = std::move(x.m_delta_latitude);
    m_delta_longitude = std::move(x.m_delta_longitude);
    m_delta_altitude = std::move(x.m_delta_altitude);

    return *this;
}

bool etsi_its_cam_msgs::msg::DeltaReferencePosition::operator ==(
        const DeltaReferencePosition& x) const
{

    return (m_delta_latitude == x.m_delta_latitude && m_delta_longitude == x.m_delta_longitude && m_delta_altitude == x.m_delta_altitude);
}

bool etsi_its_cam_msgs::msg::DeltaReferencePosition::operator !=(
        const DeltaReferencePosition& x) const
{
    return !(*this == x);
}

size_t etsi_its_cam_msgs::msg::DeltaReferencePosition::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += etsi_its_cam_msgs::msg::DeltaLatitude::getMaxCdrSerializedSize(current_alignment);
    current_alignment += etsi_its_cam_msgs::msg::DeltaLongitude::getMaxCdrSerializedSize(current_alignment);
    current_alignment += etsi_its_cam_msgs::msg::DeltaAltitude::getMaxCdrSerializedSize(current_alignment);

    return current_alignment - initial_alignment;
}

size_t etsi_its_cam_msgs::msg::DeltaReferencePosition::getCdrSerializedSize(
        const etsi_its_cam_msgs::msg::DeltaReferencePosition& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += etsi_its_cam_msgs::msg::DeltaLatitude::getCdrSerializedSize(data.delta_latitude(), current_alignment);
    current_alignment += etsi_its_cam_msgs::msg::DeltaLongitude::getCdrSerializedSize(data.delta_longitude(), current_alignment);
    current_alignment += etsi_its_cam_msgs::msg::DeltaAltitude::getCdrSerializedSize(data.delta_altitude(), current_alignment);

    return current_alignment - initial_alignment;
}

void etsi_its_cam_msgs::msg::DeltaReferencePosition::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_delta_latitude;
    scdr << m_delta_longitude;
    scdr << m_delta_altitude;

}

void etsi_its_cam_msgs::msg::DeltaReferencePosition::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_delta_latitude;
    dcdr >> m_delta_longitude;
    dcdr >> m_delta_altitude;
}

/*!
 * @brief This function copies the value in member delta_latitude
 * @param _delta_latitude New value to be copied in member delta_latitude
 */
void etsi_its_cam_msgs::msg::DeltaReferencePosition::delta_latitude(
        const etsi_its_cam_msgs::msg::DeltaLatitude& _delta_latitude)
{
    m_delta_latitude = _delta_latitude;
}

/*!
 * @brief This function moves the value in member delta_latitude
 * @param _delta_latitude New value to be moved in member delta_latitude
 */
void etsi_its_cam_msgs::msg::DeltaReferencePosition::delta_latitude(
        etsi_its_cam_msgs::msg::DeltaLatitude&& _delta_latitude)
{
    m_delta_latitude = std::move(_delta_latitude);
}

/*!
 * @brief This function returns a constant reference to member delta_latitude
 * @return Constant reference to member delta_latitude
 */
const etsi_its_cam_msgs::msg::DeltaLatitude& etsi_its_cam_msgs::msg::DeltaReferencePosition::delta_latitude() const
{
    return m_delta_latitude;
}

/*!
 * @brief This function returns a reference to member delta_latitude
 * @return Reference to member delta_latitude
 */
etsi_its_cam_msgs::msg::DeltaLatitude& etsi_its_cam_msgs::msg::DeltaReferencePosition::delta_latitude()
{
    return m_delta_latitude;
}
/*!
 * @brief This function copies the value in member delta_longitude
 * @param _delta_longitude New value to be copied in member delta_longitude
 */
void etsi_its_cam_msgs::msg::DeltaReferencePosition::delta_longitude(
        const etsi_its_cam_msgs::msg::DeltaLongitude& _delta_longitude)
{
    m_delta_longitude = _delta_longitude;
}

/*!
 * @brief This function moves the value in member delta_longitude
 * @param _delta_longitude New value to be moved in member delta_longitude
 */
void etsi_its_cam_msgs::msg::DeltaReferencePosition::delta_longitude(
        etsi_its_cam_msgs::msg::DeltaLongitude&& _delta_longitude)
{
    m_delta_longitude = std::move(_delta_longitude);
}

/*!
 * @brief This function returns a constant reference to member delta_longitude
 * @return Constant reference to member delta_longitude
 */
const etsi_its_cam_msgs::msg::DeltaLongitude& etsi_its_cam_msgs::msg::DeltaReferencePosition::delta_longitude() const
{
    return m_delta_longitude;
}

/*!
 * @brief This function returns a reference to member delta_longitude
 * @return Reference to member delta_longitude
 */
etsi_its_cam_msgs::msg::DeltaLongitude& etsi_its_cam_msgs::msg::DeltaReferencePosition::delta_longitude()
{
    return m_delta_longitude;
}
/*!
 * @brief This function copies the value in member delta_altitude
 * @param _delta_altitude New value to be copied in member delta_altitude
 */
void etsi_its_cam_msgs::msg::DeltaReferencePosition::delta_altitude(
        const etsi_its_cam_msgs::msg::DeltaAltitude& _delta_altitude)
{
    m_delta_altitude = _delta_altitude;
}

/*!
 * @brief This function moves the value in member delta_altitude
 * @param _delta_altitude New value to be moved in member delta_altitude
 */
void etsi_its_cam_msgs::msg::DeltaReferencePosition::delta_altitude(
        etsi_its_cam_msgs::msg::DeltaAltitude&& _delta_altitude)
{
    m_delta_altitude = std::move(_delta_altitude);
}

/*!
 * @brief This function returns a constant reference to member delta_altitude
 * @return Constant reference to member delta_altitude
 */
const etsi_its_cam_msgs::msg::DeltaAltitude& etsi_its_cam_msgs::msg::DeltaReferencePosition::delta_altitude() const
{
    return m_delta_altitude;
}

/*!
 * @brief This function returns a reference to member delta_altitude
 * @return Reference to member delta_altitude
 */
etsi_its_cam_msgs::msg::DeltaAltitude& etsi_its_cam_msgs::msg::DeltaReferencePosition::delta_altitude()
{
    return m_delta_altitude;
}

size_t etsi_its_cam_msgs::msg::DeltaReferencePosition::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;



    return current_align;
}

bool etsi_its_cam_msgs::msg::DeltaReferencePosition::isKeyDefined()
{
    return false;
}

void etsi_its_cam_msgs::msg::DeltaReferencePosition::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
       
}


