// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file ItsPduHeader.cpp
 * This source file contains the implementation of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "ItsPduHeader.h"

#include <fastcdr/Cdr.h>


#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>


namespace etsi_its_cam_msgs {

namespace msg {

namespace ItsPduHeader_Constants {


} // namespace ItsPduHeader_Constants


ItsPduHeader::ItsPduHeader()
{
}

ItsPduHeader::~ItsPduHeader()
{
}

ItsPduHeader::ItsPduHeader(
        const ItsPduHeader& x)
{
    m_protocol_version = x.m_protocol_version;
    m_message_id = x.m_message_id;
    m_station_id = x.m_station_id;
}

ItsPduHeader::ItsPduHeader(
        ItsPduHeader&& x) noexcept
{
    m_protocol_version = x.m_protocol_version;
    m_message_id = x.m_message_id;
    m_station_id = std::move(x.m_station_id);
}

ItsPduHeader& ItsPduHeader::operator =(
        const ItsPduHeader& x)
{

    m_protocol_version = x.m_protocol_version;
    m_message_id = x.m_message_id;
    m_station_id = x.m_station_id;
    return *this;
}

ItsPduHeader& ItsPduHeader::operator =(
        ItsPduHeader&& x) noexcept
{

    m_protocol_version = x.m_protocol_version;
    m_message_id = x.m_message_id;
    m_station_id = std::move(x.m_station_id);
    return *this;
}

bool ItsPduHeader::operator ==(
        const ItsPduHeader& x) const
{
    return (m_protocol_version == x.m_protocol_version &&
           m_message_id == x.m_message_id &&
           m_station_id == x.m_station_id);
}

bool ItsPduHeader::operator !=(
        const ItsPduHeader& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function sets a value in member protocol_version
 * @param _protocol_version New value for member protocol_version
 */
void ItsPduHeader::protocol_version(
        uint8_t _protocol_version)
{
    m_protocol_version = _protocol_version;
}

/*!
 * @brief This function returns the value of member protocol_version
 * @return Value of member protocol_version
 */
uint8_t ItsPduHeader::protocol_version() const
{
    return m_protocol_version;
}

/*!
 * @brief This function returns a reference to member protocol_version
 * @return Reference to member protocol_version
 */
uint8_t& ItsPduHeader::protocol_version()
{
    return m_protocol_version;
}


/*!
 * @brief This function sets a value in member message_id
 * @param _message_id New value for member message_id
 */
void ItsPduHeader::message_id(
        uint8_t _message_id)
{
    m_message_id = _message_id;
}

/*!
 * @brief This function returns the value of member message_id
 * @return Value of member message_id
 */
uint8_t ItsPduHeader::message_id() const
{
    return m_message_id;
}

/*!
 * @brief This function returns a reference to member message_id
 * @return Reference to member message_id
 */
uint8_t& ItsPduHeader::message_id()
{
    return m_message_id;
}


/*!
 * @brief This function copies the value in member station_id
 * @param _station_id New value to be copied in member station_id
 */
void ItsPduHeader::station_id(
        const etsi_its_cam_msgs::msg::StationID& _station_id)
{
    m_station_id = _station_id;
}

/*!
 * @brief This function moves the value in member station_id
 * @param _station_id New value to be moved in member station_id
 */
void ItsPduHeader::station_id(
        etsi_its_cam_msgs::msg::StationID&& _station_id)
{
    m_station_id = std::move(_station_id);
}

/*!
 * @brief This function returns a constant reference to member station_id
 * @return Constant reference to member station_id
 */
const etsi_its_cam_msgs::msg::StationID& ItsPduHeader::station_id() const
{
    return m_station_id;
}

/*!
 * @brief This function returns a reference to member station_id
 * @return Reference to member station_id
 */
etsi_its_cam_msgs::msg::StationID& ItsPduHeader::station_id()
{
    return m_station_id;
}




} // namespace msg


} // namespace etsi_its_cam_msgs
// Include auxiliary functions like for serializing/deserializing.
#include "ItsPduHeaderCdrAux.ipp"

