// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file ItsPduHeader.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "ItsPduHeader.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>



















etsi_its_cam_msgs::msg::ItsPduHeader::ItsPduHeader()
{
    // m_protocol_version com.eprosima.idl.parser.typecode.PrimitiveTypeCode@4278a03f
    m_protocol_version = 0;
    // m_message_id com.eprosima.idl.parser.typecode.PrimitiveTypeCode@124c278f
    m_message_id = 0;
    // m_station_id com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@15b204a1


}

etsi_its_cam_msgs::msg::ItsPduHeader::~ItsPduHeader()
{


}

etsi_its_cam_msgs::msg::ItsPduHeader::ItsPduHeader(
        const ItsPduHeader& x)
{
    m_protocol_version = x.m_protocol_version;
    m_message_id = x.m_message_id;
    m_station_id = x.m_station_id;
}

etsi_its_cam_msgs::msg::ItsPduHeader::ItsPduHeader(
        ItsPduHeader&& x)
{
    m_protocol_version = x.m_protocol_version;
    m_message_id = x.m_message_id;
    m_station_id = std::move(x.m_station_id);
}

etsi_its_cam_msgs::msg::ItsPduHeader& etsi_its_cam_msgs::msg::ItsPduHeader::operator =(
        const ItsPduHeader& x)
{

    m_protocol_version = x.m_protocol_version;
    m_message_id = x.m_message_id;
    m_station_id = x.m_station_id;

    return *this;
}

etsi_its_cam_msgs::msg::ItsPduHeader& etsi_its_cam_msgs::msg::ItsPduHeader::operator =(
        ItsPduHeader&& x)
{

    m_protocol_version = x.m_protocol_version;
    m_message_id = x.m_message_id;
    m_station_id = std::move(x.m_station_id);

    return *this;
}

bool etsi_its_cam_msgs::msg::ItsPduHeader::operator ==(
        const ItsPduHeader& x) const
{

    return (m_protocol_version == x.m_protocol_version && m_message_id == x.m_message_id && m_station_id == x.m_station_id);
}

bool etsi_its_cam_msgs::msg::ItsPduHeader::operator !=(
        const ItsPduHeader& x) const
{
    return !(*this == x);
}

size_t etsi_its_cam_msgs::msg::ItsPduHeader::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += etsi_its_cam_msgs::msg::StationID::getMaxCdrSerializedSize(current_alignment);

    return current_alignment - initial_alignment;
}

size_t etsi_its_cam_msgs::msg::ItsPduHeader::getCdrSerializedSize(
        const etsi_its_cam_msgs::msg::ItsPduHeader& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += etsi_its_cam_msgs::msg::StationID::getCdrSerializedSize(data.station_id(), current_alignment);

    return current_alignment - initial_alignment;
}

void etsi_its_cam_msgs::msg::ItsPduHeader::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_protocol_version;
    scdr << m_message_id;
    scdr << m_station_id;

}

void etsi_its_cam_msgs::msg::ItsPduHeader::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_protocol_version;
    dcdr >> m_message_id;
    dcdr >> m_station_id;
}

/*!
 * @brief This function sets a value in member protocol_version
 * @param _protocol_version New value for member protocol_version
 */
void etsi_its_cam_msgs::msg::ItsPduHeader::protocol_version(
        uint8_t _protocol_version)
{
    m_protocol_version = _protocol_version;
}

/*!
 * @brief This function returns the value of member protocol_version
 * @return Value of member protocol_version
 */
uint8_t etsi_its_cam_msgs::msg::ItsPduHeader::protocol_version() const
{
    return m_protocol_version;
}

/*!
 * @brief This function returns a reference to member protocol_version
 * @return Reference to member protocol_version
 */
uint8_t& etsi_its_cam_msgs::msg::ItsPduHeader::protocol_version()
{
    return m_protocol_version;
}

/*!
 * @brief This function sets a value in member message_id
 * @param _message_id New value for member message_id
 */
void etsi_its_cam_msgs::msg::ItsPduHeader::message_id(
        uint8_t _message_id)
{
    m_message_id = _message_id;
}

/*!
 * @brief This function returns the value of member message_id
 * @return Value of member message_id
 */
uint8_t etsi_its_cam_msgs::msg::ItsPduHeader::message_id() const
{
    return m_message_id;
}

/*!
 * @brief This function returns a reference to member message_id
 * @return Reference to member message_id
 */
uint8_t& etsi_its_cam_msgs::msg::ItsPduHeader::message_id()
{
    return m_message_id;
}

/*!
 * @brief This function copies the value in member station_id
 * @param _station_id New value to be copied in member station_id
 */
void etsi_its_cam_msgs::msg::ItsPduHeader::station_id(
        const etsi_its_cam_msgs::msg::StationID& _station_id)
{
    m_station_id = _station_id;
}

/*!
 * @brief This function moves the value in member station_id
 * @param _station_id New value to be moved in member station_id
 */
void etsi_its_cam_msgs::msg::ItsPduHeader::station_id(
        etsi_its_cam_msgs::msg::StationID&& _station_id)
{
    m_station_id = std::move(_station_id);
}

/*!
 * @brief This function returns a constant reference to member station_id
 * @return Constant reference to member station_id
 */
const etsi_its_cam_msgs::msg::StationID& etsi_its_cam_msgs::msg::ItsPduHeader::station_id() const
{
    return m_station_id;
}

/*!
 * @brief This function returns a reference to member station_id
 * @return Reference to member station_id
 */
etsi_its_cam_msgs::msg::StationID& etsi_its_cam_msgs::msg::ItsPduHeader::station_id()
{
    return m_station_id;
}

size_t etsi_its_cam_msgs::msg::ItsPduHeader::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;



    return current_align;
}

bool etsi_its_cam_msgs::msg::ItsPduHeader::isKeyDefined()
{
    return false;
}

void etsi_its_cam_msgs::msg::ItsPduHeader::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
       
}


