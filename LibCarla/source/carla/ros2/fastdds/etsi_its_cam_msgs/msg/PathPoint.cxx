// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file PathPoint.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "PathPoint.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

etsi_its_cam_msgs::msg::PathPoint::PathPoint()
{
    // m_path_position com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@5167268

    // m_path_delta_time com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@1cfd1875

    // m_path_delta_time_is_present com.eprosima.idl.parser.typecode.PrimitiveTypeCode@28c0b664
    m_path_delta_time_is_present = false;

}

etsi_its_cam_msgs::msg::PathPoint::~PathPoint()
{


}

etsi_its_cam_msgs::msg::PathPoint::PathPoint(
        const PathPoint& x)
{
    m_path_position = x.m_path_position;
    m_path_delta_time = x.m_path_delta_time;
    m_path_delta_time_is_present = x.m_path_delta_time_is_present;
}

etsi_its_cam_msgs::msg::PathPoint::PathPoint(
        PathPoint&& x)
{
    m_path_position = std::move(x.m_path_position);
    m_path_delta_time = std::move(x.m_path_delta_time);
    m_path_delta_time_is_present = x.m_path_delta_time_is_present;
}

etsi_its_cam_msgs::msg::PathPoint& etsi_its_cam_msgs::msg::PathPoint::operator =(
        const PathPoint& x)
{

    m_path_position = x.m_path_position;
    m_path_delta_time = x.m_path_delta_time;
    m_path_delta_time_is_present = x.m_path_delta_time_is_present;

    return *this;
}

etsi_its_cam_msgs::msg::PathPoint& etsi_its_cam_msgs::msg::PathPoint::operator =(
        PathPoint&& x)
{

    m_path_position = std::move(x.m_path_position);
    m_path_delta_time = std::move(x.m_path_delta_time);
    m_path_delta_time_is_present = x.m_path_delta_time_is_present;

    return *this;
}

bool etsi_its_cam_msgs::msg::PathPoint::operator ==(
        const PathPoint& x) const
{

    return (m_path_position == x.m_path_position && m_path_delta_time == x.m_path_delta_time && m_path_delta_time_is_present == x.m_path_delta_time_is_present);
}

bool etsi_its_cam_msgs::msg::PathPoint::operator !=(
        const PathPoint& x) const
{
    return !(*this == x);
}

size_t etsi_its_cam_msgs::msg::PathPoint::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += etsi_its_cam_msgs::msg::DeltaReferencePosition::getMaxCdrSerializedSize(current_alignment);
    current_alignment += etsi_its_cam_msgs::msg::PathDeltaTime::getMaxCdrSerializedSize(current_alignment);
    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}

size_t etsi_its_cam_msgs::msg::PathPoint::getCdrSerializedSize(
        const etsi_its_cam_msgs::msg::PathPoint& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += etsi_its_cam_msgs::msg::DeltaReferencePosition::getCdrSerializedSize(data.path_position(), current_alignment);
    current_alignment += etsi_its_cam_msgs::msg::PathDeltaTime::getCdrSerializedSize(data.path_delta_time(), current_alignment);
    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}

void etsi_its_cam_msgs::msg::PathPoint::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_path_position;
    scdr << m_path_delta_time;
    scdr << m_path_delta_time_is_present;

}

void etsi_its_cam_msgs::msg::PathPoint::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_path_position;
    dcdr >> m_path_delta_time;
    dcdr >> m_path_delta_time_is_present;
}

/*!
 * @brief This function copies the value in member path_position
 * @param _path_position New value to be copied in member path_position
 */
void etsi_its_cam_msgs::msg::PathPoint::path_position(
        const etsi_its_cam_msgs::msg::DeltaReferencePosition& _path_position)
{
    m_path_position = _path_position;
}

/*!
 * @brief This function moves the value in member path_position
 * @param _path_position New value to be moved in member path_position
 */
void etsi_its_cam_msgs::msg::PathPoint::path_position(
        etsi_its_cam_msgs::msg::DeltaReferencePosition&& _path_position)
{
    m_path_position = std::move(_path_position);
}

/*!
 * @brief This function returns a constant reference to member path_position
 * @return Constant reference to member path_position
 */
const etsi_its_cam_msgs::msg::DeltaReferencePosition& etsi_its_cam_msgs::msg::PathPoint::path_position() const
{
    return m_path_position;
}

/*!
 * @brief This function returns a reference to member path_position
 * @return Reference to member path_position
 */
etsi_its_cam_msgs::msg::DeltaReferencePosition& etsi_its_cam_msgs::msg::PathPoint::path_position()
{
    return m_path_position;
}
/*!
 * @brief This function copies the value in member path_delta_time
 * @param _path_delta_time New value to be copied in member path_delta_time
 */
void etsi_its_cam_msgs::msg::PathPoint::path_delta_time(
        const etsi_its_cam_msgs::msg::PathDeltaTime& _path_delta_time)
{
    m_path_delta_time = _path_delta_time;
}

/*!
 * @brief This function moves the value in member path_delta_time
 * @param _path_delta_time New value to be moved in member path_delta_time
 */
void etsi_its_cam_msgs::msg::PathPoint::path_delta_time(
        etsi_its_cam_msgs::msg::PathDeltaTime&& _path_delta_time)
{
    m_path_delta_time = std::move(_path_delta_time);
}

/*!
 * @brief This function returns a constant reference to member path_delta_time
 * @return Constant reference to member path_delta_time
 */
const etsi_its_cam_msgs::msg::PathDeltaTime& etsi_its_cam_msgs::msg::PathPoint::path_delta_time() const
{
    return m_path_delta_time;
}

/*!
 * @brief This function returns a reference to member path_delta_time
 * @return Reference to member path_delta_time
 */
etsi_its_cam_msgs::msg::PathDeltaTime& etsi_its_cam_msgs::msg::PathPoint::path_delta_time()
{
    return m_path_delta_time;
}
/*!
 * @brief This function sets a value in member path_delta_time_is_present
 * @param _path_delta_time_is_present New value for member path_delta_time_is_present
 */
void etsi_its_cam_msgs::msg::PathPoint::path_delta_time_is_present(
        bool _path_delta_time_is_present)
{
    m_path_delta_time_is_present = _path_delta_time_is_present;
}

/*!
 * @brief This function returns the value of member path_delta_time_is_present
 * @return Value of member path_delta_time_is_present
 */
bool etsi_its_cam_msgs::msg::PathPoint::path_delta_time_is_present() const
{
    return m_path_delta_time_is_present;
}

/*!
 * @brief This function returns a reference to member path_delta_time_is_present
 * @return Reference to member path_delta_time_is_present
 */
bool& etsi_its_cam_msgs::msg::PathPoint::path_delta_time_is_present()
{
    return m_path_delta_time_is_present;
}


size_t etsi_its_cam_msgs::msg::PathPoint::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;



    return current_align;
}

bool etsi_its_cam_msgs::msg::PathPoint::isKeyDefined()
{
    return false;
}

void etsi_its_cam_msgs::msg::PathPoint::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
       
}


