// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file PathPoint.cpp
 * This source file contains the implementation of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "PathPoint.h"

#include <fastcdr/Cdr.h>


#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>


namespace etsi_its_cam_msgs {

namespace msg {



PathPoint::PathPoint()
{
}

PathPoint::~PathPoint()
{
}

PathPoint::PathPoint(
        const PathPoint& x)
{
    m_path_position = x.m_path_position;
    m_path_delta_time = x.m_path_delta_time;
    m_path_delta_time_is_present = x.m_path_delta_time_is_present;
}

PathPoint::PathPoint(
        PathPoint&& x) noexcept
{
    m_path_position = std::move(x.m_path_position);
    m_path_delta_time = std::move(x.m_path_delta_time);
    m_path_delta_time_is_present = x.m_path_delta_time_is_present;
}

PathPoint& PathPoint::operator =(
        const PathPoint& x)
{

    m_path_position = x.m_path_position;
    m_path_delta_time = x.m_path_delta_time;
    m_path_delta_time_is_present = x.m_path_delta_time_is_present;
    return *this;
}

PathPoint& PathPoint::operator =(
        PathPoint&& x) noexcept
{

    m_path_position = std::move(x.m_path_position);
    m_path_delta_time = std::move(x.m_path_delta_time);
    m_path_delta_time_is_present = x.m_path_delta_time_is_present;
    return *this;
}

bool PathPoint::operator ==(
        const PathPoint& x) const
{
    return (m_path_position == x.m_path_position &&
           m_path_delta_time == x.m_path_delta_time &&
           m_path_delta_time_is_present == x.m_path_delta_time_is_present);
}

bool PathPoint::operator !=(
        const PathPoint& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member path_position
 * @param _path_position New value to be copied in member path_position
 */
void PathPoint::path_position(
        const etsi_its_cam_msgs::msg::DeltaReferencePosition& _path_position)
{
    m_path_position = _path_position;
}

/*!
 * @brief This function moves the value in member path_position
 * @param _path_position New value to be moved in member path_position
 */
void PathPoint::path_position(
        etsi_its_cam_msgs::msg::DeltaReferencePosition&& _path_position)
{
    m_path_position = std::move(_path_position);
}

/*!
 * @brief This function returns a constant reference to member path_position
 * @return Constant reference to member path_position
 */
const etsi_its_cam_msgs::msg::DeltaReferencePosition& PathPoint::path_position() const
{
    return m_path_position;
}

/*!
 * @brief This function returns a reference to member path_position
 * @return Reference to member path_position
 */
etsi_its_cam_msgs::msg::DeltaReferencePosition& PathPoint::path_position()
{
    return m_path_position;
}


/*!
 * @brief This function copies the value in member path_delta_time
 * @param _path_delta_time New value to be copied in member path_delta_time
 */
void PathPoint::path_delta_time(
        const etsi_its_cam_msgs::msg::PathDeltaTime& _path_delta_time)
{
    m_path_delta_time = _path_delta_time;
}

/*!
 * @brief This function moves the value in member path_delta_time
 * @param _path_delta_time New value to be moved in member path_delta_time
 */
void PathPoint::path_delta_time(
        etsi_its_cam_msgs::msg::PathDeltaTime&& _path_delta_time)
{
    m_path_delta_time = std::move(_path_delta_time);
}

/*!
 * @brief This function returns a constant reference to member path_delta_time
 * @return Constant reference to member path_delta_time
 */
const etsi_its_cam_msgs::msg::PathDeltaTime& PathPoint::path_delta_time() const
{
    return m_path_delta_time;
}

/*!
 * @brief This function returns a reference to member path_delta_time
 * @return Reference to member path_delta_time
 */
etsi_its_cam_msgs::msg::PathDeltaTime& PathPoint::path_delta_time()
{
    return m_path_delta_time;
}


/*!
 * @brief This function sets a value in member path_delta_time_is_present
 * @param _path_delta_time_is_present New value for member path_delta_time_is_present
 */
void PathPoint::path_delta_time_is_present(
        bool _path_delta_time_is_present)
{
    m_path_delta_time_is_present = _path_delta_time_is_present;
}

/*!
 * @brief This function returns the value of member path_delta_time_is_present
 * @return Value of member path_delta_time_is_present
 */
bool PathPoint::path_delta_time_is_present() const
{
    return m_path_delta_time_is_present;
}

/*!
 * @brief This function returns a reference to member path_delta_time_is_present
 * @return Reference to member path_delta_time_is_present
 */
bool& PathPoint::path_delta_time_is_present()
{
    return m_path_delta_time_is_present;
}




} // namespace msg


} // namespace etsi_its_cam_msgs
// Include auxiliary functions like for serializing/deserializing.
#include "PathPointCdrAux.ipp"

