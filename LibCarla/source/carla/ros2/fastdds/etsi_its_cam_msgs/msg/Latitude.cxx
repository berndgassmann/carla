// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file Latitude.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "Latitude.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>







etsi_its_cam_msgs::msg::Latitude::Latitude()
{
    // m_value com.eprosima.idl.parser.typecode.PrimitiveTypeCode@62e7dffa
    m_value = 0;

}

etsi_its_cam_msgs::msg::Latitude::~Latitude()
{
}

etsi_its_cam_msgs::msg::Latitude::Latitude(
        const Latitude& x)
{
    m_value = x.m_value;
}

etsi_its_cam_msgs::msg::Latitude::Latitude(
        Latitude&& x)
{
    m_value = x.m_value;
}

etsi_its_cam_msgs::msg::Latitude& etsi_its_cam_msgs::msg::Latitude::operator =(
        const Latitude& x)
{

    m_value = x.m_value;

    return *this;
}

etsi_its_cam_msgs::msg::Latitude& etsi_its_cam_msgs::msg::Latitude::operator =(
        Latitude&& x)
{

    m_value = x.m_value;

    return *this;
}

bool etsi_its_cam_msgs::msg::Latitude::operator ==(
        const Latitude& x) const
{

    return (m_value == x.m_value);
}

bool etsi_its_cam_msgs::msg::Latitude::operator !=(
        const Latitude& x) const
{
    return !(*this == x);
}

size_t etsi_its_cam_msgs::msg::Latitude::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    return current_alignment - initial_alignment;
}

size_t etsi_its_cam_msgs::msg::Latitude::getCdrSerializedSize(
        const etsi_its_cam_msgs::msg::Latitude& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    return current_alignment - initial_alignment;
}

void etsi_its_cam_msgs::msg::Latitude::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_value;

}

void etsi_its_cam_msgs::msg::Latitude::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_value;
}

/*!
 * @brief This function sets a value in member value
 * @param _value New value for member value
 */
void etsi_its_cam_msgs::msg::Latitude::value(
        int32_t _value)
{
    m_value = _value;
}

/*!
 * @brief This function returns the value of member value
 * @return Value of member value
 */
int32_t etsi_its_cam_msgs::msg::Latitude::value() const
{
    return m_value;
}

/*!
 * @brief This function returns a reference to member value
 * @return Reference to member value
 */
int32_t& etsi_its_cam_msgs::msg::Latitude::value()
{
    return m_value;
}


size_t etsi_its_cam_msgs::msg::Latitude::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;



    return current_align;
}

bool etsi_its_cam_msgs::msg::Latitude::isKeyDefined()
{
    return false;
}

void etsi_its_cam_msgs::msg::Latitude::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
     
}


