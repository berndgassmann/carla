// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file LateralAcceleration.cpp
 * This source file contains the implementation of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "LateralAcceleration.h"

#include <fastcdr/Cdr.h>


#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>


namespace etsi_its_cam_msgs {

namespace msg {



LateralAcceleration::LateralAcceleration()
{
}

LateralAcceleration::~LateralAcceleration()
{
}

LateralAcceleration::LateralAcceleration(
        const LateralAcceleration& x)
{
    m_lateral_acceleration_value = x.m_lateral_acceleration_value;
    m_lateral_acceleration_confidence = x.m_lateral_acceleration_confidence;
}

LateralAcceleration::LateralAcceleration(
        LateralAcceleration&& x) noexcept
{
    m_lateral_acceleration_value = std::move(x.m_lateral_acceleration_value);
    m_lateral_acceleration_confidence = std::move(x.m_lateral_acceleration_confidence);
}

LateralAcceleration& LateralAcceleration::operator =(
        const LateralAcceleration& x)
{

    m_lateral_acceleration_value = x.m_lateral_acceleration_value;
    m_lateral_acceleration_confidence = x.m_lateral_acceleration_confidence;
    return *this;
}

LateralAcceleration& LateralAcceleration::operator =(
        LateralAcceleration&& x) noexcept
{

    m_lateral_acceleration_value = std::move(x.m_lateral_acceleration_value);
    m_lateral_acceleration_confidence = std::move(x.m_lateral_acceleration_confidence);
    return *this;
}

bool LateralAcceleration::operator ==(
        const LateralAcceleration& x) const
{
    return (m_lateral_acceleration_value == x.m_lateral_acceleration_value &&
           m_lateral_acceleration_confidence == x.m_lateral_acceleration_confidence);
}

bool LateralAcceleration::operator !=(
        const LateralAcceleration& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member lateral_acceleration_value
 * @param _lateral_acceleration_value New value to be copied in member lateral_acceleration_value
 */
void LateralAcceleration::lateral_acceleration_value(
        const etsi_its_cam_msgs::msg::LateralAccelerationValue& _lateral_acceleration_value)
{
    m_lateral_acceleration_value = _lateral_acceleration_value;
}

/*!
 * @brief This function moves the value in member lateral_acceleration_value
 * @param _lateral_acceleration_value New value to be moved in member lateral_acceleration_value
 */
void LateralAcceleration::lateral_acceleration_value(
        etsi_its_cam_msgs::msg::LateralAccelerationValue&& _lateral_acceleration_value)
{
    m_lateral_acceleration_value = std::move(_lateral_acceleration_value);
}

/*!
 * @brief This function returns a constant reference to member lateral_acceleration_value
 * @return Constant reference to member lateral_acceleration_value
 */
const etsi_its_cam_msgs::msg::LateralAccelerationValue& LateralAcceleration::lateral_acceleration_value() const
{
    return m_lateral_acceleration_value;
}

/*!
 * @brief This function returns a reference to member lateral_acceleration_value
 * @return Reference to member lateral_acceleration_value
 */
etsi_its_cam_msgs::msg::LateralAccelerationValue& LateralAcceleration::lateral_acceleration_value()
{
    return m_lateral_acceleration_value;
}


/*!
 * @brief This function copies the value in member lateral_acceleration_confidence
 * @param _lateral_acceleration_confidence New value to be copied in member lateral_acceleration_confidence
 */
void LateralAcceleration::lateral_acceleration_confidence(
        const etsi_its_cam_msgs::msg::AccelerationConfidence& _lateral_acceleration_confidence)
{
    m_lateral_acceleration_confidence = _lateral_acceleration_confidence;
}

/*!
 * @brief This function moves the value in member lateral_acceleration_confidence
 * @param _lateral_acceleration_confidence New value to be moved in member lateral_acceleration_confidence
 */
void LateralAcceleration::lateral_acceleration_confidence(
        etsi_its_cam_msgs::msg::AccelerationConfidence&& _lateral_acceleration_confidence)
{
    m_lateral_acceleration_confidence = std::move(_lateral_acceleration_confidence);
}

/*!
 * @brief This function returns a constant reference to member lateral_acceleration_confidence
 * @return Constant reference to member lateral_acceleration_confidence
 */
const etsi_its_cam_msgs::msg::AccelerationConfidence& LateralAcceleration::lateral_acceleration_confidence() const
{
    return m_lateral_acceleration_confidence;
}

/*!
 * @brief This function returns a reference to member lateral_acceleration_confidence
 * @return Reference to member lateral_acceleration_confidence
 */
etsi_its_cam_msgs::msg::AccelerationConfidence& LateralAcceleration::lateral_acceleration_confidence()
{
    return m_lateral_acceleration_confidence;
}




} // namespace msg


} // namespace etsi_its_cam_msgs
// Include auxiliary functions like for serializing/deserializing.
#include "LateralAccelerationCdrAux.ipp"

