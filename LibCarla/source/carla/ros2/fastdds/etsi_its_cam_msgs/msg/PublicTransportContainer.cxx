// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file PublicTransportContainer.cpp
 * This source file contains the implementation of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "PublicTransportContainer.h"

#include <fastcdr/Cdr.h>


#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>


namespace etsi_its_cam_msgs {

namespace msg {



PublicTransportContainer::PublicTransportContainer()
{
}

PublicTransportContainer::~PublicTransportContainer()
{
}

PublicTransportContainer::PublicTransportContainer(
        const PublicTransportContainer& x)
{
    m_embarkation_status = x.m_embarkation_status;
    m_pt_activation = x.m_pt_activation;
    m_pt_activation_is_present = x.m_pt_activation_is_present;
}

PublicTransportContainer::PublicTransportContainer(
        PublicTransportContainer&& x) noexcept
{
    m_embarkation_status = std::move(x.m_embarkation_status);
    m_pt_activation = std::move(x.m_pt_activation);
    m_pt_activation_is_present = x.m_pt_activation_is_present;
}

PublicTransportContainer& PublicTransportContainer::operator =(
        const PublicTransportContainer& x)
{

    m_embarkation_status = x.m_embarkation_status;
    m_pt_activation = x.m_pt_activation;
    m_pt_activation_is_present = x.m_pt_activation_is_present;
    return *this;
}

PublicTransportContainer& PublicTransportContainer::operator =(
        PublicTransportContainer&& x) noexcept
{

    m_embarkation_status = std::move(x.m_embarkation_status);
    m_pt_activation = std::move(x.m_pt_activation);
    m_pt_activation_is_present = x.m_pt_activation_is_present;
    return *this;
}

bool PublicTransportContainer::operator ==(
        const PublicTransportContainer& x) const
{
    return (m_embarkation_status == x.m_embarkation_status &&
           m_pt_activation == x.m_pt_activation &&
           m_pt_activation_is_present == x.m_pt_activation_is_present);
}

bool PublicTransportContainer::operator !=(
        const PublicTransportContainer& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member embarkation_status
 * @param _embarkation_status New value to be copied in member embarkation_status
 */
void PublicTransportContainer::embarkation_status(
        const etsi_its_cam_msgs::msg::EmbarkationStatus& _embarkation_status)
{
    m_embarkation_status = _embarkation_status;
}

/*!
 * @brief This function moves the value in member embarkation_status
 * @param _embarkation_status New value to be moved in member embarkation_status
 */
void PublicTransportContainer::embarkation_status(
        etsi_its_cam_msgs::msg::EmbarkationStatus&& _embarkation_status)
{
    m_embarkation_status = std::move(_embarkation_status);
}

/*!
 * @brief This function returns a constant reference to member embarkation_status
 * @return Constant reference to member embarkation_status
 */
const etsi_its_cam_msgs::msg::EmbarkationStatus& PublicTransportContainer::embarkation_status() const
{
    return m_embarkation_status;
}

/*!
 * @brief This function returns a reference to member embarkation_status
 * @return Reference to member embarkation_status
 */
etsi_its_cam_msgs::msg::EmbarkationStatus& PublicTransportContainer::embarkation_status()
{
    return m_embarkation_status;
}


/*!
 * @brief This function copies the value in member pt_activation
 * @param _pt_activation New value to be copied in member pt_activation
 */
void PublicTransportContainer::pt_activation(
        const etsi_its_cam_msgs::msg::PtActivation& _pt_activation)
{
    m_pt_activation = _pt_activation;
}

/*!
 * @brief This function moves the value in member pt_activation
 * @param _pt_activation New value to be moved in member pt_activation
 */
void PublicTransportContainer::pt_activation(
        etsi_its_cam_msgs::msg::PtActivation&& _pt_activation)
{
    m_pt_activation = std::move(_pt_activation);
}

/*!
 * @brief This function returns a constant reference to member pt_activation
 * @return Constant reference to member pt_activation
 */
const etsi_its_cam_msgs::msg::PtActivation& PublicTransportContainer::pt_activation() const
{
    return m_pt_activation;
}

/*!
 * @brief This function returns a reference to member pt_activation
 * @return Reference to member pt_activation
 */
etsi_its_cam_msgs::msg::PtActivation& PublicTransportContainer::pt_activation()
{
    return m_pt_activation;
}


/*!
 * @brief This function sets a value in member pt_activation_is_present
 * @param _pt_activation_is_present New value for member pt_activation_is_present
 */
void PublicTransportContainer::pt_activation_is_present(
        bool _pt_activation_is_present)
{
    m_pt_activation_is_present = _pt_activation_is_present;
}

/*!
 * @brief This function returns the value of member pt_activation_is_present
 * @return Value of member pt_activation_is_present
 */
bool PublicTransportContainer::pt_activation_is_present() const
{
    return m_pt_activation_is_present;
}

/*!
 * @brief This function returns a reference to member pt_activation_is_present
 * @return Reference to member pt_activation_is_present
 */
bool& PublicTransportContainer::pt_activation_is_present()
{
    return m_pt_activation_is_present;
}




} // namespace msg


} // namespace etsi_its_cam_msgs
// Include auxiliary functions like for serializing/deserializing.
#include "PublicTransportContainerCdrAux.ipp"

