// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file CoopAwareness.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "CoopAwareness.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

etsi_its_cam_msgs::msg::CoopAwareness::CoopAwareness()
{
    // m_generation_delta_time com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@29e6eb25

    // m_cam_parameters com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@62435e70


}

etsi_its_cam_msgs::msg::CoopAwareness::~CoopAwareness()
{

}

etsi_its_cam_msgs::msg::CoopAwareness::CoopAwareness(
        const CoopAwareness& x)
{
    m_generation_delta_time = x.m_generation_delta_time;
    m_cam_parameters = x.m_cam_parameters;
}

etsi_its_cam_msgs::msg::CoopAwareness::CoopAwareness(
        CoopAwareness&& x)
{
    m_generation_delta_time = std::move(x.m_generation_delta_time);
    m_cam_parameters = std::move(x.m_cam_parameters);
}

etsi_its_cam_msgs::msg::CoopAwareness& etsi_its_cam_msgs::msg::CoopAwareness::operator =(
        const CoopAwareness& x)
{

    m_generation_delta_time = x.m_generation_delta_time;
    m_cam_parameters = x.m_cam_parameters;

    return *this;
}

etsi_its_cam_msgs::msg::CoopAwareness& etsi_its_cam_msgs::msg::CoopAwareness::operator =(
        CoopAwareness&& x)
{

    m_generation_delta_time = std::move(x.m_generation_delta_time);
    m_cam_parameters = std::move(x.m_cam_parameters);

    return *this;
}

bool etsi_its_cam_msgs::msg::CoopAwareness::operator ==(
        const CoopAwareness& x) const
{

    return (m_generation_delta_time == x.m_generation_delta_time && m_cam_parameters == x.m_cam_parameters);
}

bool etsi_its_cam_msgs::msg::CoopAwareness::operator !=(
        const CoopAwareness& x) const
{
    return !(*this == x);
}

size_t etsi_its_cam_msgs::msg::CoopAwareness::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += etsi_its_cam_msgs::msg::GenerationDeltaTime::getMaxCdrSerializedSize(current_alignment);
    current_alignment += etsi_its_cam_msgs::msg::CamParameters::getMaxCdrSerializedSize(current_alignment);

    return current_alignment - initial_alignment;
}

size_t etsi_its_cam_msgs::msg::CoopAwareness::getCdrSerializedSize(
        const etsi_its_cam_msgs::msg::CoopAwareness& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += etsi_its_cam_msgs::msg::GenerationDeltaTime::getCdrSerializedSize(data.generation_delta_time(), current_alignment);
    current_alignment += etsi_its_cam_msgs::msg::CamParameters::getCdrSerializedSize(data.cam_parameters(), current_alignment);

    return current_alignment - initial_alignment;
}

void etsi_its_cam_msgs::msg::CoopAwareness::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_generation_delta_time;
    scdr << m_cam_parameters;

}

void etsi_its_cam_msgs::msg::CoopAwareness::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_generation_delta_time;
    dcdr >> m_cam_parameters;
}

/*!
 * @brief This function copies the value in member generation_delta_time
 * @param _generation_delta_time New value to be copied in member generation_delta_time
 */
void etsi_its_cam_msgs::msg::CoopAwareness::generation_delta_time(
        const etsi_its_cam_msgs::msg::GenerationDeltaTime& _generation_delta_time)
{
    m_generation_delta_time = _generation_delta_time;
}

/*!
 * @brief This function moves the value in member generation_delta_time
 * @param _generation_delta_time New value to be moved in member generation_delta_time
 */
void etsi_its_cam_msgs::msg::CoopAwareness::generation_delta_time(
        etsi_its_cam_msgs::msg::GenerationDeltaTime&& _generation_delta_time)
{
    m_generation_delta_time = std::move(_generation_delta_time);
}

/*!
 * @brief This function returns a constant reference to member generation_delta_time
 * @return Constant reference to member generation_delta_time
 */
const etsi_its_cam_msgs::msg::GenerationDeltaTime& etsi_its_cam_msgs::msg::CoopAwareness::generation_delta_time() const
{
    return m_generation_delta_time;
}

/*!
 * @brief This function returns a reference to member generation_delta_time
 * @return Reference to member generation_delta_time
 */
etsi_its_cam_msgs::msg::GenerationDeltaTime& etsi_its_cam_msgs::msg::CoopAwareness::generation_delta_time()
{
    return m_generation_delta_time;
}
/*!
 * @brief This function copies the value in member cam_parameters
 * @param _cam_parameters New value to be copied in member cam_parameters
 */
void etsi_its_cam_msgs::msg::CoopAwareness::cam_parameters(
        const etsi_its_cam_msgs::msg::CamParameters& _cam_parameters)
{
    m_cam_parameters = _cam_parameters;
}

/*!
 * @brief This function moves the value in member cam_parameters
 * @param _cam_parameters New value to be moved in member cam_parameters
 */
void etsi_its_cam_msgs::msg::CoopAwareness::cam_parameters(
        etsi_its_cam_msgs::msg::CamParameters&& _cam_parameters)
{
    m_cam_parameters = std::move(_cam_parameters);
}

/*!
 * @brief This function returns a constant reference to member cam_parameters
 * @return Constant reference to member cam_parameters
 */
const etsi_its_cam_msgs::msg::CamParameters& etsi_its_cam_msgs::msg::CoopAwareness::cam_parameters() const
{
    return m_cam_parameters;
}

/*!
 * @brief This function returns a reference to member cam_parameters
 * @return Reference to member cam_parameters
 */
etsi_its_cam_msgs::msg::CamParameters& etsi_its_cam_msgs::msg::CoopAwareness::cam_parameters()
{
    return m_cam_parameters;
}

size_t etsi_its_cam_msgs::msg::CoopAwareness::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;



    return current_align;
}

bool etsi_its_cam_msgs::msg::CoopAwareness::isKeyDefined()
{
    return false;
}

void etsi_its_cam_msgs::msg::CoopAwareness::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
      
}


