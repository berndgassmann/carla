// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file VehicleLength.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "VehicleLength.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

etsi_its_cam_msgs::msg::VehicleLength::VehicleLength()
{
    // m_vehicle_length_value com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@48b0e701

    // m_vehicle_length_confidence_indication com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@241a0c3a


}

etsi_its_cam_msgs::msg::VehicleLength::~VehicleLength()
{

}

etsi_its_cam_msgs::msg::VehicleLength::VehicleLength(
        const VehicleLength& x)
{
    m_vehicle_length_value = x.m_vehicle_length_value;
    m_vehicle_length_confidence_indication = x.m_vehicle_length_confidence_indication;
}

etsi_its_cam_msgs::msg::VehicleLength::VehicleLength(
        VehicleLength&& x)
{
    m_vehicle_length_value = std::move(x.m_vehicle_length_value);
    m_vehicle_length_confidence_indication = std::move(x.m_vehicle_length_confidence_indication);
}

etsi_its_cam_msgs::msg::VehicleLength& etsi_its_cam_msgs::msg::VehicleLength::operator =(
        const VehicleLength& x)
{

    m_vehicle_length_value = x.m_vehicle_length_value;
    m_vehicle_length_confidence_indication = x.m_vehicle_length_confidence_indication;

    return *this;
}

etsi_its_cam_msgs::msg::VehicleLength& etsi_its_cam_msgs::msg::VehicleLength::operator =(
        VehicleLength&& x)
{

    m_vehicle_length_value = std::move(x.m_vehicle_length_value);
    m_vehicle_length_confidence_indication = std::move(x.m_vehicle_length_confidence_indication);

    return *this;
}

bool etsi_its_cam_msgs::msg::VehicleLength::operator ==(
        const VehicleLength& x) const
{

    return (m_vehicle_length_value == x.m_vehicle_length_value && m_vehicle_length_confidence_indication == x.m_vehicle_length_confidence_indication);
}

bool etsi_its_cam_msgs::msg::VehicleLength::operator !=(
        const VehicleLength& x) const
{
    return !(*this == x);
}

size_t etsi_its_cam_msgs::msg::VehicleLength::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += etsi_its_cam_msgs::msg::VehicleLengthValue::getMaxCdrSerializedSize(current_alignment);
    current_alignment += etsi_its_cam_msgs::msg::VehicleLengthConfidenceIndication::getMaxCdrSerializedSize(current_alignment);

    return current_alignment - initial_alignment;
}

size_t etsi_its_cam_msgs::msg::VehicleLength::getCdrSerializedSize(
        const etsi_its_cam_msgs::msg::VehicleLength& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += etsi_its_cam_msgs::msg::VehicleLengthValue::getCdrSerializedSize(data.vehicle_length_value(), current_alignment);
    current_alignment += etsi_its_cam_msgs::msg::VehicleLengthConfidenceIndication::getCdrSerializedSize(data.vehicle_length_confidence_indication(), current_alignment);

    return current_alignment - initial_alignment;
}

void etsi_its_cam_msgs::msg::VehicleLength::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_vehicle_length_value;
    scdr << m_vehicle_length_confidence_indication;

}

void etsi_its_cam_msgs::msg::VehicleLength::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_vehicle_length_value;
    dcdr >> m_vehicle_length_confidence_indication;
}

/*!
 * @brief This function copies the value in member vehicle_length_value
 * @param _vehicle_length_value New value to be copied in member vehicle_length_value
 */
void etsi_its_cam_msgs::msg::VehicleLength::vehicle_length_value(
        const etsi_its_cam_msgs::msg::VehicleLengthValue& _vehicle_length_value)
{
    m_vehicle_length_value = _vehicle_length_value;
}

/*!
 * @brief This function moves the value in member vehicle_length_value
 * @param _vehicle_length_value New value to be moved in member vehicle_length_value
 */
void etsi_its_cam_msgs::msg::VehicleLength::vehicle_length_value(
        etsi_its_cam_msgs::msg::VehicleLengthValue&& _vehicle_length_value)
{
    m_vehicle_length_value = std::move(_vehicle_length_value);
}

/*!
 * @brief This function returns a constant reference to member vehicle_length_value
 * @return Constant reference to member vehicle_length_value
 */
const etsi_its_cam_msgs::msg::VehicleLengthValue& etsi_its_cam_msgs::msg::VehicleLength::vehicle_length_value() const
{
    return m_vehicle_length_value;
}

/*!
 * @brief This function returns a reference to member vehicle_length_value
 * @return Reference to member vehicle_length_value
 */
etsi_its_cam_msgs::msg::VehicleLengthValue& etsi_its_cam_msgs::msg::VehicleLength::vehicle_length_value()
{
    return m_vehicle_length_value;
}
/*!
 * @brief This function copies the value in member vehicle_length_confidence_indication
 * @param _vehicle_length_confidence_indication New value to be copied in member vehicle_length_confidence_indication
 */
void etsi_its_cam_msgs::msg::VehicleLength::vehicle_length_confidence_indication(
        const etsi_its_cam_msgs::msg::VehicleLengthConfidenceIndication& _vehicle_length_confidence_indication)
{
    m_vehicle_length_confidence_indication = _vehicle_length_confidence_indication;
}

/*!
 * @brief This function moves the value in member vehicle_length_confidence_indication
 * @param _vehicle_length_confidence_indication New value to be moved in member vehicle_length_confidence_indication
 */
void etsi_its_cam_msgs::msg::VehicleLength::vehicle_length_confidence_indication(
        etsi_its_cam_msgs::msg::VehicleLengthConfidenceIndication&& _vehicle_length_confidence_indication)
{
    m_vehicle_length_confidence_indication = std::move(_vehicle_length_confidence_indication);
}

/*!
 * @brief This function returns a constant reference to member vehicle_length_confidence_indication
 * @return Constant reference to member vehicle_length_confidence_indication
 */
const etsi_its_cam_msgs::msg::VehicleLengthConfidenceIndication& etsi_its_cam_msgs::msg::VehicleLength::vehicle_length_confidence_indication() const
{
    return m_vehicle_length_confidence_indication;
}

/*!
 * @brief This function returns a reference to member vehicle_length_confidence_indication
 * @return Reference to member vehicle_length_confidence_indication
 */
etsi_its_cam_msgs::msg::VehicleLengthConfidenceIndication& etsi_its_cam_msgs::msg::VehicleLength::vehicle_length_confidence_indication()
{
    return m_vehicle_length_confidence_indication;
}

size_t etsi_its_cam_msgs::msg::VehicleLength::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;



    return current_align;
}

bool etsi_its_cam_msgs::msg::VehicleLength::isKeyDefined()
{
    return false;
}

void etsi_its_cam_msgs::msg::VehicleLength::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
      
}


