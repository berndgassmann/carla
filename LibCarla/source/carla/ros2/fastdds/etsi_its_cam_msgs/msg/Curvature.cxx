// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file Curvature.cpp
 * This source file contains the implementation of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "Curvature.h"

#include <fastcdr/Cdr.h>


#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>


namespace etsi_its_cam_msgs {

namespace msg {



Curvature::Curvature()
{
}

Curvature::~Curvature()
{
}

Curvature::Curvature(
        const Curvature& x)
{
    m_curvature_value = x.m_curvature_value;
    m_curvature_confidence = x.m_curvature_confidence;
}

Curvature::Curvature(
        Curvature&& x) noexcept
{
    m_curvature_value = std::move(x.m_curvature_value);
    m_curvature_confidence = std::move(x.m_curvature_confidence);
}

Curvature& Curvature::operator =(
        const Curvature& x)
{

    m_curvature_value = x.m_curvature_value;
    m_curvature_confidence = x.m_curvature_confidence;
    return *this;
}

Curvature& Curvature::operator =(
        Curvature&& x) noexcept
{

    m_curvature_value = std::move(x.m_curvature_value);
    m_curvature_confidence = std::move(x.m_curvature_confidence);
    return *this;
}

bool Curvature::operator ==(
        const Curvature& x) const
{
    return (m_curvature_value == x.m_curvature_value &&
           m_curvature_confidence == x.m_curvature_confidence);
}

bool Curvature::operator !=(
        const Curvature& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member curvature_value
 * @param _curvature_value New value to be copied in member curvature_value
 */
void Curvature::curvature_value(
        const etsi_its_cam_msgs::msg::CurvatureValue& _curvature_value)
{
    m_curvature_value = _curvature_value;
}

/*!
 * @brief This function moves the value in member curvature_value
 * @param _curvature_value New value to be moved in member curvature_value
 */
void Curvature::curvature_value(
        etsi_its_cam_msgs::msg::CurvatureValue&& _curvature_value)
{
    m_curvature_value = std::move(_curvature_value);
}

/*!
 * @brief This function returns a constant reference to member curvature_value
 * @return Constant reference to member curvature_value
 */
const etsi_its_cam_msgs::msg::CurvatureValue& Curvature::curvature_value() const
{
    return m_curvature_value;
}

/*!
 * @brief This function returns a reference to member curvature_value
 * @return Reference to member curvature_value
 */
etsi_its_cam_msgs::msg::CurvatureValue& Curvature::curvature_value()
{
    return m_curvature_value;
}


/*!
 * @brief This function copies the value in member curvature_confidence
 * @param _curvature_confidence New value to be copied in member curvature_confidence
 */
void Curvature::curvature_confidence(
        const etsi_its_cam_msgs::msg::CurvatureConfidence& _curvature_confidence)
{
    m_curvature_confidence = _curvature_confidence;
}

/*!
 * @brief This function moves the value in member curvature_confidence
 * @param _curvature_confidence New value to be moved in member curvature_confidence
 */
void Curvature::curvature_confidence(
        etsi_its_cam_msgs::msg::CurvatureConfidence&& _curvature_confidence)
{
    m_curvature_confidence = std::move(_curvature_confidence);
}

/*!
 * @brief This function returns a constant reference to member curvature_confidence
 * @return Constant reference to member curvature_confidence
 */
const etsi_its_cam_msgs::msg::CurvatureConfidence& Curvature::curvature_confidence() const
{
    return m_curvature_confidence;
}

/*!
 * @brief This function returns a reference to member curvature_confidence
 * @return Reference to member curvature_confidence
 */
etsi_its_cam_msgs::msg::CurvatureConfidence& Curvature::curvature_confidence()
{
    return m_curvature_confidence;
}




} // namespace msg


} // namespace etsi_its_cam_msgs
// Include auxiliary functions like for serializing/deserializing.
#include "CurvatureCdrAux.ipp"

