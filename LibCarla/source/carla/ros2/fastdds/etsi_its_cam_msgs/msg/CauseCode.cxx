// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file CauseCode.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "CauseCode.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

etsi_its_cam_msgs::msg::CauseCode::CauseCode()
{
    // m_cause_code com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@bc57b40

    // m_sub_cause_code com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@1b5bc39d


}

etsi_its_cam_msgs::msg::CauseCode::~CauseCode()
{

}

etsi_its_cam_msgs::msg::CauseCode::CauseCode(
        const CauseCode& x)
{
    m_cause_code = x.m_cause_code;
    m_sub_cause_code = x.m_sub_cause_code;
}

etsi_its_cam_msgs::msg::CauseCode::CauseCode(
        CauseCode&& x)
{
    m_cause_code = std::move(x.m_cause_code);
    m_sub_cause_code = std::move(x.m_sub_cause_code);
}

etsi_its_cam_msgs::msg::CauseCode& etsi_its_cam_msgs::msg::CauseCode::operator =(
        const CauseCode& x)
{

    m_cause_code = x.m_cause_code;
    m_sub_cause_code = x.m_sub_cause_code;

    return *this;
}

etsi_its_cam_msgs::msg::CauseCode& etsi_its_cam_msgs::msg::CauseCode::operator =(
        CauseCode&& x)
{

    m_cause_code = std::move(x.m_cause_code);
    m_sub_cause_code = std::move(x.m_sub_cause_code);

    return *this;
}

bool etsi_its_cam_msgs::msg::CauseCode::operator ==(
        const CauseCode& x) const
{

    return (m_cause_code == x.m_cause_code && m_sub_cause_code == x.m_sub_cause_code);
}

bool etsi_its_cam_msgs::msg::CauseCode::operator !=(
        const CauseCode& x) const
{
    return !(*this == x);
}

size_t etsi_its_cam_msgs::msg::CauseCode::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += etsi_its_cam_msgs::msg::CauseCodeType::getMaxCdrSerializedSize(current_alignment);
    current_alignment += etsi_its_cam_msgs::msg::SubCauseCodeType::getMaxCdrSerializedSize(current_alignment);

    return current_alignment - initial_alignment;
}

size_t etsi_its_cam_msgs::msg::CauseCode::getCdrSerializedSize(
        const etsi_its_cam_msgs::msg::CauseCode& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += etsi_its_cam_msgs::msg::CauseCodeType::getCdrSerializedSize(data.cause_code(), current_alignment);
    current_alignment += etsi_its_cam_msgs::msg::SubCauseCodeType::getCdrSerializedSize(data.sub_cause_code(), current_alignment);

    return current_alignment - initial_alignment;
}

void etsi_its_cam_msgs::msg::CauseCode::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_cause_code;
    scdr << m_sub_cause_code;

}

void etsi_its_cam_msgs::msg::CauseCode::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_cause_code;
    dcdr >> m_sub_cause_code;
}

/*!
 * @brief This function copies the value in member cause_code
 * @param _cause_code New value to be copied in member cause_code
 */
void etsi_its_cam_msgs::msg::CauseCode::cause_code(
        const etsi_its_cam_msgs::msg::CauseCodeType& _cause_code)
{
    m_cause_code = _cause_code;
}

/*!
 * @brief This function moves the value in member cause_code
 * @param _cause_code New value to be moved in member cause_code
 */
void etsi_its_cam_msgs::msg::CauseCode::cause_code(
        etsi_its_cam_msgs::msg::CauseCodeType&& _cause_code)
{
    m_cause_code = std::move(_cause_code);
}

/*!
 * @brief This function returns a constant reference to member cause_code
 * @return Constant reference to member cause_code
 */
const etsi_its_cam_msgs::msg::CauseCodeType& etsi_its_cam_msgs::msg::CauseCode::cause_code() const
{
    return m_cause_code;
}

/*!
 * @brief This function returns a reference to member cause_code
 * @return Reference to member cause_code
 */
etsi_its_cam_msgs::msg::CauseCodeType& etsi_its_cam_msgs::msg::CauseCode::cause_code()
{
    return m_cause_code;
}
/*!
 * @brief This function copies the value in member sub_cause_code
 * @param _sub_cause_code New value to be copied in member sub_cause_code
 */
void etsi_its_cam_msgs::msg::CauseCode::sub_cause_code(
        const etsi_its_cam_msgs::msg::SubCauseCodeType& _sub_cause_code)
{
    m_sub_cause_code = _sub_cause_code;
}

/*!
 * @brief This function moves the value in member sub_cause_code
 * @param _sub_cause_code New value to be moved in member sub_cause_code
 */
void etsi_its_cam_msgs::msg::CauseCode::sub_cause_code(
        etsi_its_cam_msgs::msg::SubCauseCodeType&& _sub_cause_code)
{
    m_sub_cause_code = std::move(_sub_cause_code);
}

/*!
 * @brief This function returns a constant reference to member sub_cause_code
 * @return Constant reference to member sub_cause_code
 */
const etsi_its_cam_msgs::msg::SubCauseCodeType& etsi_its_cam_msgs::msg::CauseCode::sub_cause_code() const
{
    return m_sub_cause_code;
}

/*!
 * @brief This function returns a reference to member sub_cause_code
 * @return Reference to member sub_cause_code
 */
etsi_its_cam_msgs::msg::SubCauseCodeType& etsi_its_cam_msgs::msg::CauseCode::sub_cause_code()
{
    return m_sub_cause_code;
}

size_t etsi_its_cam_msgs::msg::CauseCode::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;



    return current_align;
}

bool etsi_its_cam_msgs::msg::CauseCode::isKeyDefined()
{
    return false;
}

void etsi_its_cam_msgs::msg::CauseCode::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
      
}


