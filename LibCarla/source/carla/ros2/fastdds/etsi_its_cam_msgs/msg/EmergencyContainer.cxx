// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file EmergencyContainer.cpp
 * This source file contains the implementation of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "EmergencyContainer.h"

#include <fastcdr/Cdr.h>


#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>


namespace etsi_its_cam_msgs {

namespace msg {



EmergencyContainer::EmergencyContainer()
{
}

EmergencyContainer::~EmergencyContainer()
{
}

EmergencyContainer::EmergencyContainer(
        const EmergencyContainer& x)
{
    m_light_bar_siren_in_use = x.m_light_bar_siren_in_use;
    m_incident_indication = x.m_incident_indication;
    m_incident_indication_is_present = x.m_incident_indication_is_present;
    m_emergency_priority = x.m_emergency_priority;
    m_emergency_priority_is_present = x.m_emergency_priority_is_present;
}

EmergencyContainer::EmergencyContainer(
        EmergencyContainer&& x) noexcept
{
    m_light_bar_siren_in_use = std::move(x.m_light_bar_siren_in_use);
    m_incident_indication = std::move(x.m_incident_indication);
    m_incident_indication_is_present = x.m_incident_indication_is_present;
    m_emergency_priority = std::move(x.m_emergency_priority);
    m_emergency_priority_is_present = x.m_emergency_priority_is_present;
}

EmergencyContainer& EmergencyContainer::operator =(
        const EmergencyContainer& x)
{

    m_light_bar_siren_in_use = x.m_light_bar_siren_in_use;
    m_incident_indication = x.m_incident_indication;
    m_incident_indication_is_present = x.m_incident_indication_is_present;
    m_emergency_priority = x.m_emergency_priority;
    m_emergency_priority_is_present = x.m_emergency_priority_is_present;
    return *this;
}

EmergencyContainer& EmergencyContainer::operator =(
        EmergencyContainer&& x) noexcept
{

    m_light_bar_siren_in_use = std::move(x.m_light_bar_siren_in_use);
    m_incident_indication = std::move(x.m_incident_indication);
    m_incident_indication_is_present = x.m_incident_indication_is_present;
    m_emergency_priority = std::move(x.m_emergency_priority);
    m_emergency_priority_is_present = x.m_emergency_priority_is_present;
    return *this;
}

bool EmergencyContainer::operator ==(
        const EmergencyContainer& x) const
{
    return (m_light_bar_siren_in_use == x.m_light_bar_siren_in_use &&
           m_incident_indication == x.m_incident_indication &&
           m_incident_indication_is_present == x.m_incident_indication_is_present &&
           m_emergency_priority == x.m_emergency_priority &&
           m_emergency_priority_is_present == x.m_emergency_priority_is_present);
}

bool EmergencyContainer::operator !=(
        const EmergencyContainer& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member light_bar_siren_in_use
 * @param _light_bar_siren_in_use New value to be copied in member light_bar_siren_in_use
 */
void EmergencyContainer::light_bar_siren_in_use(
        const etsi_its_cam_msgs::msg::LightBarSirenInUse& _light_bar_siren_in_use)
{
    m_light_bar_siren_in_use = _light_bar_siren_in_use;
}

/*!
 * @brief This function moves the value in member light_bar_siren_in_use
 * @param _light_bar_siren_in_use New value to be moved in member light_bar_siren_in_use
 */
void EmergencyContainer::light_bar_siren_in_use(
        etsi_its_cam_msgs::msg::LightBarSirenInUse&& _light_bar_siren_in_use)
{
    m_light_bar_siren_in_use = std::move(_light_bar_siren_in_use);
}

/*!
 * @brief This function returns a constant reference to member light_bar_siren_in_use
 * @return Constant reference to member light_bar_siren_in_use
 */
const etsi_its_cam_msgs::msg::LightBarSirenInUse& EmergencyContainer::light_bar_siren_in_use() const
{
    return m_light_bar_siren_in_use;
}

/*!
 * @brief This function returns a reference to member light_bar_siren_in_use
 * @return Reference to member light_bar_siren_in_use
 */
etsi_its_cam_msgs::msg::LightBarSirenInUse& EmergencyContainer::light_bar_siren_in_use()
{
    return m_light_bar_siren_in_use;
}


/*!
 * @brief This function copies the value in member incident_indication
 * @param _incident_indication New value to be copied in member incident_indication
 */
void EmergencyContainer::incident_indication(
        const etsi_its_cam_msgs::msg::CauseCode& _incident_indication)
{
    m_incident_indication = _incident_indication;
}

/*!
 * @brief This function moves the value in member incident_indication
 * @param _incident_indication New value to be moved in member incident_indication
 */
void EmergencyContainer::incident_indication(
        etsi_its_cam_msgs::msg::CauseCode&& _incident_indication)
{
    m_incident_indication = std::move(_incident_indication);
}

/*!
 * @brief This function returns a constant reference to member incident_indication
 * @return Constant reference to member incident_indication
 */
const etsi_its_cam_msgs::msg::CauseCode& EmergencyContainer::incident_indication() const
{
    return m_incident_indication;
}

/*!
 * @brief This function returns a reference to member incident_indication
 * @return Reference to member incident_indication
 */
etsi_its_cam_msgs::msg::CauseCode& EmergencyContainer::incident_indication()
{
    return m_incident_indication;
}


/*!
 * @brief This function sets a value in member incident_indication_is_present
 * @param _incident_indication_is_present New value for member incident_indication_is_present
 */
void EmergencyContainer::incident_indication_is_present(
        bool _incident_indication_is_present)
{
    m_incident_indication_is_present = _incident_indication_is_present;
}

/*!
 * @brief This function returns the value of member incident_indication_is_present
 * @return Value of member incident_indication_is_present
 */
bool EmergencyContainer::incident_indication_is_present() const
{
    return m_incident_indication_is_present;
}

/*!
 * @brief This function returns a reference to member incident_indication_is_present
 * @return Reference to member incident_indication_is_present
 */
bool& EmergencyContainer::incident_indication_is_present()
{
    return m_incident_indication_is_present;
}


/*!
 * @brief This function copies the value in member emergency_priority
 * @param _emergency_priority New value to be copied in member emergency_priority
 */
void EmergencyContainer::emergency_priority(
        const etsi_its_cam_msgs::msg::EmergencyPriority& _emergency_priority)
{
    m_emergency_priority = _emergency_priority;
}

/*!
 * @brief This function moves the value in member emergency_priority
 * @param _emergency_priority New value to be moved in member emergency_priority
 */
void EmergencyContainer::emergency_priority(
        etsi_its_cam_msgs::msg::EmergencyPriority&& _emergency_priority)
{
    m_emergency_priority = std::move(_emergency_priority);
}

/*!
 * @brief This function returns a constant reference to member emergency_priority
 * @return Constant reference to member emergency_priority
 */
const etsi_its_cam_msgs::msg::EmergencyPriority& EmergencyContainer::emergency_priority() const
{
    return m_emergency_priority;
}

/*!
 * @brief This function returns a reference to member emergency_priority
 * @return Reference to member emergency_priority
 */
etsi_its_cam_msgs::msg::EmergencyPriority& EmergencyContainer::emergency_priority()
{
    return m_emergency_priority;
}


/*!
 * @brief This function sets a value in member emergency_priority_is_present
 * @param _emergency_priority_is_present New value for member emergency_priority_is_present
 */
void EmergencyContainer::emergency_priority_is_present(
        bool _emergency_priority_is_present)
{
    m_emergency_priority_is_present = _emergency_priority_is_present;
}

/*!
 * @brief This function returns the value of member emergency_priority_is_present
 * @return Value of member emergency_priority_is_present
 */
bool EmergencyContainer::emergency_priority_is_present() const
{
    return m_emergency_priority_is_present;
}

/*!
 * @brief This function returns a reference to member emergency_priority_is_present
 * @return Reference to member emergency_priority_is_present
 */
bool& EmergencyContainer::emergency_priority_is_present()
{
    return m_emergency_priority_is_present;
}




} // namespace msg


} // namespace etsi_its_cam_msgs
// Include auxiliary functions like for serializing/deserializing.
#include "EmergencyContainerCdrAux.ipp"

