// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file Speed.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "Speed.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

etsi_its_cam_msgs::msg::Speed::Speed()
{
    // m_speed_value com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@1d3e6d34

    // m_speed_confidence com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@6eafb10e


}

etsi_its_cam_msgs::msg::Speed::~Speed()
{

}

etsi_its_cam_msgs::msg::Speed::Speed(
        const Speed& x)
{
    m_speed_value = x.m_speed_value;
    m_speed_confidence = x.m_speed_confidence;
}

etsi_its_cam_msgs::msg::Speed::Speed(
        Speed&& x)
{
    m_speed_value = std::move(x.m_speed_value);
    m_speed_confidence = std::move(x.m_speed_confidence);
}

etsi_its_cam_msgs::msg::Speed& etsi_its_cam_msgs::msg::Speed::operator =(
        const Speed& x)
{

    m_speed_value = x.m_speed_value;
    m_speed_confidence = x.m_speed_confidence;

    return *this;
}

etsi_its_cam_msgs::msg::Speed& etsi_its_cam_msgs::msg::Speed::operator =(
        Speed&& x)
{

    m_speed_value = std::move(x.m_speed_value);
    m_speed_confidence = std::move(x.m_speed_confidence);

    return *this;
}

bool etsi_its_cam_msgs::msg::Speed::operator ==(
        const Speed& x) const
{

    return (m_speed_value == x.m_speed_value && m_speed_confidence == x.m_speed_confidence);
}

bool etsi_its_cam_msgs::msg::Speed::operator !=(
        const Speed& x) const
{
    return !(*this == x);
}

size_t etsi_its_cam_msgs::msg::Speed::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += etsi_its_cam_msgs::msg::SpeedValue::getMaxCdrSerializedSize(current_alignment);
    current_alignment += etsi_its_cam_msgs::msg::SpeedConfidence::getMaxCdrSerializedSize(current_alignment);

    return current_alignment - initial_alignment;
}

size_t etsi_its_cam_msgs::msg::Speed::getCdrSerializedSize(
        const etsi_its_cam_msgs::msg::Speed& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += etsi_its_cam_msgs::msg::SpeedValue::getCdrSerializedSize(data.speed_value(), current_alignment);
    current_alignment += etsi_its_cam_msgs::msg::SpeedConfidence::getCdrSerializedSize(data.speed_confidence(), current_alignment);

    return current_alignment - initial_alignment;
}

void etsi_its_cam_msgs::msg::Speed::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_speed_value;
    scdr << m_speed_confidence;

}

void etsi_its_cam_msgs::msg::Speed::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_speed_value;
    dcdr >> m_speed_confidence;
}

/*!
 * @brief This function copies the value in member speed_value
 * @param _speed_value New value to be copied in member speed_value
 */
void etsi_its_cam_msgs::msg::Speed::speed_value(
        const etsi_its_cam_msgs::msg::SpeedValue& _speed_value)
{
    m_speed_value = _speed_value;
}

/*!
 * @brief This function moves the value in member speed_value
 * @param _speed_value New value to be moved in member speed_value
 */
void etsi_its_cam_msgs::msg::Speed::speed_value(
        etsi_its_cam_msgs::msg::SpeedValue&& _speed_value)
{
    m_speed_value = std::move(_speed_value);
}

/*!
 * @brief This function returns a constant reference to member speed_value
 * @return Constant reference to member speed_value
 */
const etsi_its_cam_msgs::msg::SpeedValue& etsi_its_cam_msgs::msg::Speed::speed_value() const
{
    return m_speed_value;
}

/*!
 * @brief This function returns a reference to member speed_value
 * @return Reference to member speed_value
 */
etsi_its_cam_msgs::msg::SpeedValue& etsi_its_cam_msgs::msg::Speed::speed_value()
{
    return m_speed_value;
}
/*!
 * @brief This function copies the value in member speed_confidence
 * @param _speed_confidence New value to be copied in member speed_confidence
 */
void etsi_its_cam_msgs::msg::Speed::speed_confidence(
        const etsi_its_cam_msgs::msg::SpeedConfidence& _speed_confidence)
{
    m_speed_confidence = _speed_confidence;
}

/*!
 * @brief This function moves the value in member speed_confidence
 * @param _speed_confidence New value to be moved in member speed_confidence
 */
void etsi_its_cam_msgs::msg::Speed::speed_confidence(
        etsi_its_cam_msgs::msg::SpeedConfidence&& _speed_confidence)
{
    m_speed_confidence = std::move(_speed_confidence);
}

/*!
 * @brief This function returns a constant reference to member speed_confidence
 * @return Constant reference to member speed_confidence
 */
const etsi_its_cam_msgs::msg::SpeedConfidence& etsi_its_cam_msgs::msg::Speed::speed_confidence() const
{
    return m_speed_confidence;
}

/*!
 * @brief This function returns a reference to member speed_confidence
 * @return Reference to member speed_confidence
 */
etsi_its_cam_msgs::msg::SpeedConfidence& etsi_its_cam_msgs::msg::Speed::speed_confidence()
{
    return m_speed_confidence;
}

size_t etsi_its_cam_msgs::msg::Speed::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;



    return current_align;
}

bool etsi_its_cam_msgs::msg::Speed::isKeyDefined()
{
    return false;
}

void etsi_its_cam_msgs::msg::Speed::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
      
}


