// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file DangerousGoodsContainer.cpp
 * This source file contains the implementation of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "DangerousGoodsContainer.h"

#include <fastcdr/Cdr.h>


#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>


namespace etsi_its_cam_msgs {

namespace msg {



DangerousGoodsContainer::DangerousGoodsContainer()
{
}

DangerousGoodsContainer::~DangerousGoodsContainer()
{
}

DangerousGoodsContainer::DangerousGoodsContainer(
        const DangerousGoodsContainer& x)
{
    m_dangerous_goods_basic = x.m_dangerous_goods_basic;
}

DangerousGoodsContainer::DangerousGoodsContainer(
        DangerousGoodsContainer&& x) noexcept
{
    m_dangerous_goods_basic = std::move(x.m_dangerous_goods_basic);
}

DangerousGoodsContainer& DangerousGoodsContainer::operator =(
        const DangerousGoodsContainer& x)
{

    m_dangerous_goods_basic = x.m_dangerous_goods_basic;
    return *this;
}

DangerousGoodsContainer& DangerousGoodsContainer::operator =(
        DangerousGoodsContainer&& x) noexcept
{

    m_dangerous_goods_basic = std::move(x.m_dangerous_goods_basic);
    return *this;
}

bool DangerousGoodsContainer::operator ==(
        const DangerousGoodsContainer& x) const
{
    return (m_dangerous_goods_basic == x.m_dangerous_goods_basic);
}

bool DangerousGoodsContainer::operator !=(
        const DangerousGoodsContainer& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member dangerous_goods_basic
 * @param _dangerous_goods_basic New value to be copied in member dangerous_goods_basic
 */
void DangerousGoodsContainer::dangerous_goods_basic(
        const etsi_its_cam_msgs::msg::DangerousGoodsBasic& _dangerous_goods_basic)
{
    m_dangerous_goods_basic = _dangerous_goods_basic;
}

/*!
 * @brief This function moves the value in member dangerous_goods_basic
 * @param _dangerous_goods_basic New value to be moved in member dangerous_goods_basic
 */
void DangerousGoodsContainer::dangerous_goods_basic(
        etsi_its_cam_msgs::msg::DangerousGoodsBasic&& _dangerous_goods_basic)
{
    m_dangerous_goods_basic = std::move(_dangerous_goods_basic);
}

/*!
 * @brief This function returns a constant reference to member dangerous_goods_basic
 * @return Constant reference to member dangerous_goods_basic
 */
const etsi_its_cam_msgs::msg::DangerousGoodsBasic& DangerousGoodsContainer::dangerous_goods_basic() const
{
    return m_dangerous_goods_basic;
}

/*!
 * @brief This function returns a reference to member dangerous_goods_basic
 * @return Reference to member dangerous_goods_basic
 */
etsi_its_cam_msgs::msg::DangerousGoodsBasic& DangerousGoodsContainer::dangerous_goods_basic()
{
    return m_dangerous_goods_basic;
}




} // namespace msg


} // namespace etsi_its_cam_msgs
// Include auxiliary functions like for serializing/deserializing.
#include "DangerousGoodsContainerCdrAux.ipp"

