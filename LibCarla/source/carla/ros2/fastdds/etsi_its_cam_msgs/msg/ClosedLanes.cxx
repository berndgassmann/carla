// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file ClosedLanes.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "ClosedLanes.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

etsi_its_cam_msgs::msg::ClosedLanes::ClosedLanes()
{
    // m_innerhard_shoulder_status com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@841e575

    // m_innerhard_shoulder_status_is_present com.eprosima.idl.parser.typecode.PrimitiveTypeCode@27a5328c
    m_innerhard_shoulder_status_is_present = false;
    // m_outerhard_shoulder_status com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@841e575

    // m_outerhard_shoulder_status_is_present com.eprosima.idl.parser.typecode.PrimitiveTypeCode@1e5f4170
    m_outerhard_shoulder_status_is_present = false;
    // m_driving_lane_status com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@6c345c5f

    // m_driving_lane_status_is_present com.eprosima.idl.parser.typecode.PrimitiveTypeCode@6b5966e1
    m_driving_lane_status_is_present = false;

}

etsi_its_cam_msgs::msg::ClosedLanes::~ClosedLanes()
{





}

etsi_its_cam_msgs::msg::ClosedLanes::ClosedLanes(
        const ClosedLanes& x)
{
    m_innerhard_shoulder_status = x.m_innerhard_shoulder_status;
    m_innerhard_shoulder_status_is_present = x.m_innerhard_shoulder_status_is_present;
    m_outerhard_shoulder_status = x.m_outerhard_shoulder_status;
    m_outerhard_shoulder_status_is_present = x.m_outerhard_shoulder_status_is_present;
    m_driving_lane_status = x.m_driving_lane_status;
    m_driving_lane_status_is_present = x.m_driving_lane_status_is_present;
}

etsi_its_cam_msgs::msg::ClosedLanes::ClosedLanes(
        ClosedLanes&& x)
{
    m_innerhard_shoulder_status = std::move(x.m_innerhard_shoulder_status);
    m_innerhard_shoulder_status_is_present = x.m_innerhard_shoulder_status_is_present;
    m_outerhard_shoulder_status = std::move(x.m_outerhard_shoulder_status);
    m_outerhard_shoulder_status_is_present = x.m_outerhard_shoulder_status_is_present;
    m_driving_lane_status = std::move(x.m_driving_lane_status);
    m_driving_lane_status_is_present = x.m_driving_lane_status_is_present;
}

etsi_its_cam_msgs::msg::ClosedLanes& etsi_its_cam_msgs::msg::ClosedLanes::operator =(
        const ClosedLanes& x)
{

    m_innerhard_shoulder_status = x.m_innerhard_shoulder_status;
    m_innerhard_shoulder_status_is_present = x.m_innerhard_shoulder_status_is_present;
    m_outerhard_shoulder_status = x.m_outerhard_shoulder_status;
    m_outerhard_shoulder_status_is_present = x.m_outerhard_shoulder_status_is_present;
    m_driving_lane_status = x.m_driving_lane_status;
    m_driving_lane_status_is_present = x.m_driving_lane_status_is_present;

    return *this;
}

etsi_its_cam_msgs::msg::ClosedLanes& etsi_its_cam_msgs::msg::ClosedLanes::operator =(
        ClosedLanes&& x)
{

    m_innerhard_shoulder_status = std::move(x.m_innerhard_shoulder_status);
    m_innerhard_shoulder_status_is_present = x.m_innerhard_shoulder_status_is_present;
    m_outerhard_shoulder_status = std::move(x.m_outerhard_shoulder_status);
    m_outerhard_shoulder_status_is_present = x.m_outerhard_shoulder_status_is_present;
    m_driving_lane_status = std::move(x.m_driving_lane_status);
    m_driving_lane_status_is_present = x.m_driving_lane_status_is_present;

    return *this;
}

bool etsi_its_cam_msgs::msg::ClosedLanes::operator ==(
        const ClosedLanes& x) const
{

    return (m_innerhard_shoulder_status == x.m_innerhard_shoulder_status && m_innerhard_shoulder_status_is_present == x.m_innerhard_shoulder_status_is_present && m_outerhard_shoulder_status == x.m_outerhard_shoulder_status && m_outerhard_shoulder_status_is_present == x.m_outerhard_shoulder_status_is_present && m_driving_lane_status == x.m_driving_lane_status && m_driving_lane_status_is_present == x.m_driving_lane_status_is_present);
}

bool etsi_its_cam_msgs::msg::ClosedLanes::operator !=(
        const ClosedLanes& x) const
{
    return !(*this == x);
}

size_t etsi_its_cam_msgs::msg::ClosedLanes::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += etsi_its_cam_msgs::msg::HardShoulderStatus::getMaxCdrSerializedSize(current_alignment);
    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += etsi_its_cam_msgs::msg::HardShoulderStatus::getMaxCdrSerializedSize(current_alignment);
    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += etsi_its_cam_msgs::msg::DrivingLaneStatus::getMaxCdrSerializedSize(current_alignment);
    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}

size_t etsi_its_cam_msgs::msg::ClosedLanes::getCdrSerializedSize(
        const etsi_its_cam_msgs::msg::ClosedLanes& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += etsi_its_cam_msgs::msg::HardShoulderStatus::getCdrSerializedSize(data.innerhard_shoulder_status(), current_alignment);
    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += etsi_its_cam_msgs::msg::HardShoulderStatus::getCdrSerializedSize(data.outerhard_shoulder_status(), current_alignment);
    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += etsi_its_cam_msgs::msg::DrivingLaneStatus::getCdrSerializedSize(data.driving_lane_status(), current_alignment);
    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}

void etsi_its_cam_msgs::msg::ClosedLanes::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_innerhard_shoulder_status;
    scdr << m_innerhard_shoulder_status_is_present;
    scdr << m_outerhard_shoulder_status;
    scdr << m_outerhard_shoulder_status_is_present;
    scdr << m_driving_lane_status;
    scdr << m_driving_lane_status_is_present;

}

void etsi_its_cam_msgs::msg::ClosedLanes::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_innerhard_shoulder_status;
    dcdr >> m_innerhard_shoulder_status_is_present;
    dcdr >> m_outerhard_shoulder_status;
    dcdr >> m_outerhard_shoulder_status_is_present;
    dcdr >> m_driving_lane_status;
    dcdr >> m_driving_lane_status_is_present;
}

/*!
 * @brief This function copies the value in member innerhard_shoulder_status
 * @param _innerhard_shoulder_status New value to be copied in member innerhard_shoulder_status
 */
void etsi_its_cam_msgs::msg::ClosedLanes::innerhard_shoulder_status(
        const etsi_its_cam_msgs::msg::HardShoulderStatus& _innerhard_shoulder_status)
{
    m_innerhard_shoulder_status = _innerhard_shoulder_status;
}

/*!
 * @brief This function moves the value in member innerhard_shoulder_status
 * @param _innerhard_shoulder_status New value to be moved in member innerhard_shoulder_status
 */
void etsi_its_cam_msgs::msg::ClosedLanes::innerhard_shoulder_status(
        etsi_its_cam_msgs::msg::HardShoulderStatus&& _innerhard_shoulder_status)
{
    m_innerhard_shoulder_status = std::move(_innerhard_shoulder_status);
}

/*!
 * @brief This function returns a constant reference to member innerhard_shoulder_status
 * @return Constant reference to member innerhard_shoulder_status
 */
const etsi_its_cam_msgs::msg::HardShoulderStatus& etsi_its_cam_msgs::msg::ClosedLanes::innerhard_shoulder_status() const
{
    return m_innerhard_shoulder_status;
}

/*!
 * @brief This function returns a reference to member innerhard_shoulder_status
 * @return Reference to member innerhard_shoulder_status
 */
etsi_its_cam_msgs::msg::HardShoulderStatus& etsi_its_cam_msgs::msg::ClosedLanes::innerhard_shoulder_status()
{
    return m_innerhard_shoulder_status;
}
/*!
 * @brief This function sets a value in member innerhard_shoulder_status_is_present
 * @param _innerhard_shoulder_status_is_present New value for member innerhard_shoulder_status_is_present
 */
void etsi_its_cam_msgs::msg::ClosedLanes::innerhard_shoulder_status_is_present(
        bool _innerhard_shoulder_status_is_present)
{
    m_innerhard_shoulder_status_is_present = _innerhard_shoulder_status_is_present;
}

/*!
 * @brief This function returns the value of member innerhard_shoulder_status_is_present
 * @return Value of member innerhard_shoulder_status_is_present
 */
bool etsi_its_cam_msgs::msg::ClosedLanes::innerhard_shoulder_status_is_present() const
{
    return m_innerhard_shoulder_status_is_present;
}

/*!
 * @brief This function returns a reference to member innerhard_shoulder_status_is_present
 * @return Reference to member innerhard_shoulder_status_is_present
 */
bool& etsi_its_cam_msgs::msg::ClosedLanes::innerhard_shoulder_status_is_present()
{
    return m_innerhard_shoulder_status_is_present;
}

/*!
 * @brief This function copies the value in member outerhard_shoulder_status
 * @param _outerhard_shoulder_status New value to be copied in member outerhard_shoulder_status
 */
void etsi_its_cam_msgs::msg::ClosedLanes::outerhard_shoulder_status(
        const etsi_its_cam_msgs::msg::HardShoulderStatus& _outerhard_shoulder_status)
{
    m_outerhard_shoulder_status = _outerhard_shoulder_status;
}

/*!
 * @brief This function moves the value in member outerhard_shoulder_status
 * @param _outerhard_shoulder_status New value to be moved in member outerhard_shoulder_status
 */
void etsi_its_cam_msgs::msg::ClosedLanes::outerhard_shoulder_status(
        etsi_its_cam_msgs::msg::HardShoulderStatus&& _outerhard_shoulder_status)
{
    m_outerhard_shoulder_status = std::move(_outerhard_shoulder_status);
}

/*!
 * @brief This function returns a constant reference to member outerhard_shoulder_status
 * @return Constant reference to member outerhard_shoulder_status
 */
const etsi_its_cam_msgs::msg::HardShoulderStatus& etsi_its_cam_msgs::msg::ClosedLanes::outerhard_shoulder_status() const
{
    return m_outerhard_shoulder_status;
}

/*!
 * @brief This function returns a reference to member outerhard_shoulder_status
 * @return Reference to member outerhard_shoulder_status
 */
etsi_its_cam_msgs::msg::HardShoulderStatus& etsi_its_cam_msgs::msg::ClosedLanes::outerhard_shoulder_status()
{
    return m_outerhard_shoulder_status;
}
/*!
 * @brief This function sets a value in member outerhard_shoulder_status_is_present
 * @param _outerhard_shoulder_status_is_present New value for member outerhard_shoulder_status_is_present
 */
void etsi_its_cam_msgs::msg::ClosedLanes::outerhard_shoulder_status_is_present(
        bool _outerhard_shoulder_status_is_present)
{
    m_outerhard_shoulder_status_is_present = _outerhard_shoulder_status_is_present;
}

/*!
 * @brief This function returns the value of member outerhard_shoulder_status_is_present
 * @return Value of member outerhard_shoulder_status_is_present
 */
bool etsi_its_cam_msgs::msg::ClosedLanes::outerhard_shoulder_status_is_present() const
{
    return m_outerhard_shoulder_status_is_present;
}

/*!
 * @brief This function returns a reference to member outerhard_shoulder_status_is_present
 * @return Reference to member outerhard_shoulder_status_is_present
 */
bool& etsi_its_cam_msgs::msg::ClosedLanes::outerhard_shoulder_status_is_present()
{
    return m_outerhard_shoulder_status_is_present;
}

/*!
 * @brief This function copies the value in member driving_lane_status
 * @param _driving_lane_status New value to be copied in member driving_lane_status
 */
void etsi_its_cam_msgs::msg::ClosedLanes::driving_lane_status(
        const etsi_its_cam_msgs::msg::DrivingLaneStatus& _driving_lane_status)
{
    m_driving_lane_status = _driving_lane_status;
}

/*!
 * @brief This function moves the value in member driving_lane_status
 * @param _driving_lane_status New value to be moved in member driving_lane_status
 */
void etsi_its_cam_msgs::msg::ClosedLanes::driving_lane_status(
        etsi_its_cam_msgs::msg::DrivingLaneStatus&& _driving_lane_status)
{
    m_driving_lane_status = std::move(_driving_lane_status);
}

/*!
 * @brief This function returns a constant reference to member driving_lane_status
 * @return Constant reference to member driving_lane_status
 */
const etsi_its_cam_msgs::msg::DrivingLaneStatus& etsi_its_cam_msgs::msg::ClosedLanes::driving_lane_status() const
{
    return m_driving_lane_status;
}

/*!
 * @brief This function returns a reference to member driving_lane_status
 * @return Reference to member driving_lane_status
 */
etsi_its_cam_msgs::msg::DrivingLaneStatus& etsi_its_cam_msgs::msg::ClosedLanes::driving_lane_status()
{
    return m_driving_lane_status;
}
/*!
 * @brief This function sets a value in member driving_lane_status_is_present
 * @param _driving_lane_status_is_present New value for member driving_lane_status_is_present
 */
void etsi_its_cam_msgs::msg::ClosedLanes::driving_lane_status_is_present(
        bool _driving_lane_status_is_present)
{
    m_driving_lane_status_is_present = _driving_lane_status_is_present;
}

/*!
 * @brief This function returns the value of member driving_lane_status_is_present
 * @return Value of member driving_lane_status_is_present
 */
bool etsi_its_cam_msgs::msg::ClosedLanes::driving_lane_status_is_present() const
{
    return m_driving_lane_status_is_present;
}

/*!
 * @brief This function returns a reference to member driving_lane_status_is_present
 * @return Reference to member driving_lane_status_is_present
 */
bool& etsi_its_cam_msgs::msg::ClosedLanes::driving_lane_status_is_present()
{
    return m_driving_lane_status_is_present;
}


size_t etsi_its_cam_msgs::msg::ClosedLanes::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;



    return current_align;
}

bool etsi_its_cam_msgs::msg::ClosedLanes::isKeyDefined()
{
    return false;
}

void etsi_its_cam_msgs::msg::ClosedLanes::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
          
}


