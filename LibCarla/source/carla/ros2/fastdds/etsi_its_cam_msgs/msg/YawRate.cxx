// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file YawRate.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "YawRate.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

etsi_its_cam_msgs::msg::YawRate::YawRate()
{
    // m_yaw_rate_value com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@1654a892

    // m_yaw_rate_confidence com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@2577d6c8


}

etsi_its_cam_msgs::msg::YawRate::~YawRate()
{

}

etsi_its_cam_msgs::msg::YawRate::YawRate(
        const YawRate& x)
{
    m_yaw_rate_value = x.m_yaw_rate_value;
    m_yaw_rate_confidence = x.m_yaw_rate_confidence;
}

etsi_its_cam_msgs::msg::YawRate::YawRate(
        YawRate&& x)
{
    m_yaw_rate_value = std::move(x.m_yaw_rate_value);
    m_yaw_rate_confidence = std::move(x.m_yaw_rate_confidence);
}

etsi_its_cam_msgs::msg::YawRate& etsi_its_cam_msgs::msg::YawRate::operator =(
        const YawRate& x)
{

    m_yaw_rate_value = x.m_yaw_rate_value;
    m_yaw_rate_confidence = x.m_yaw_rate_confidence;

    return *this;
}

etsi_its_cam_msgs::msg::YawRate& etsi_its_cam_msgs::msg::YawRate::operator =(
        YawRate&& x)
{

    m_yaw_rate_value = std::move(x.m_yaw_rate_value);
    m_yaw_rate_confidence = std::move(x.m_yaw_rate_confidence);

    return *this;
}

bool etsi_its_cam_msgs::msg::YawRate::operator ==(
        const YawRate& x) const
{

    return (m_yaw_rate_value == x.m_yaw_rate_value && m_yaw_rate_confidence == x.m_yaw_rate_confidence);
}

bool etsi_its_cam_msgs::msg::YawRate::operator !=(
        const YawRate& x) const
{
    return !(*this == x);
}

size_t etsi_its_cam_msgs::msg::YawRate::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += etsi_its_cam_msgs::msg::YawRateValue::getMaxCdrSerializedSize(current_alignment);
    current_alignment += etsi_its_cam_msgs::msg::YawRateConfidence::getMaxCdrSerializedSize(current_alignment);

    return current_alignment - initial_alignment;
}

size_t etsi_its_cam_msgs::msg::YawRate::getCdrSerializedSize(
        const etsi_its_cam_msgs::msg::YawRate& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += etsi_its_cam_msgs::msg::YawRateValue::getCdrSerializedSize(data.yaw_rate_value(), current_alignment);
    current_alignment += etsi_its_cam_msgs::msg::YawRateConfidence::getCdrSerializedSize(data.yaw_rate_confidence(), current_alignment);

    return current_alignment - initial_alignment;
}

void etsi_its_cam_msgs::msg::YawRate::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_yaw_rate_value;
    scdr << m_yaw_rate_confidence;

}

void etsi_its_cam_msgs::msg::YawRate::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_yaw_rate_value;
    dcdr >> m_yaw_rate_confidence;
}

/*!
 * @brief This function copies the value in member yaw_rate_value
 * @param _yaw_rate_value New value to be copied in member yaw_rate_value
 */
void etsi_its_cam_msgs::msg::YawRate::yaw_rate_value(
        const etsi_its_cam_msgs::msg::YawRateValue& _yaw_rate_value)
{
    m_yaw_rate_value = _yaw_rate_value;
}

/*!
 * @brief This function moves the value in member yaw_rate_value
 * @param _yaw_rate_value New value to be moved in member yaw_rate_value
 */
void etsi_its_cam_msgs::msg::YawRate::yaw_rate_value(
        etsi_its_cam_msgs::msg::YawRateValue&& _yaw_rate_value)
{
    m_yaw_rate_value = std::move(_yaw_rate_value);
}

/*!
 * @brief This function returns a constant reference to member yaw_rate_value
 * @return Constant reference to member yaw_rate_value
 */
const etsi_its_cam_msgs::msg::YawRateValue& etsi_its_cam_msgs::msg::YawRate::yaw_rate_value() const
{
    return m_yaw_rate_value;
}

/*!
 * @brief This function returns a reference to member yaw_rate_value
 * @return Reference to member yaw_rate_value
 */
etsi_its_cam_msgs::msg::YawRateValue& etsi_its_cam_msgs::msg::YawRate::yaw_rate_value()
{
    return m_yaw_rate_value;
}
/*!
 * @brief This function copies the value in member yaw_rate_confidence
 * @param _yaw_rate_confidence New value to be copied in member yaw_rate_confidence
 */
void etsi_its_cam_msgs::msg::YawRate::yaw_rate_confidence(
        const etsi_its_cam_msgs::msg::YawRateConfidence& _yaw_rate_confidence)
{
    m_yaw_rate_confidence = _yaw_rate_confidence;
}

/*!
 * @brief This function moves the value in member yaw_rate_confidence
 * @param _yaw_rate_confidence New value to be moved in member yaw_rate_confidence
 */
void etsi_its_cam_msgs::msg::YawRate::yaw_rate_confidence(
        etsi_its_cam_msgs::msg::YawRateConfidence&& _yaw_rate_confidence)
{
    m_yaw_rate_confidence = std::move(_yaw_rate_confidence);
}

/*!
 * @brief This function returns a constant reference to member yaw_rate_confidence
 * @return Constant reference to member yaw_rate_confidence
 */
const etsi_its_cam_msgs::msg::YawRateConfidence& etsi_its_cam_msgs::msg::YawRate::yaw_rate_confidence() const
{
    return m_yaw_rate_confidence;
}

/*!
 * @brief This function returns a reference to member yaw_rate_confidence
 * @return Reference to member yaw_rate_confidence
 */
etsi_its_cam_msgs::msg::YawRateConfidence& etsi_its_cam_msgs::msg::YawRate::yaw_rate_confidence()
{
    return m_yaw_rate_confidence;
}

size_t etsi_its_cam_msgs::msg::YawRate::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;



    return current_align;
}

bool etsi_its_cam_msgs::msg::YawRate::isKeyDefined()
{
    return false;
}

void etsi_its_cam_msgs::msg::YawRate::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
      
}


