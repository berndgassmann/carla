// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file BasicVehicleContainerHighFrequency.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "BasicVehicleContainerHighFrequency.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

etsi_its_cam_msgs::msg::BasicVehicleContainerHighFrequency::BasicVehicleContainerHighFrequency()
{
    // m_heading com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@5aa6202e

    // m_speed com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@3af9aa66

    // m_drive_direction com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@771158fb

    // m_vehicle_length com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@91c4a3f

    // m_vehicle_width com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@62d0ac62

    // m_longitudinal_acceleration com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@150d80c4

    // m_curvature com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@6826c41e

    // m_curvature_calculation_mode com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@3003697

    // m_yaw_rate com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@64d43929

    // m_acceleration_control com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@1d269ed7

    // m_acceleration_control_is_present com.eprosima.idl.parser.typecode.PrimitiveTypeCode@437ebf59
    m_acceleration_control_is_present = false;
    // m_lane_position com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@41c89d2f

    // m_lane_position_is_present com.eprosima.idl.parser.typecode.PrimitiveTypeCode@410e94e
    m_lane_position_is_present = false;
    // m_steering_wheel_angle com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@2d691f3d

    // m_steering_wheel_angle_is_present com.eprosima.idl.parser.typecode.PrimitiveTypeCode@1bdbf9be
    m_steering_wheel_angle_is_present = false;
    // m_lateral_acceleration com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@1e7f2e0f

    // m_lateral_acceleration_is_present com.eprosima.idl.parser.typecode.PrimitiveTypeCode@1da6ee17
    m_lateral_acceleration_is_present = false;
    // m_vertical_acceleration com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@78d39a69

    // m_vertical_acceleration_is_present com.eprosima.idl.parser.typecode.PrimitiveTypeCode@3c818ac4
    m_vertical_acceleration_is_present = false;
    // m_performance_class com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@5b69d40d

    // m_performance_class_is_present com.eprosima.idl.parser.typecode.PrimitiveTypeCode@71154f21
    m_performance_class_is_present = false;
    // m_cen_dsrc_tolling_zone com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@15f193b8

    // m_cen_dsrc_tolling_zone_is_present com.eprosima.idl.parser.typecode.PrimitiveTypeCode@2516fc68
    m_cen_dsrc_tolling_zone_is_present = false;

}

etsi_its_cam_msgs::msg::BasicVehicleContainerHighFrequency::~BasicVehicleContainerHighFrequency()
{






















}

etsi_its_cam_msgs::msg::BasicVehicleContainerHighFrequency::BasicVehicleContainerHighFrequency(
        const BasicVehicleContainerHighFrequency& x)
{
    m_heading = x.m_heading;
    m_speed = x.m_speed;
    m_drive_direction = x.m_drive_direction;
    m_vehicle_length = x.m_vehicle_length;
    m_vehicle_width = x.m_vehicle_width;
    m_longitudinal_acceleration = x.m_longitudinal_acceleration;
    m_curvature = x.m_curvature;
    m_curvature_calculation_mode = x.m_curvature_calculation_mode;
    m_yaw_rate = x.m_yaw_rate;
    m_acceleration_control = x.m_acceleration_control;
    m_acceleration_control_is_present = x.m_acceleration_control_is_present;
    m_lane_position = x.m_lane_position;
    m_lane_position_is_present = x.m_lane_position_is_present;
    m_steering_wheel_angle = x.m_steering_wheel_angle;
    m_steering_wheel_angle_is_present = x.m_steering_wheel_angle_is_present;
    m_lateral_acceleration = x.m_lateral_acceleration;
    m_lateral_acceleration_is_present = x.m_lateral_acceleration_is_present;
    m_vertical_acceleration = x.m_vertical_acceleration;
    m_vertical_acceleration_is_present = x.m_vertical_acceleration_is_present;
    m_performance_class = x.m_performance_class;
    m_performance_class_is_present = x.m_performance_class_is_present;
    m_cen_dsrc_tolling_zone = x.m_cen_dsrc_tolling_zone;
    m_cen_dsrc_tolling_zone_is_present = x.m_cen_dsrc_tolling_zone_is_present;
}

etsi_its_cam_msgs::msg::BasicVehicleContainerHighFrequency::BasicVehicleContainerHighFrequency(
        BasicVehicleContainerHighFrequency&& x)
{
    m_heading = std::move(x.m_heading);
    m_speed = std::move(x.m_speed);
    m_drive_direction = std::move(x.m_drive_direction);
    m_vehicle_length = std::move(x.m_vehicle_length);
    m_vehicle_width = std::move(x.m_vehicle_width);
    m_longitudinal_acceleration = std::move(x.m_longitudinal_acceleration);
    m_curvature = std::move(x.m_curvature);
    m_curvature_calculation_mode = std::move(x.m_curvature_calculation_mode);
    m_yaw_rate = std::move(x.m_yaw_rate);
    m_acceleration_control = std::move(x.m_acceleration_control);
    m_acceleration_control_is_present = x.m_acceleration_control_is_present;
    m_lane_position = std::move(x.m_lane_position);
    m_lane_position_is_present = x.m_lane_position_is_present;
    m_steering_wheel_angle = std::move(x.m_steering_wheel_angle);
    m_steering_wheel_angle_is_present = x.m_steering_wheel_angle_is_present;
    m_lateral_acceleration = std::move(x.m_lateral_acceleration);
    m_lateral_acceleration_is_present = x.m_lateral_acceleration_is_present;
    m_vertical_acceleration = std::move(x.m_vertical_acceleration);
    m_vertical_acceleration_is_present = x.m_vertical_acceleration_is_present;
    m_performance_class = std::move(x.m_performance_class);
    m_performance_class_is_present = x.m_performance_class_is_present;
    m_cen_dsrc_tolling_zone = std::move(x.m_cen_dsrc_tolling_zone);
    m_cen_dsrc_tolling_zone_is_present = x.m_cen_dsrc_tolling_zone_is_present;
}

etsi_its_cam_msgs::msg::BasicVehicleContainerHighFrequency& etsi_its_cam_msgs::msg::BasicVehicleContainerHighFrequency::operator =(
        const BasicVehicleContainerHighFrequency& x)
{

    m_heading = x.m_heading;
    m_speed = x.m_speed;
    m_drive_direction = x.m_drive_direction;
    m_vehicle_length = x.m_vehicle_length;
    m_vehicle_width = x.m_vehicle_width;
    m_longitudinal_acceleration = x.m_longitudinal_acceleration;
    m_curvature = x.m_curvature;
    m_curvature_calculation_mode = x.m_curvature_calculation_mode;
    m_yaw_rate = x.m_yaw_rate;
    m_acceleration_control = x.m_acceleration_control;
    m_acceleration_control_is_present = x.m_acceleration_control_is_present;
    m_lane_position = x.m_lane_position;
    m_lane_position_is_present = x.m_lane_position_is_present;
    m_steering_wheel_angle = x.m_steering_wheel_angle;
    m_steering_wheel_angle_is_present = x.m_steering_wheel_angle_is_present;
    m_lateral_acceleration = x.m_lateral_acceleration;
    m_lateral_acceleration_is_present = x.m_lateral_acceleration_is_present;
    m_vertical_acceleration = x.m_vertical_acceleration;
    m_vertical_acceleration_is_present = x.m_vertical_acceleration_is_present;
    m_performance_class = x.m_performance_class;
    m_performance_class_is_present = x.m_performance_class_is_present;
    m_cen_dsrc_tolling_zone = x.m_cen_dsrc_tolling_zone;
    m_cen_dsrc_tolling_zone_is_present = x.m_cen_dsrc_tolling_zone_is_present;

    return *this;
}

etsi_its_cam_msgs::msg::BasicVehicleContainerHighFrequency& etsi_its_cam_msgs::msg::BasicVehicleContainerHighFrequency::operator =(
        BasicVehicleContainerHighFrequency&& x)
{

    m_heading = std::move(x.m_heading);
    m_speed = std::move(x.m_speed);
    m_drive_direction = std::move(x.m_drive_direction);
    m_vehicle_length = std::move(x.m_vehicle_length);
    m_vehicle_width = std::move(x.m_vehicle_width);
    m_longitudinal_acceleration = std::move(x.m_longitudinal_acceleration);
    m_curvature = std::move(x.m_curvature);
    m_curvature_calculation_mode = std::move(x.m_curvature_calculation_mode);
    m_yaw_rate = std::move(x.m_yaw_rate);
    m_acceleration_control = std::move(x.m_acceleration_control);
    m_acceleration_control_is_present = x.m_acceleration_control_is_present;
    m_lane_position = std::move(x.m_lane_position);
    m_lane_position_is_present = x.m_lane_position_is_present;
    m_steering_wheel_angle = std::move(x.m_steering_wheel_angle);
    m_steering_wheel_angle_is_present = x.m_steering_wheel_angle_is_present;
    m_lateral_acceleration = std::move(x.m_lateral_acceleration);
    m_lateral_acceleration_is_present = x.m_lateral_acceleration_is_present;
    m_vertical_acceleration = std::move(x.m_vertical_acceleration);
    m_vertical_acceleration_is_present = x.m_vertical_acceleration_is_present;
    m_performance_class = std::move(x.m_performance_class);
    m_performance_class_is_present = x.m_performance_class_is_present;
    m_cen_dsrc_tolling_zone = std::move(x.m_cen_dsrc_tolling_zone);
    m_cen_dsrc_tolling_zone_is_present = x.m_cen_dsrc_tolling_zone_is_present;

    return *this;
}

bool etsi_its_cam_msgs::msg::BasicVehicleContainerHighFrequency::operator ==(
        const BasicVehicleContainerHighFrequency& x) const
{

    return (m_heading == x.m_heading && m_speed == x.m_speed && m_drive_direction == x.m_drive_direction && m_vehicle_length == x.m_vehicle_length && m_vehicle_width == x.m_vehicle_width && m_longitudinal_acceleration == x.m_longitudinal_acceleration && m_curvature == x.m_curvature && m_curvature_calculation_mode == x.m_curvature_calculation_mode && m_yaw_rate == x.m_yaw_rate && m_acceleration_control == x.m_acceleration_control && m_acceleration_control_is_present == x.m_acceleration_control_is_present && m_lane_position == x.m_lane_position && m_lane_position_is_present == x.m_lane_position_is_present && m_steering_wheel_angle == x.m_steering_wheel_angle && m_steering_wheel_angle_is_present == x.m_steering_wheel_angle_is_present && m_lateral_acceleration == x.m_lateral_acceleration && m_lateral_acceleration_is_present == x.m_lateral_acceleration_is_present && m_vertical_acceleration == x.m_vertical_acceleration && m_vertical_acceleration_is_present == x.m_vertical_acceleration_is_present && m_performance_class == x.m_performance_class && m_performance_class_is_present == x.m_performance_class_is_present && m_cen_dsrc_tolling_zone == x.m_cen_dsrc_tolling_zone && m_cen_dsrc_tolling_zone_is_present == x.m_cen_dsrc_tolling_zone_is_present);
}

bool etsi_its_cam_msgs::msg::BasicVehicleContainerHighFrequency::operator !=(
        const BasicVehicleContainerHighFrequency& x) const
{
    return !(*this == x);
}

size_t etsi_its_cam_msgs::msg::BasicVehicleContainerHighFrequency::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += etsi_its_cam_msgs::msg::Heading::getMaxCdrSerializedSize(current_alignment);
    current_alignment += etsi_its_cam_msgs::msg::Speed::getMaxCdrSerializedSize(current_alignment);
    current_alignment += etsi_its_cam_msgs::msg::DriveDirection::getMaxCdrSerializedSize(current_alignment);
    current_alignment += etsi_its_cam_msgs::msg::VehicleLength::getMaxCdrSerializedSize(current_alignment);
    current_alignment += etsi_its_cam_msgs::msg::VehicleWidth::getMaxCdrSerializedSize(current_alignment);
    current_alignment += etsi_its_cam_msgs::msg::LongitudinalAcceleration::getMaxCdrSerializedSize(current_alignment);
    current_alignment += etsi_its_cam_msgs::msg::Curvature::getMaxCdrSerializedSize(current_alignment);
    current_alignment += etsi_its_cam_msgs::msg::CurvatureCalculationMode::getMaxCdrSerializedSize(current_alignment);
    current_alignment += etsi_its_cam_msgs::msg::YawRate::getMaxCdrSerializedSize(current_alignment);
    current_alignment += etsi_its_cam_msgs::msg::AccelerationControl::getMaxCdrSerializedSize(current_alignment);
    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += etsi_its_cam_msgs::msg::LanePosition::getMaxCdrSerializedSize(current_alignment);
    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += etsi_its_cam_msgs::msg::SteeringWheelAngle::getMaxCdrSerializedSize(current_alignment);
    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += etsi_its_cam_msgs::msg::LateralAcceleration::getMaxCdrSerializedSize(current_alignment);
    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += etsi_its_cam_msgs::msg::VerticalAcceleration::getMaxCdrSerializedSize(current_alignment);
    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += etsi_its_cam_msgs::msg::PerformanceClass::getMaxCdrSerializedSize(current_alignment);
    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += etsi_its_cam_msgs::msg::CenDsrcTollingZone::getMaxCdrSerializedSize(current_alignment);
    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}

size_t etsi_its_cam_msgs::msg::BasicVehicleContainerHighFrequency::getCdrSerializedSize(
        const etsi_its_cam_msgs::msg::BasicVehicleContainerHighFrequency& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += etsi_its_cam_msgs::msg::Heading::getCdrSerializedSize(data.heading(), current_alignment);
    current_alignment += etsi_its_cam_msgs::msg::Speed::getCdrSerializedSize(data.speed(), current_alignment);
    current_alignment += etsi_its_cam_msgs::msg::DriveDirection::getCdrSerializedSize(data.drive_direction(), current_alignment);
    current_alignment += etsi_its_cam_msgs::msg::VehicleLength::getCdrSerializedSize(data.vehicle_length(), current_alignment);
    current_alignment += etsi_its_cam_msgs::msg::VehicleWidth::getCdrSerializedSize(data.vehicle_width(), current_alignment);
    current_alignment += etsi_its_cam_msgs::msg::LongitudinalAcceleration::getCdrSerializedSize(data.longitudinal_acceleration(), current_alignment);
    current_alignment += etsi_its_cam_msgs::msg::Curvature::getCdrSerializedSize(data.curvature(), current_alignment);
    current_alignment += etsi_its_cam_msgs::msg::CurvatureCalculationMode::getCdrSerializedSize(data.curvature_calculation_mode(), current_alignment);
    current_alignment += etsi_its_cam_msgs::msg::YawRate::getCdrSerializedSize(data.yaw_rate(), current_alignment);
    current_alignment += etsi_its_cam_msgs::msg::AccelerationControl::getCdrSerializedSize(data.acceleration_control(), current_alignment);
    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += etsi_its_cam_msgs::msg::LanePosition::getCdrSerializedSize(data.lane_position(), current_alignment);
    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += etsi_its_cam_msgs::msg::SteeringWheelAngle::getCdrSerializedSize(data.steering_wheel_angle(), current_alignment);
    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += etsi_its_cam_msgs::msg::LateralAcceleration::getCdrSerializedSize(data.lateral_acceleration(), current_alignment);
    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += etsi_its_cam_msgs::msg::VerticalAcceleration::getCdrSerializedSize(data.vertical_acceleration(), current_alignment);
    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += etsi_its_cam_msgs::msg::PerformanceClass::getCdrSerializedSize(data.performance_class(), current_alignment);
    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += etsi_its_cam_msgs::msg::CenDsrcTollingZone::getCdrSerializedSize(data.cen_dsrc_tolling_zone(), current_alignment);
    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}

void etsi_its_cam_msgs::msg::BasicVehicleContainerHighFrequency::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_heading;
    scdr << m_speed;
    scdr << m_drive_direction;
    scdr << m_vehicle_length;
    scdr << m_vehicle_width;
    scdr << m_longitudinal_acceleration;
    scdr << m_curvature;
    scdr << m_curvature_calculation_mode;
    scdr << m_yaw_rate;
    scdr << m_acceleration_control;
    scdr << m_acceleration_control_is_present;
    scdr << m_lane_position;
    scdr << m_lane_position_is_present;
    scdr << m_steering_wheel_angle;
    scdr << m_steering_wheel_angle_is_present;
    scdr << m_lateral_acceleration;
    scdr << m_lateral_acceleration_is_present;
    scdr << m_vertical_acceleration;
    scdr << m_vertical_acceleration_is_present;
    scdr << m_performance_class;
    scdr << m_performance_class_is_present;
    scdr << m_cen_dsrc_tolling_zone;
    scdr << m_cen_dsrc_tolling_zone_is_present;

}

void etsi_its_cam_msgs::msg::BasicVehicleContainerHighFrequency::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_heading;
    dcdr >> m_speed;
    dcdr >> m_drive_direction;
    dcdr >> m_vehicle_length;
    dcdr >> m_vehicle_width;
    dcdr >> m_longitudinal_acceleration;
    dcdr >> m_curvature;
    dcdr >> m_curvature_calculation_mode;
    dcdr >> m_yaw_rate;
    dcdr >> m_acceleration_control;
    dcdr >> m_acceleration_control_is_present;
    dcdr >> m_lane_position;
    dcdr >> m_lane_position_is_present;
    dcdr >> m_steering_wheel_angle;
    dcdr >> m_steering_wheel_angle_is_present;
    dcdr >> m_lateral_acceleration;
    dcdr >> m_lateral_acceleration_is_present;
    dcdr >> m_vertical_acceleration;
    dcdr >> m_vertical_acceleration_is_present;
    dcdr >> m_performance_class;
    dcdr >> m_performance_class_is_present;
    dcdr >> m_cen_dsrc_tolling_zone;
    dcdr >> m_cen_dsrc_tolling_zone_is_present;
}

/*!
 * @brief This function copies the value in member heading_
 * @param _heading New value to be copied in member heading_
 */
void etsi_its_cam_msgs::msg::BasicVehicleContainerHighFrequency::heading(
        const etsi_its_cam_msgs::msg::Heading& _heading)
{
    m_heading = _heading;
}

/*!
 * @brief This function moves the value in member heading_
 * @param _heading New value to be moved in member heading_
 */
void etsi_its_cam_msgs::msg::BasicVehicleContainerHighFrequency::heading(
        etsi_its_cam_msgs::msg::Heading&& _heading)
{
    m_heading = std::move(_heading);
}

/*!
 * @brief This function returns a constant reference to member heading_
 * @return Constant reference to member heading_
 */
const etsi_its_cam_msgs::msg::Heading& etsi_its_cam_msgs::msg::BasicVehicleContainerHighFrequency::heading() const
{
    return m_heading;
}

/*!
 * @brief This function returns a reference to member heading_
 * @return Reference to member heading_
 */
etsi_its_cam_msgs::msg::Heading& etsi_its_cam_msgs::msg::BasicVehicleContainerHighFrequency::heading()
{
    return m_heading;
}
/*!
 * @brief This function copies the value in member speed_
 * @param _speed New value to be copied in member speed_
 */
void etsi_its_cam_msgs::msg::BasicVehicleContainerHighFrequency::speed(
        const etsi_its_cam_msgs::msg::Speed& _speed)
{
    m_speed = _speed;
}

/*!
 * @brief This function moves the value in member speed_
 * @param _speed New value to be moved in member speed_
 */
void etsi_its_cam_msgs::msg::BasicVehicleContainerHighFrequency::speed(
        etsi_its_cam_msgs::msg::Speed&& _speed)
{
    m_speed = std::move(_speed);
}

/*!
 * @brief This function returns a constant reference to member speed_
 * @return Constant reference to member speed_
 */
const etsi_its_cam_msgs::msg::Speed& etsi_its_cam_msgs::msg::BasicVehicleContainerHighFrequency::speed() const
{
    return m_speed;
}

/*!
 * @brief This function returns a reference to member speed_
 * @return Reference to member speed_
 */
etsi_its_cam_msgs::msg::Speed& etsi_its_cam_msgs::msg::BasicVehicleContainerHighFrequency::speed()
{
    return m_speed;
}
/*!
 * @brief This function copies the value in member drive_direction
 * @param _drive_direction New value to be copied in member drive_direction
 */
void etsi_its_cam_msgs::msg::BasicVehicleContainerHighFrequency::drive_direction(
        const etsi_its_cam_msgs::msg::DriveDirection& _drive_direction)
{
    m_drive_direction = _drive_direction;
}

/*!
 * @brief This function moves the value in member drive_direction
 * @param _drive_direction New value to be moved in member drive_direction
 */
void etsi_its_cam_msgs::msg::BasicVehicleContainerHighFrequency::drive_direction(
        etsi_its_cam_msgs::msg::DriveDirection&& _drive_direction)
{
    m_drive_direction = std::move(_drive_direction);
}

/*!
 * @brief This function returns a constant reference to member drive_direction
 * @return Constant reference to member drive_direction
 */
const etsi_its_cam_msgs::msg::DriveDirection& etsi_its_cam_msgs::msg::BasicVehicleContainerHighFrequency::drive_direction() const
{
    return m_drive_direction;
}

/*!
 * @brief This function returns a reference to member drive_direction
 * @return Reference to member drive_direction
 */
etsi_its_cam_msgs::msg::DriveDirection& etsi_its_cam_msgs::msg::BasicVehicleContainerHighFrequency::drive_direction()
{
    return m_drive_direction;
}
/*!
 * @brief This function copies the value in member vehicle_length
 * @param _vehicle_length New value to be copied in member vehicle_length
 */
void etsi_its_cam_msgs::msg::BasicVehicleContainerHighFrequency::vehicle_length(
        const etsi_its_cam_msgs::msg::VehicleLength& _vehicle_length)
{
    m_vehicle_length = _vehicle_length;
}

/*!
 * @brief This function moves the value in member vehicle_length
 * @param _vehicle_length New value to be moved in member vehicle_length
 */
void etsi_its_cam_msgs::msg::BasicVehicleContainerHighFrequency::vehicle_length(
        etsi_its_cam_msgs::msg::VehicleLength&& _vehicle_length)
{
    m_vehicle_length = std::move(_vehicle_length);
}

/*!
 * @brief This function returns a constant reference to member vehicle_length
 * @return Constant reference to member vehicle_length
 */
const etsi_its_cam_msgs::msg::VehicleLength& etsi_its_cam_msgs::msg::BasicVehicleContainerHighFrequency::vehicle_length() const
{
    return m_vehicle_length;
}

/*!
 * @brief This function returns a reference to member vehicle_length
 * @return Reference to member vehicle_length
 */
etsi_its_cam_msgs::msg::VehicleLength& etsi_its_cam_msgs::msg::BasicVehicleContainerHighFrequency::vehicle_length()
{
    return m_vehicle_length;
}
/*!
 * @brief This function copies the value in member vehicle_width
 * @param _vehicle_width New value to be copied in member vehicle_width
 */
void etsi_its_cam_msgs::msg::BasicVehicleContainerHighFrequency::vehicle_width(
        const etsi_its_cam_msgs::msg::VehicleWidth& _vehicle_width)
{
    m_vehicle_width = _vehicle_width;
}

/*!
 * @brief This function moves the value in member vehicle_width
 * @param _vehicle_width New value to be moved in member vehicle_width
 */
void etsi_its_cam_msgs::msg::BasicVehicleContainerHighFrequency::vehicle_width(
        etsi_its_cam_msgs::msg::VehicleWidth&& _vehicle_width)
{
    m_vehicle_width = std::move(_vehicle_width);
}

/*!
 * @brief This function returns a constant reference to member vehicle_width
 * @return Constant reference to member vehicle_width
 */
const etsi_its_cam_msgs::msg::VehicleWidth& etsi_its_cam_msgs::msg::BasicVehicleContainerHighFrequency::vehicle_width() const
{
    return m_vehicle_width;
}

/*!
 * @brief This function returns a reference to member vehicle_width
 * @return Reference to member vehicle_width
 */
etsi_its_cam_msgs::msg::VehicleWidth& etsi_its_cam_msgs::msg::BasicVehicleContainerHighFrequency::vehicle_width()
{
    return m_vehicle_width;
}
/*!
 * @brief This function copies the value in member longitudinal_acceleration
 * @param _longitudinal_acceleration New value to be copied in member longitudinal_acceleration
 */
void etsi_its_cam_msgs::msg::BasicVehicleContainerHighFrequency::longitudinal_acceleration(
        const etsi_its_cam_msgs::msg::LongitudinalAcceleration& _longitudinal_acceleration)
{
    m_longitudinal_acceleration = _longitudinal_acceleration;
}

/*!
 * @brief This function moves the value in member longitudinal_acceleration
 * @param _longitudinal_acceleration New value to be moved in member longitudinal_acceleration
 */
void etsi_its_cam_msgs::msg::BasicVehicleContainerHighFrequency::longitudinal_acceleration(
        etsi_its_cam_msgs::msg::LongitudinalAcceleration&& _longitudinal_acceleration)
{
    m_longitudinal_acceleration = std::move(_longitudinal_acceleration);
}

/*!
 * @brief This function returns a constant reference to member longitudinal_acceleration
 * @return Constant reference to member longitudinal_acceleration
 */
const etsi_its_cam_msgs::msg::LongitudinalAcceleration& etsi_its_cam_msgs::msg::BasicVehicleContainerHighFrequency::longitudinal_acceleration() const
{
    return m_longitudinal_acceleration;
}

/*!
 * @brief This function returns a reference to member longitudinal_acceleration
 * @return Reference to member longitudinal_acceleration
 */
etsi_its_cam_msgs::msg::LongitudinalAcceleration& etsi_its_cam_msgs::msg::BasicVehicleContainerHighFrequency::longitudinal_acceleration()
{
    return m_longitudinal_acceleration;
}
/*!
 * @brief This function copies the value in member curvature_
 * @param _curvature New value to be copied in member curvature_
 */
void etsi_its_cam_msgs::msg::BasicVehicleContainerHighFrequency::curvature(
        const etsi_its_cam_msgs::msg::Curvature& _curvature)
{
    m_curvature = _curvature;
}

/*!
 * @brief This function moves the value in member curvature_
 * @param _curvature New value to be moved in member curvature_
 */
void etsi_its_cam_msgs::msg::BasicVehicleContainerHighFrequency::curvature(
        etsi_its_cam_msgs::msg::Curvature&& _curvature)
{
    m_curvature = std::move(_curvature);
}

/*!
 * @brief This function returns a constant reference to member curvature_
 * @return Constant reference to member curvature_
 */
const etsi_its_cam_msgs::msg::Curvature& etsi_its_cam_msgs::msg::BasicVehicleContainerHighFrequency::curvature() const
{
    return m_curvature;
}

/*!
 * @brief This function returns a reference to member curvature_
 * @return Reference to member curvature_
 */
etsi_its_cam_msgs::msg::Curvature& etsi_its_cam_msgs::msg::BasicVehicleContainerHighFrequency::curvature()
{
    return m_curvature;
}
/*!
 * @brief This function copies the value in member curvature_calculation_mode
 * @param _curvature_calculation_mode New value to be copied in member curvature_calculation_mode
 */
void etsi_its_cam_msgs::msg::BasicVehicleContainerHighFrequency::curvature_calculation_mode(
        const etsi_its_cam_msgs::msg::CurvatureCalculationMode& _curvature_calculation_mode)
{
    m_curvature_calculation_mode = _curvature_calculation_mode;
}

/*!
 * @brief This function moves the value in member curvature_calculation_mode
 * @param _curvature_calculation_mode New value to be moved in member curvature_calculation_mode
 */
void etsi_its_cam_msgs::msg::BasicVehicleContainerHighFrequency::curvature_calculation_mode(
        etsi_its_cam_msgs::msg::CurvatureCalculationMode&& _curvature_calculation_mode)
{
    m_curvature_calculation_mode = std::move(_curvature_calculation_mode);
}

/*!
 * @brief This function returns a constant reference to member curvature_calculation_mode
 * @return Constant reference to member curvature_calculation_mode
 */
const etsi_its_cam_msgs::msg::CurvatureCalculationMode& etsi_its_cam_msgs::msg::BasicVehicleContainerHighFrequency::curvature_calculation_mode() const
{
    return m_curvature_calculation_mode;
}

/*!
 * @brief This function returns a reference to member curvature_calculation_mode
 * @return Reference to member curvature_calculation_mode
 */
etsi_its_cam_msgs::msg::CurvatureCalculationMode& etsi_its_cam_msgs::msg::BasicVehicleContainerHighFrequency::curvature_calculation_mode()
{
    return m_curvature_calculation_mode;
}
/*!
 * @brief This function copies the value in member yaw_rate
 * @param _yaw_rate New value to be copied in member yaw_rate
 */
void etsi_its_cam_msgs::msg::BasicVehicleContainerHighFrequency::yaw_rate(
        const etsi_its_cam_msgs::msg::YawRate& _yaw_rate)
{
    m_yaw_rate = _yaw_rate;
}

/*!
 * @brief This function moves the value in member yaw_rate
 * @param _yaw_rate New value to be moved in member yaw_rate
 */
void etsi_its_cam_msgs::msg::BasicVehicleContainerHighFrequency::yaw_rate(
        etsi_its_cam_msgs::msg::YawRate&& _yaw_rate)
{
    m_yaw_rate = std::move(_yaw_rate);
}

/*!
 * @brief This function returns a constant reference to member yaw_rate
 * @return Constant reference to member yaw_rate
 */
const etsi_its_cam_msgs::msg::YawRate& etsi_its_cam_msgs::msg::BasicVehicleContainerHighFrequency::yaw_rate() const
{
    return m_yaw_rate;
}

/*!
 * @brief This function returns a reference to member yaw_rate
 * @return Reference to member yaw_rate
 */
etsi_its_cam_msgs::msg::YawRate& etsi_its_cam_msgs::msg::BasicVehicleContainerHighFrequency::yaw_rate()
{
    return m_yaw_rate;
}
/*!
 * @brief This function copies the value in member acceleration_control
 * @param _acceleration_control New value to be copied in member acceleration_control
 */
void etsi_its_cam_msgs::msg::BasicVehicleContainerHighFrequency::acceleration_control(
        const etsi_its_cam_msgs::msg::AccelerationControl& _acceleration_control)
{
    m_acceleration_control = _acceleration_control;
}

/*!
 * @brief This function moves the value in member acceleration_control
 * @param _acceleration_control New value to be moved in member acceleration_control
 */
void etsi_its_cam_msgs::msg::BasicVehicleContainerHighFrequency::acceleration_control(
        etsi_its_cam_msgs::msg::AccelerationControl&& _acceleration_control)
{
    m_acceleration_control = std::move(_acceleration_control);
}

/*!
 * @brief This function returns a constant reference to member acceleration_control
 * @return Constant reference to member acceleration_control
 */
const etsi_its_cam_msgs::msg::AccelerationControl& etsi_its_cam_msgs::msg::BasicVehicleContainerHighFrequency::acceleration_control() const
{
    return m_acceleration_control;
}

/*!
 * @brief This function returns a reference to member acceleration_control
 * @return Reference to member acceleration_control
 */
etsi_its_cam_msgs::msg::AccelerationControl& etsi_its_cam_msgs::msg::BasicVehicleContainerHighFrequency::acceleration_control()
{
    return m_acceleration_control;
}
/*!
 * @brief This function sets a value in member acceleration_control_is_present
 * @param _acceleration_control_is_present New value for member acceleration_control_is_present
 */
void etsi_its_cam_msgs::msg::BasicVehicleContainerHighFrequency::acceleration_control_is_present(
        bool _acceleration_control_is_present)
{
    m_acceleration_control_is_present = _acceleration_control_is_present;
}

/*!
 * @brief This function returns the value of member acceleration_control_is_present
 * @return Value of member acceleration_control_is_present
 */
bool etsi_its_cam_msgs::msg::BasicVehicleContainerHighFrequency::acceleration_control_is_present() const
{
    return m_acceleration_control_is_present;
}

/*!
 * @brief This function returns a reference to member acceleration_control_is_present
 * @return Reference to member acceleration_control_is_present
 */
bool& etsi_its_cam_msgs::msg::BasicVehicleContainerHighFrequency::acceleration_control_is_present()
{
    return m_acceleration_control_is_present;
}

/*!
 * @brief This function copies the value in member lane_position
 * @param _lane_position New value to be copied in member lane_position
 */
void etsi_its_cam_msgs::msg::BasicVehicleContainerHighFrequency::lane_position(
        const etsi_its_cam_msgs::msg::LanePosition& _lane_position)
{
    m_lane_position = _lane_position;
}

/*!
 * @brief This function moves the value in member lane_position
 * @param _lane_position New value to be moved in member lane_position
 */
void etsi_its_cam_msgs::msg::BasicVehicleContainerHighFrequency::lane_position(
        etsi_its_cam_msgs::msg::LanePosition&& _lane_position)
{
    m_lane_position = std::move(_lane_position);
}

/*!
 * @brief This function returns a constant reference to member lane_position
 * @return Constant reference to member lane_position
 */
const etsi_its_cam_msgs::msg::LanePosition& etsi_its_cam_msgs::msg::BasicVehicleContainerHighFrequency::lane_position() const
{
    return m_lane_position;
}

/*!
 * @brief This function returns a reference to member lane_position
 * @return Reference to member lane_position
 */
etsi_its_cam_msgs::msg::LanePosition& etsi_its_cam_msgs::msg::BasicVehicleContainerHighFrequency::lane_position()
{
    return m_lane_position;
}
/*!
 * @brief This function sets a value in member lane_position_is_present
 * @param _lane_position_is_present New value for member lane_position_is_present
 */
void etsi_its_cam_msgs::msg::BasicVehicleContainerHighFrequency::lane_position_is_present(
        bool _lane_position_is_present)
{
    m_lane_position_is_present = _lane_position_is_present;
}

/*!
 * @brief This function returns the value of member lane_position_is_present
 * @return Value of member lane_position_is_present
 */
bool etsi_its_cam_msgs::msg::BasicVehicleContainerHighFrequency::lane_position_is_present() const
{
    return m_lane_position_is_present;
}

/*!
 * @brief This function returns a reference to member lane_position_is_present
 * @return Reference to member lane_position_is_present
 */
bool& etsi_its_cam_msgs::msg::BasicVehicleContainerHighFrequency::lane_position_is_present()
{
    return m_lane_position_is_present;
}

/*!
 * @brief This function copies the value in member steering_wheel_angle
 * @param _steering_wheel_angle New value to be copied in member steering_wheel_angle
 */
void etsi_its_cam_msgs::msg::BasicVehicleContainerHighFrequency::steering_wheel_angle(
        const etsi_its_cam_msgs::msg::SteeringWheelAngle& _steering_wheel_angle)
{
    m_steering_wheel_angle = _steering_wheel_angle;
}

/*!
 * @brief This function moves the value in member steering_wheel_angle
 * @param _steering_wheel_angle New value to be moved in member steering_wheel_angle
 */
void etsi_its_cam_msgs::msg::BasicVehicleContainerHighFrequency::steering_wheel_angle(
        etsi_its_cam_msgs::msg::SteeringWheelAngle&& _steering_wheel_angle)
{
    m_steering_wheel_angle = std::move(_steering_wheel_angle);
}

/*!
 * @brief This function returns a constant reference to member steering_wheel_angle
 * @return Constant reference to member steering_wheel_angle
 */
const etsi_its_cam_msgs::msg::SteeringWheelAngle& etsi_its_cam_msgs::msg::BasicVehicleContainerHighFrequency::steering_wheel_angle() const
{
    return m_steering_wheel_angle;
}

/*!
 * @brief This function returns a reference to member steering_wheel_angle
 * @return Reference to member steering_wheel_angle
 */
etsi_its_cam_msgs::msg::SteeringWheelAngle& etsi_its_cam_msgs::msg::BasicVehicleContainerHighFrequency::steering_wheel_angle()
{
    return m_steering_wheel_angle;
}
/*!
 * @brief This function sets a value in member steering_wheel_angle_is_present
 * @param _steering_wheel_angle_is_present New value for member steering_wheel_angle_is_present
 */
void etsi_its_cam_msgs::msg::BasicVehicleContainerHighFrequency::steering_wheel_angle_is_present(
        bool _steering_wheel_angle_is_present)
{
    m_steering_wheel_angle_is_present = _steering_wheel_angle_is_present;
}

/*!
 * @brief This function returns the value of member steering_wheel_angle_is_present
 * @return Value of member steering_wheel_angle_is_present
 */
bool etsi_its_cam_msgs::msg::BasicVehicleContainerHighFrequency::steering_wheel_angle_is_present() const
{
    return m_steering_wheel_angle_is_present;
}

/*!
 * @brief This function returns a reference to member steering_wheel_angle_is_present
 * @return Reference to member steering_wheel_angle_is_present
 */
bool& etsi_its_cam_msgs::msg::BasicVehicleContainerHighFrequency::steering_wheel_angle_is_present()
{
    return m_steering_wheel_angle_is_present;
}

/*!
 * @brief This function copies the value in member lateral_acceleration
 * @param _lateral_acceleration New value to be copied in member lateral_acceleration
 */
void etsi_its_cam_msgs::msg::BasicVehicleContainerHighFrequency::lateral_acceleration(
        const etsi_its_cam_msgs::msg::LateralAcceleration& _lateral_acceleration)
{
    m_lateral_acceleration = _lateral_acceleration;
}

/*!
 * @brief This function moves the value in member lateral_acceleration
 * @param _lateral_acceleration New value to be moved in member lateral_acceleration
 */
void etsi_its_cam_msgs::msg::BasicVehicleContainerHighFrequency::lateral_acceleration(
        etsi_its_cam_msgs::msg::LateralAcceleration&& _lateral_acceleration)
{
    m_lateral_acceleration = std::move(_lateral_acceleration);
}

/*!
 * @brief This function returns a constant reference to member lateral_acceleration
 * @return Constant reference to member lateral_acceleration
 */
const etsi_its_cam_msgs::msg::LateralAcceleration& etsi_its_cam_msgs::msg::BasicVehicleContainerHighFrequency::lateral_acceleration() const
{
    return m_lateral_acceleration;
}

/*!
 * @brief This function returns a reference to member lateral_acceleration
 * @return Reference to member lateral_acceleration
 */
etsi_its_cam_msgs::msg::LateralAcceleration& etsi_its_cam_msgs::msg::BasicVehicleContainerHighFrequency::lateral_acceleration()
{
    return m_lateral_acceleration;
}
/*!
 * @brief This function sets a value in member lateral_acceleration_is_present
 * @param _lateral_acceleration_is_present New value for member lateral_acceleration_is_present
 */
void etsi_its_cam_msgs::msg::BasicVehicleContainerHighFrequency::lateral_acceleration_is_present(
        bool _lateral_acceleration_is_present)
{
    m_lateral_acceleration_is_present = _lateral_acceleration_is_present;
}

/*!
 * @brief This function returns the value of member lateral_acceleration_is_present
 * @return Value of member lateral_acceleration_is_present
 */
bool etsi_its_cam_msgs::msg::BasicVehicleContainerHighFrequency::lateral_acceleration_is_present() const
{
    return m_lateral_acceleration_is_present;
}

/*!
 * @brief This function returns a reference to member lateral_acceleration_is_present
 * @return Reference to member lateral_acceleration_is_present
 */
bool& etsi_its_cam_msgs::msg::BasicVehicleContainerHighFrequency::lateral_acceleration_is_present()
{
    return m_lateral_acceleration_is_present;
}

/*!
 * @brief This function copies the value in member vertical_acceleration
 * @param _vertical_acceleration New value to be copied in member vertical_acceleration
 */
void etsi_its_cam_msgs::msg::BasicVehicleContainerHighFrequency::vertical_acceleration(
        const etsi_its_cam_msgs::msg::VerticalAcceleration& _vertical_acceleration)
{
    m_vertical_acceleration = _vertical_acceleration;
}

/*!
 * @brief This function moves the value in member vertical_acceleration
 * @param _vertical_acceleration New value to be moved in member vertical_acceleration
 */
void etsi_its_cam_msgs::msg::BasicVehicleContainerHighFrequency::vertical_acceleration(
        etsi_its_cam_msgs::msg::VerticalAcceleration&& _vertical_acceleration)
{
    m_vertical_acceleration = std::move(_vertical_acceleration);
}

/*!
 * @brief This function returns a constant reference to member vertical_acceleration
 * @return Constant reference to member vertical_acceleration
 */
const etsi_its_cam_msgs::msg::VerticalAcceleration& etsi_its_cam_msgs::msg::BasicVehicleContainerHighFrequency::vertical_acceleration() const
{
    return m_vertical_acceleration;
}

/*!
 * @brief This function returns a reference to member vertical_acceleration
 * @return Reference to member vertical_acceleration
 */
etsi_its_cam_msgs::msg::VerticalAcceleration& etsi_its_cam_msgs::msg::BasicVehicleContainerHighFrequency::vertical_acceleration()
{
    return m_vertical_acceleration;
}
/*!
 * @brief This function sets a value in member vertical_acceleration_is_present
 * @param _vertical_acceleration_is_present New value for member vertical_acceleration_is_present
 */
void etsi_its_cam_msgs::msg::BasicVehicleContainerHighFrequency::vertical_acceleration_is_present(
        bool _vertical_acceleration_is_present)
{
    m_vertical_acceleration_is_present = _vertical_acceleration_is_present;
}

/*!
 * @brief This function returns the value of member vertical_acceleration_is_present
 * @return Value of member vertical_acceleration_is_present
 */
bool etsi_its_cam_msgs::msg::BasicVehicleContainerHighFrequency::vertical_acceleration_is_present() const
{
    return m_vertical_acceleration_is_present;
}

/*!
 * @brief This function returns a reference to member vertical_acceleration_is_present
 * @return Reference to member vertical_acceleration_is_present
 */
bool& etsi_its_cam_msgs::msg::BasicVehicleContainerHighFrequency::vertical_acceleration_is_present()
{
    return m_vertical_acceleration_is_present;
}

/*!
 * @brief This function copies the value in member performance_class
 * @param _performance_class New value to be copied in member performance_class
 */
void etsi_its_cam_msgs::msg::BasicVehicleContainerHighFrequency::performance_class(
        const etsi_its_cam_msgs::msg::PerformanceClass& _performance_class)
{
    m_performance_class = _performance_class;
}

/*!
 * @brief This function moves the value in member performance_class
 * @param _performance_class New value to be moved in member performance_class
 */
void etsi_its_cam_msgs::msg::BasicVehicleContainerHighFrequency::performance_class(
        etsi_its_cam_msgs::msg::PerformanceClass&& _performance_class)
{
    m_performance_class = std::move(_performance_class);
}

/*!
 * @brief This function returns a constant reference to member performance_class
 * @return Constant reference to member performance_class
 */
const etsi_its_cam_msgs::msg::PerformanceClass& etsi_its_cam_msgs::msg::BasicVehicleContainerHighFrequency::performance_class() const
{
    return m_performance_class;
}

/*!
 * @brief This function returns a reference to member performance_class
 * @return Reference to member performance_class
 */
etsi_its_cam_msgs::msg::PerformanceClass& etsi_its_cam_msgs::msg::BasicVehicleContainerHighFrequency::performance_class()
{
    return m_performance_class;
}
/*!
 * @brief This function sets a value in member performance_class_is_present
 * @param _performance_class_is_present New value for member performance_class_is_present
 */
void etsi_its_cam_msgs::msg::BasicVehicleContainerHighFrequency::performance_class_is_present(
        bool _performance_class_is_present)
{
    m_performance_class_is_present = _performance_class_is_present;
}

/*!
 * @brief This function returns the value of member performance_class_is_present
 * @return Value of member performance_class_is_present
 */
bool etsi_its_cam_msgs::msg::BasicVehicleContainerHighFrequency::performance_class_is_present() const
{
    return m_performance_class_is_present;
}

/*!
 * @brief This function returns a reference to member performance_class_is_present
 * @return Reference to member performance_class_is_present
 */
bool& etsi_its_cam_msgs::msg::BasicVehicleContainerHighFrequency::performance_class_is_present()
{
    return m_performance_class_is_present;
}

/*!
 * @brief This function copies the value in member cen_dsrc_tolling_zone
 * @param _cen_dsrc_tolling_zone New value to be copied in member cen_dsrc_tolling_zone
 */
void etsi_its_cam_msgs::msg::BasicVehicleContainerHighFrequency::cen_dsrc_tolling_zone(
        const etsi_its_cam_msgs::msg::CenDsrcTollingZone& _cen_dsrc_tolling_zone)
{
    m_cen_dsrc_tolling_zone = _cen_dsrc_tolling_zone;
}

/*!
 * @brief This function moves the value in member cen_dsrc_tolling_zone
 * @param _cen_dsrc_tolling_zone New value to be moved in member cen_dsrc_tolling_zone
 */
void etsi_its_cam_msgs::msg::BasicVehicleContainerHighFrequency::cen_dsrc_tolling_zone(
        etsi_its_cam_msgs::msg::CenDsrcTollingZone&& _cen_dsrc_tolling_zone)
{
    m_cen_dsrc_tolling_zone = std::move(_cen_dsrc_tolling_zone);
}

/*!
 * @brief This function returns a constant reference to member cen_dsrc_tolling_zone
 * @return Constant reference to member cen_dsrc_tolling_zone
 */
const etsi_its_cam_msgs::msg::CenDsrcTollingZone& etsi_its_cam_msgs::msg::BasicVehicleContainerHighFrequency::cen_dsrc_tolling_zone() const
{
    return m_cen_dsrc_tolling_zone;
}

/*!
 * @brief This function returns a reference to member cen_dsrc_tolling_zone
 * @return Reference to member cen_dsrc_tolling_zone
 */
etsi_its_cam_msgs::msg::CenDsrcTollingZone& etsi_its_cam_msgs::msg::BasicVehicleContainerHighFrequency::cen_dsrc_tolling_zone()
{
    return m_cen_dsrc_tolling_zone;
}
/*!
 * @brief This function sets a value in member cen_dsrc_tolling_zone_is_present
 * @param _cen_dsrc_tolling_zone_is_present New value for member cen_dsrc_tolling_zone_is_present
 */
void etsi_its_cam_msgs::msg::BasicVehicleContainerHighFrequency::cen_dsrc_tolling_zone_is_present(
        bool _cen_dsrc_tolling_zone_is_present)
{
    m_cen_dsrc_tolling_zone_is_present = _cen_dsrc_tolling_zone_is_present;
}

/*!
 * @brief This function returns the value of member cen_dsrc_tolling_zone_is_present
 * @return Value of member cen_dsrc_tolling_zone_is_present
 */
bool etsi_its_cam_msgs::msg::BasicVehicleContainerHighFrequency::cen_dsrc_tolling_zone_is_present() const
{
    return m_cen_dsrc_tolling_zone_is_present;
}

/*!
 * @brief This function returns a reference to member cen_dsrc_tolling_zone_is_present
 * @return Reference to member cen_dsrc_tolling_zone_is_present
 */
bool& etsi_its_cam_msgs::msg::BasicVehicleContainerHighFrequency::cen_dsrc_tolling_zone_is_present()
{
    return m_cen_dsrc_tolling_zone_is_present;
}


size_t etsi_its_cam_msgs::msg::BasicVehicleContainerHighFrequency::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;



    return current_align;
}

bool etsi_its_cam_msgs::msg::BasicVehicleContainerHighFrequency::isKeyDefined()
{
    return false;
}

void etsi_its_cam_msgs::msg::BasicVehicleContainerHighFrequency::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
                           
}


