// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file HighFrequencyContainer.cpp
 * This source file contains the implementation of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "HighFrequencyContainer.h"

#include <fastcdr/Cdr.h>


#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>


namespace etsi_its_cam_msgs {

namespace msg {

namespace HighFrequencyContainer_Constants {


} // namespace HighFrequencyContainer_Constants


HighFrequencyContainer::HighFrequencyContainer()
{
}

HighFrequencyContainer::~HighFrequencyContainer()
{
}

HighFrequencyContainer::HighFrequencyContainer(
        const HighFrequencyContainer& x)
{
    m_choice = x.m_choice;
    m_basic_vehicle_container_high_frequency = x.m_basic_vehicle_container_high_frequency;
    m_rsu_container_high_frequency = x.m_rsu_container_high_frequency;
}

HighFrequencyContainer::HighFrequencyContainer(
        HighFrequencyContainer&& x) noexcept
{
    m_choice = x.m_choice;
    m_basic_vehicle_container_high_frequency = std::move(x.m_basic_vehicle_container_high_frequency);
    m_rsu_container_high_frequency = std::move(x.m_rsu_container_high_frequency);
}

HighFrequencyContainer& HighFrequencyContainer::operator =(
        const HighFrequencyContainer& x)
{

    m_choice = x.m_choice;
    m_basic_vehicle_container_high_frequency = x.m_basic_vehicle_container_high_frequency;
    m_rsu_container_high_frequency = x.m_rsu_container_high_frequency;
    return *this;
}

HighFrequencyContainer& HighFrequencyContainer::operator =(
        HighFrequencyContainer&& x) noexcept
{

    m_choice = x.m_choice;
    m_basic_vehicle_container_high_frequency = std::move(x.m_basic_vehicle_container_high_frequency);
    m_rsu_container_high_frequency = std::move(x.m_rsu_container_high_frequency);
    return *this;
}

bool HighFrequencyContainer::operator ==(
        const HighFrequencyContainer& x) const
{
    return (m_choice == x.m_choice &&
           m_basic_vehicle_container_high_frequency == x.m_basic_vehicle_container_high_frequency &&
           m_rsu_container_high_frequency == x.m_rsu_container_high_frequency);
}

bool HighFrequencyContainer::operator !=(
        const HighFrequencyContainer& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function sets a value in member choice
 * @param _choice New value for member choice
 */
void HighFrequencyContainer::choice(
        uint8_t _choice)
{
    m_choice = _choice;
}

/*!
 * @brief This function returns the value of member choice
 * @return Value of member choice
 */
uint8_t HighFrequencyContainer::choice() const
{
    return m_choice;
}

/*!
 * @brief This function returns a reference to member choice
 * @return Reference to member choice
 */
uint8_t& HighFrequencyContainer::choice()
{
    return m_choice;
}


/*!
 * @brief This function copies the value in member basic_vehicle_container_high_frequency
 * @param _basic_vehicle_container_high_frequency New value to be copied in member basic_vehicle_container_high_frequency
 */
void HighFrequencyContainer::basic_vehicle_container_high_frequency(
        const etsi_its_cam_msgs::msg::BasicVehicleContainerHighFrequency& _basic_vehicle_container_high_frequency)
{
    m_basic_vehicle_container_high_frequency = _basic_vehicle_container_high_frequency;
}

/*!
 * @brief This function moves the value in member basic_vehicle_container_high_frequency
 * @param _basic_vehicle_container_high_frequency New value to be moved in member basic_vehicle_container_high_frequency
 */
void HighFrequencyContainer::basic_vehicle_container_high_frequency(
        etsi_its_cam_msgs::msg::BasicVehicleContainerHighFrequency&& _basic_vehicle_container_high_frequency)
{
    m_basic_vehicle_container_high_frequency = std::move(_basic_vehicle_container_high_frequency);
}

/*!
 * @brief This function returns a constant reference to member basic_vehicle_container_high_frequency
 * @return Constant reference to member basic_vehicle_container_high_frequency
 */
const etsi_its_cam_msgs::msg::BasicVehicleContainerHighFrequency& HighFrequencyContainer::basic_vehicle_container_high_frequency() const
{
    return m_basic_vehicle_container_high_frequency;
}

/*!
 * @brief This function returns a reference to member basic_vehicle_container_high_frequency
 * @return Reference to member basic_vehicle_container_high_frequency
 */
etsi_its_cam_msgs::msg::BasicVehicleContainerHighFrequency& HighFrequencyContainer::basic_vehicle_container_high_frequency()
{
    return m_basic_vehicle_container_high_frequency;
}


/*!
 * @brief This function copies the value in member rsu_container_high_frequency
 * @param _rsu_container_high_frequency New value to be copied in member rsu_container_high_frequency
 */
void HighFrequencyContainer::rsu_container_high_frequency(
        const etsi_its_cam_msgs::msg::RSUContainerHighFrequency& _rsu_container_high_frequency)
{
    m_rsu_container_high_frequency = _rsu_container_high_frequency;
}

/*!
 * @brief This function moves the value in member rsu_container_high_frequency
 * @param _rsu_container_high_frequency New value to be moved in member rsu_container_high_frequency
 */
void HighFrequencyContainer::rsu_container_high_frequency(
        etsi_its_cam_msgs::msg::RSUContainerHighFrequency&& _rsu_container_high_frequency)
{
    m_rsu_container_high_frequency = std::move(_rsu_container_high_frequency);
}

/*!
 * @brief This function returns a constant reference to member rsu_container_high_frequency
 * @return Constant reference to member rsu_container_high_frequency
 */
const etsi_its_cam_msgs::msg::RSUContainerHighFrequency& HighFrequencyContainer::rsu_container_high_frequency() const
{
    return m_rsu_container_high_frequency;
}

/*!
 * @brief This function returns a reference to member rsu_container_high_frequency
 * @return Reference to member rsu_container_high_frequency
 */
etsi_its_cam_msgs::msg::RSUContainerHighFrequency& HighFrequencyContainer::rsu_container_high_frequency()
{
    return m_rsu_container_high_frequency;
}




} // namespace msg


} // namespace etsi_its_cam_msgs
// Include auxiliary functions like for serializing/deserializing.
#include "HighFrequencyContainerCdrAux.ipp"

