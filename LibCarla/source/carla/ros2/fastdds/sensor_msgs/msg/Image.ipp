// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file Image.cpp
 * This source file contains the implementation of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "Image.h"

#include <fastcdr/Cdr.h>


#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>


namespace sensor_msgs {

namespace msg {

template <class ALLOCATOR>
ImageT<ALLOCATOR>::ImageT()
{
}

template <class ALLOCATOR>
ImageT<ALLOCATOR>::~ImageT()
{
}

template <class ALLOCATOR>
ImageT<ALLOCATOR>::ImageT(
        const ImageT<ALLOCATOR>& x)
{
    m_header = x.m_header;
    m_height = x.m_height;
    m_width = x.m_width;
    m_encoding = x.m_encoding;
    m_is_bigendian = x.m_is_bigendian;
    m_step = x.m_step;
    m_data = x.m_data;
}

template <class ALLOCATOR>
ImageT<ALLOCATOR>::ImageT(
        ImageT<ALLOCATOR>&& x) noexcept
{
    m_header = std::move(x.m_header);
    m_height = x.m_height;
    m_width = x.m_width;
    m_encoding = std::move(x.m_encoding);
    m_is_bigendian = x.m_is_bigendian;
    m_step = x.m_step;
    m_data = std::move(x.m_data);
}

template <class ALLOCATOR>
ImageT<ALLOCATOR>& ImageT<ALLOCATOR>::operator =(
        const ImageT<ALLOCATOR>& x)
{

    m_header = x.m_header;
    m_height = x.m_height;
    m_width = x.m_width;
    m_encoding = x.m_encoding;
    m_is_bigendian = x.m_is_bigendian;
    m_step = x.m_step;
    m_data = x.m_data;
    return *this;
}

template <class ALLOCATOR>
ImageT<ALLOCATOR>& ImageT<ALLOCATOR>::operator =(
        ImageT<ALLOCATOR>&& x) noexcept
{

    m_header = std::move(x.m_header);
    m_height = x.m_height;
    m_width = x.m_width;
    m_encoding = std::move(x.m_encoding);
    m_is_bigendian = x.m_is_bigendian;
    m_step = x.m_step;
    m_data = std::move(x.m_data);
    return *this;
}

template <class ALLOCATOR>
bool ImageT<ALLOCATOR>::operator ==(
        const ImageT<ALLOCATOR>& x) const
{
    return (m_header == x.m_header &&
           m_height == x.m_height &&
           m_width == x.m_width &&
           m_encoding == x.m_encoding &&
           m_is_bigendian == x.m_is_bigendian &&
           m_step == x.m_step &&
           m_data == x.m_data);
}

template <class ALLOCATOR>
bool ImageT<ALLOCATOR>::operator !=(
        const ImageT<ALLOCATOR>& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member header
 * @param _header New value to be copied in member header
 */
template <class ALLOCATOR>
void ImageT<ALLOCATOR>::header(
        const std_msgs::msg::Header& _header)
{
    m_header = _header;
}

/*!
 * @brief This function moves the value in member header
 * @param _header New value to be moved in member header
 */
template <class ALLOCATOR>
void ImageT<ALLOCATOR>::header(
        std_msgs::msg::Header&& _header)
{
    m_header = std::move(_header);
}

/*!
 * @brief This function returns a constant reference to member header
 * @return Constant reference to member header
 */
template <class ALLOCATOR>
const std_msgs::msg::Header& ImageT<ALLOCATOR>::header() const
{
    return m_header;
}

/*!
 * @brief This function returns a reference to member header
 * @return Reference to member header
 */
template <class ALLOCATOR>
std_msgs::msg::Header& ImageT<ALLOCATOR>::header()
{
    return m_header;
}


/*!
 * @brief This function sets a value in member height
 * @param _height New value for member height
 */
template <class ALLOCATOR>
void ImageT<ALLOCATOR>::height(
        uint32_t _height)
{
    m_height = _height;
}

/*!
 * @brief This function returns the value of member height
 * @return Value of member height
 */
template <class ALLOCATOR>
uint32_t ImageT<ALLOCATOR>::height() const
{
    return m_height;
}

/*!
 * @brief This function returns a reference to member height
 * @return Reference to member height
 */
template <class ALLOCATOR>
uint32_t& ImageT<ALLOCATOR>::height()
{
    return m_height;
}


/*!
 * @brief This function sets a value in member width
 * @param _width New value for member width
 */
template <class ALLOCATOR>
void ImageT<ALLOCATOR>::width(
        uint32_t _width)
{
    m_width = _width;
}

/*!
 * @brief This function returns the value of member width
 * @return Value of member width
 */
template <class ALLOCATOR>
uint32_t ImageT<ALLOCATOR>::width() const
{
    return m_width;
}

/*!
 * @brief This function returns the value of member width
 * @return Reference of member width
 */
template <class ALLOCATOR>
uint32_t& ImageT<ALLOCATOR>::width()
{
    return m_width;
}

/*!
 * @brief This function returns a reference to member width
 * @return Reference to member widthImageT::
/*!
 * @brief This function copies the value in member encoding
 * @param _encoding New value to be copied in member encoding
 */
template <class ALLOCATOR>
void ImageT<ALLOCATOR>::encoding(
        const std::string& _encoding)
{
    m_encoding = _encoding;
}

/*!
 * @brief This function moves the value in member encoding
 * @param _encoding New value to be moved in member encoding
 */
template <class ALLOCATOR>
void ImageT<ALLOCATOR>::encoding(
        std::string&& _encoding)
{
    m_encoding = std::move(_encoding);
}

/*!
 * @brief This function returns a constant reference to member encoding
 * @return Constant reference to member encoding
 */
template <class ALLOCATOR>
const std::string& ImageT<ALLOCATOR>::encoding() const
{
    return m_encoding;
}

/*!
 * @brief This function returns a reference to member encoding
 * @return Reference to member encoding
 */
template <class ALLOCATOR>
std::string& ImageT<ALLOCATOR>::encoding()
{
    return m_encoding;
}


/*!
 * @brief This function sets a value in member is_bigendian
 * @param _is_bigendian New value for member is_bigendian
 */
template <class ALLOCATOR>
void ImageT<ALLOCATOR>::is_bigendian(
        uint8_t _is_bigendian)
{
    m_is_bigendian = _is_bigendian;
}

/*!
 * @brief This function returns the value of member is_bigendian
 * @return Value of member is_bigendian
 */
template <class ALLOCATOR>
uint8_t ImageT<ALLOCATOR>::is_bigendian() const
{
    return m_is_bigendian;
}

/*!
 * @brief This function returns a reference to member is_bigendian
 * @return Reference to member is_bigendian
 */
template <class ALLOCATOR>
uint8_t& ImageT<ALLOCATOR>::is_bigendian()
{
    return m_is_bigendian;
}


/*!
 * @brief This function sets a value in member step
 * @param _step New value for member step
 */
template <class ALLOCATOR>
void ImageT<ALLOCATOR>::step(
        uint32_t _step)
{
    m_step = _step;
}

/*!
 * @brief This function returns the value of member step
 * @return Value of member step
 */
template <class ALLOCATOR>
uint32_t ImageT<ALLOCATOR>::step() const
{
    return m_step;
}

/*!
 * @brief This function returns a reference to member step
 * @return Reference to member step
 */
template <class ALLOCATOR>
uint32_t& ImageT<ALLOCATOR>::step()
{
    return m_step;
}


/*!
 * @brief This function copies the value in member data
 * @param _data New value to be copied in member data
 */
template <class ALLOCATOR>
void ImageT<ALLOCATOR>::data(
        const ImageT<ALLOCATOR>::vector_type& _data)
{
    m_data = _data;
}

/*!
 * @brief This function moves the value in member data
 * @param _data New value to be moved in member data
 */
template <class ALLOCATOR>
void ImageT<ALLOCATOR>::data(
        ImageT<ALLOCATOR>::vector_type&& _data)
{
    m_data = std::move(_data);
}

/*!
 * @brief This function returns a constant reference to member data
 * @return Constant reference to member data
 */
template <class ALLOCATOR>
const typename ImageT<ALLOCATOR>::vector_type& ImageT<ALLOCATOR>::data() const
{
    return m_data;
}

/*!
 * @brief This function returns a reference to member data
 * @return Reference to member data
 */
template <class ALLOCATOR>
typename ImageT<ALLOCATOR>::vector_type& ImageT<ALLOCATOR>::data()
{
    return m_data;
}




} // namespace msg


} // namespace sensor_msgs
// Include auxiliary functions like for serializing/deserializing.
//#include "ImageCdrAux.ipp"

