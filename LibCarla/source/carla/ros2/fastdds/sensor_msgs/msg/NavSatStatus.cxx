// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file NavSatStatus.cpp
 * This source file contains the implementation of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "NavSatStatus.h"

#include <fastcdr/Cdr.h>


#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>


namespace sensor_msgs {

namespace msg {

namespace NavSatStatus_Constants {


} // namespace NavSatStatus_Constants


NavSatStatus::NavSatStatus()
{
}

NavSatStatus::~NavSatStatus()
{
}

NavSatStatus::NavSatStatus(
        const NavSatStatus& x)
{
    m_status = x.m_status;
    m_service = x.m_service;
}

NavSatStatus::NavSatStatus(
        NavSatStatus&& x) noexcept
{
    m_status = x.m_status;
    m_service = x.m_service;
}

NavSatStatus& NavSatStatus::operator =(
        const NavSatStatus& x)
{

    m_status = x.m_status;
    m_service = x.m_service;
    return *this;
}

NavSatStatus& NavSatStatus::operator =(
        NavSatStatus&& x) noexcept
{

    m_status = x.m_status;
    m_service = x.m_service;
    return *this;
}

bool NavSatStatus::operator ==(
        const NavSatStatus& x) const
{
    return (m_status == x.m_status &&
           m_service == x.m_service);
}

bool NavSatStatus::operator !=(
        const NavSatStatus& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function sets a value in member status
 * @param _status New value for member status
 */
void NavSatStatus::status(
        int8_t _status)
{
    m_status = _status;
}

/*!
 * @brief This function returns the value of member status
 * @return Value of member status
 */
int8_t NavSatStatus::status() const
{
    return m_status;
}

/*!
 * @brief This function returns a reference to member status
 * @return Reference to member status
 */
int8_t& NavSatStatus::status()
{
    return m_status;
}


/*!
 * @brief This function sets a value in member service
 * @param _service New value for member service
 */
void NavSatStatus::service(
        uint16_t _service)
{
    m_service = _service;
}

/*!
 * @brief This function returns the value of member service
 * @return Value of member service
 */
uint16_t NavSatStatus::service() const
{
    return m_service;
}

/*!
 * @brief This function returns a reference to member service
 * @return Reference to member service
 */
uint16_t& NavSatStatus::service()
{
    return m_service;
}




} // namespace msg


} // namespace sensor_msgs
// Include auxiliary functions like for serializing/deserializing.
#include "NavSatStatusCdrAux.ipp"

