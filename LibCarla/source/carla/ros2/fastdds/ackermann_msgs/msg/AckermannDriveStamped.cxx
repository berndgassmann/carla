// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file AckermannDriveStamped.cpp
 * This source file contains the implementation of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "AckermannDriveStamped.h"

#include <fastcdr/Cdr.h>


#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>


namespace ackermann_msgs {

namespace msg {



AckermannDriveStamped::AckermannDriveStamped()
{
}

AckermannDriveStamped::~AckermannDriveStamped()
{
}

AckermannDriveStamped::AckermannDriveStamped(
        const AckermannDriveStamped& x)
{
    m_header = x.m_header;
    m_drive = x.m_drive;
}

AckermannDriveStamped::AckermannDriveStamped(
        AckermannDriveStamped&& x) noexcept
{
    m_header = std::move(x.m_header);
    m_drive = std::move(x.m_drive);
}

AckermannDriveStamped& AckermannDriveStamped::operator =(
        const AckermannDriveStamped& x)
{

    m_header = x.m_header;
    m_drive = x.m_drive;
    return *this;
}

AckermannDriveStamped& AckermannDriveStamped::operator =(
        AckermannDriveStamped&& x) noexcept
{

    m_header = std::move(x.m_header);
    m_drive = std::move(x.m_drive);
    return *this;
}

bool AckermannDriveStamped::operator ==(
        const AckermannDriveStamped& x) const
{
    return (m_header == x.m_header &&
           m_drive == x.m_drive);
}

bool AckermannDriveStamped::operator !=(
        const AckermannDriveStamped& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member header
 * @param _header New value to be copied in member header
 */
void AckermannDriveStamped::header(
        const std_msgs::msg::Header& _header)
{
    m_header = _header;
}

/*!
 * @brief This function moves the value in member header
 * @param _header New value to be moved in member header
 */
void AckermannDriveStamped::header(
        std_msgs::msg::Header&& _header)
{
    m_header = std::move(_header);
}

/*!
 * @brief This function returns a constant reference to member header
 * @return Constant reference to member header
 */
const std_msgs::msg::Header& AckermannDriveStamped::header() const
{
    return m_header;
}

/*!
 * @brief This function returns a reference to member header
 * @return Reference to member header
 */
std_msgs::msg::Header& AckermannDriveStamped::header()
{
    return m_header;
}


/*!
 * @brief This function copies the value in member drive
 * @param _drive New value to be copied in member drive
 */
void AckermannDriveStamped::drive(
        const ackermann_msgs::msg::AckermannDrive& _drive)
{
    m_drive = _drive;
}

/*!
 * @brief This function moves the value in member drive
 * @param _drive New value to be moved in member drive
 */
void AckermannDriveStamped::drive(
        ackermann_msgs::msg::AckermannDrive&& _drive)
{
    m_drive = std::move(_drive);
}

/*!
 * @brief This function returns a constant reference to member drive
 * @return Constant reference to member drive
 */
const ackermann_msgs::msg::AckermannDrive& AckermannDriveStamped::drive() const
{
    return m_drive;
}

/*!
 * @brief This function returns a reference to member drive
 * @return Reference to member drive
 */
ackermann_msgs::msg::AckermannDrive& AckermannDriveStamped::drive()
{
    return m_drive;
}




} // namespace msg


} // namespace ackermann_msgs
// Include auxiliary functions like for serializing/deserializing.
#include "AckermannDriveStampedCdrAux.ipp"

