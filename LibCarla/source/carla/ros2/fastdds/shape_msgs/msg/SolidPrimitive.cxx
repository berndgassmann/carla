// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file SolidPrimitive.cpp
 * This source file contains the implementation of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "SolidPrimitive.h"

#include <fastcdr/Cdr.h>


#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>


namespace shape_msgs {

namespace msg {

namespace SolidPrimitive_Constants {


} // namespace SolidPrimitive_Constants


SolidPrimitive::SolidPrimitive()
{
}

SolidPrimitive::~SolidPrimitive()
{
}

SolidPrimitive::SolidPrimitive(
        const SolidPrimitive& x)
{
    m_type = x.m_type;
    m_dimensions = x.m_dimensions;
    m_polygon = x.m_polygon;
}

SolidPrimitive::SolidPrimitive(
        SolidPrimitive&& x) noexcept
{
    m_type = x.m_type;
    m_dimensions = std::move(x.m_dimensions);
    m_polygon = std::move(x.m_polygon);
}

SolidPrimitive& SolidPrimitive::operator =(
        const SolidPrimitive& x)
{

    m_type = x.m_type;
    m_dimensions = x.m_dimensions;
    m_polygon = x.m_polygon;
    return *this;
}

SolidPrimitive& SolidPrimitive::operator =(
        SolidPrimitive&& x) noexcept
{

    m_type = x.m_type;
    m_dimensions = std::move(x.m_dimensions);
    m_polygon = std::move(x.m_polygon);
    return *this;
}

bool SolidPrimitive::operator ==(
        const SolidPrimitive& x) const
{
    return (m_type == x.m_type &&
           m_dimensions == x.m_dimensions &&
           m_polygon == x.m_polygon);
}

bool SolidPrimitive::operator !=(
        const SolidPrimitive& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function sets a value in member type
 * @param _type New value for member type
 */
void SolidPrimitive::type(
        uint8_t _type)
{
    m_type = _type;
}

/*!
 * @brief This function returns the value of member type
 * @return Value of member type
 */
uint8_t SolidPrimitive::type() const
{
    return m_type;
}

/*!
 * @brief This function returns a reference to member type
 * @return Reference to member type
 */
uint8_t& SolidPrimitive::type()
{
    return m_type;
}


/*!
 * @brief This function copies the value in member dimensions
 * @param _dimensions New value to be copied in member dimensions
 */
void SolidPrimitive::dimensions(
        const std::vector<double>& _dimensions)
{
    m_dimensions = _dimensions;
}

/*!
 * @brief This function moves the value in member dimensions
 * @param _dimensions New value to be moved in member dimensions
 */
void SolidPrimitive::dimensions(
        std::vector<double>&& _dimensions)
{
    m_dimensions = std::move(_dimensions);
}

/*!
 * @brief This function returns a constant reference to member dimensions
 * @return Constant reference to member dimensions
 */
const std::vector<double>& SolidPrimitive::dimensions() const
{
    return m_dimensions;
}

/*!
 * @brief This function returns a reference to member dimensions
 * @return Reference to member dimensions
 */
std::vector<double>& SolidPrimitive::dimensions()
{
    return m_dimensions;
}


/*!
 * @brief This function copies the value in member polygon
 * @param _polygon New value to be copied in member polygon
 */
void SolidPrimitive::polygon(
        const geometry_msgs::msg::Polygon& _polygon)
{
    m_polygon = _polygon;
}

/*!
 * @brief This function moves the value in member polygon
 * @param _polygon New value to be moved in member polygon
 */
void SolidPrimitive::polygon(
        geometry_msgs::msg::Polygon&& _polygon)
{
    m_polygon = std::move(_polygon);
}

/*!
 * @brief This function returns a constant reference to member polygon
 * @return Constant reference to member polygon
 */
const geometry_msgs::msg::Polygon& SolidPrimitive::polygon() const
{
    return m_polygon;
}

/*!
 * @brief This function returns a reference to member polygon
 * @return Reference to member polygon
 */
geometry_msgs::msg::Polygon& SolidPrimitive::polygon()
{
    return m_polygon;
}




} // namespace msg


} // namespace shape_msgs
// Include auxiliary functions like for serializing/deserializing.
#include "SolidPrimitiveCdrAux.ipp"

