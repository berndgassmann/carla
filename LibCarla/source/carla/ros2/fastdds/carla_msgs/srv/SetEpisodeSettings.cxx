// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file SetEpisodeSettings.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "SetEpisodeSettings.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

carla_msgs::srv::SetEpisodeSettings_Request::SetEpisodeSettings_Request()
{
    // m_episode_settings com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@79ca92b9


}

carla_msgs::srv::SetEpisodeSettings_Request::~SetEpisodeSettings_Request()
{
}

carla_msgs::srv::SetEpisodeSettings_Request::SetEpisodeSettings_Request(
        const SetEpisodeSettings_Request& x)
{
    m_episode_settings = x.m_episode_settings;
}

carla_msgs::srv::SetEpisodeSettings_Request::SetEpisodeSettings_Request(
        SetEpisodeSettings_Request&& x)
{
    m_episode_settings = std::move(x.m_episode_settings);
}

carla_msgs::srv::SetEpisodeSettings_Request& carla_msgs::srv::SetEpisodeSettings_Request::operator =(
        const SetEpisodeSettings_Request& x)
{

    m_episode_settings = x.m_episode_settings;

    return *this;
}

carla_msgs::srv::SetEpisodeSettings_Request& carla_msgs::srv::SetEpisodeSettings_Request::operator =(
        SetEpisodeSettings_Request&& x)
{

    m_episode_settings = std::move(x.m_episode_settings);

    return *this;
}

bool carla_msgs::srv::SetEpisodeSettings_Request::operator ==(
        const SetEpisodeSettings_Request& x) const
{

    return (m_episode_settings == x.m_episode_settings);
}

bool carla_msgs::srv::SetEpisodeSettings_Request::operator !=(
        const SetEpisodeSettings_Request& x) const
{
    return !(*this == x);
}

size_t carla_msgs::srv::SetEpisodeSettings_Request::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += carla_msgs::msg::CarlaEpisodeSettings::getMaxCdrSerializedSize(current_alignment);

    return current_alignment - initial_alignment;
}

size_t carla_msgs::srv::SetEpisodeSettings_Request::getCdrSerializedSize(
        const carla_msgs::srv::SetEpisodeSettings_Request& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += carla_msgs::msg::CarlaEpisodeSettings::getCdrSerializedSize(data.episode_settings(), current_alignment);

    return current_alignment - initial_alignment;
}

void carla_msgs::srv::SetEpisodeSettings_Request::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_episode_settings;

}

void carla_msgs::srv::SetEpisodeSettings_Request::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_episode_settings;
}

/*!
 * @brief This function copies the value in member episode_settings
 * @param _episode_settings New value to be copied in member episode_settings
 */
void carla_msgs::srv::SetEpisodeSettings_Request::episode_settings(
        const carla_msgs::msg::CarlaEpisodeSettings& _episode_settings)
{
    m_episode_settings = _episode_settings;
}

/*!
 * @brief This function moves the value in member episode_settings
 * @param _episode_settings New value to be moved in member episode_settings
 */
void carla_msgs::srv::SetEpisodeSettings_Request::episode_settings(
        carla_msgs::msg::CarlaEpisodeSettings&& _episode_settings)
{
    m_episode_settings = std::move(_episode_settings);
}

/*!
 * @brief This function returns a constant reference to member episode_settings
 * @return Constant reference to member episode_settings
 */
const carla_msgs::msg::CarlaEpisodeSettings& carla_msgs::srv::SetEpisodeSettings_Request::episode_settings() const
{
    return m_episode_settings;
}

/*!
 * @brief This function returns a reference to member episode_settings
 * @return Reference to member episode_settings
 */
carla_msgs::msg::CarlaEpisodeSettings& carla_msgs::srv::SetEpisodeSettings_Request::episode_settings()
{
    return m_episode_settings;
}

size_t carla_msgs::srv::SetEpisodeSettings_Request::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;



    return current_align;
}

bool carla_msgs::srv::SetEpisodeSettings_Request::isKeyDefined()
{
    return false;
}

void carla_msgs::srv::SetEpisodeSettings_Request::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
     
}

carla_msgs::srv::SetEpisodeSettings_Response::SetEpisodeSettings_Response()
{
    // m_success com.eprosima.idl.parser.typecode.PrimitiveTypeCode@2aa3cd93
    m_success = false;

}

carla_msgs::srv::SetEpisodeSettings_Response::~SetEpisodeSettings_Response()
{
}

carla_msgs::srv::SetEpisodeSettings_Response::SetEpisodeSettings_Response(
        const SetEpisodeSettings_Response& x)
{
    m_success = x.m_success;
}

carla_msgs::srv::SetEpisodeSettings_Response::SetEpisodeSettings_Response(
        SetEpisodeSettings_Response&& x)
{
    m_success = x.m_success;
}

carla_msgs::srv::SetEpisodeSettings_Response& carla_msgs::srv::SetEpisodeSettings_Response::operator =(
        const SetEpisodeSettings_Response& x)
{

    m_success = x.m_success;

    return *this;
}

carla_msgs::srv::SetEpisodeSettings_Response& carla_msgs::srv::SetEpisodeSettings_Response::operator =(
        SetEpisodeSettings_Response&& x)
{

    m_success = x.m_success;

    return *this;
}

bool carla_msgs::srv::SetEpisodeSettings_Response::operator ==(
        const SetEpisodeSettings_Response& x) const
{

    return (m_success == x.m_success);
}

bool carla_msgs::srv::SetEpisodeSettings_Response::operator !=(
        const SetEpisodeSettings_Response& x) const
{
    return !(*this == x);
}

size_t carla_msgs::srv::SetEpisodeSettings_Response::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    return current_alignment - initial_alignment;
}

size_t carla_msgs::srv::SetEpisodeSettings_Response::getCdrSerializedSize(
        const carla_msgs::srv::SetEpisodeSettings_Response& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    return current_alignment - initial_alignment;
}

void carla_msgs::srv::SetEpisodeSettings_Response::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_success;

}

void carla_msgs::srv::SetEpisodeSettings_Response::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_success;
}

/*!
 * @brief This function sets a value in member success
 * @param _success New value for member success
 */
void carla_msgs::srv::SetEpisodeSettings_Response::success(
        bool _success)
{
    m_success = _success;
}

/*!
 * @brief This function returns the value of member success
 * @return Value of member success
 */
bool carla_msgs::srv::SetEpisodeSettings_Response::success() const
{
    return m_success;
}

/*!
 * @brief This function returns a reference to member success
 * @return Reference to member success
 */
bool& carla_msgs::srv::SetEpisodeSettings_Response::success()
{
    return m_success;
}


size_t carla_msgs::srv::SetEpisodeSettings_Response::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;



    return current_align;
}

bool carla_msgs::srv::SetEpisodeSettings_Response::isKeyDefined()
{
    return false;
}

void carla_msgs::srv::SetEpisodeSettings_Response::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
     
}


