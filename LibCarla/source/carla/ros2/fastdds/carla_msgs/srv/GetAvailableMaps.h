// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file GetAvailableMaps.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifndef _FAST_DDS_GENERATED_CARLA_MSGS_SRV_GETAVAILABLEMAPS_H_
#define _FAST_DDS_GENERATED_CARLA_MSGS_SRV_GETAVAILABLEMAPS_H_

#include <array>
#include <bitset>
#include <cstdint>
#include <map>
#include <string>
#include <vector>

#include <fastcdr/cdr/fixed_size_string.hpp>
#include <fastcdr/xcdr/external.hpp>
#include <fastcdr/xcdr/optional.hpp>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec(dllexport)
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(GETAVAILABLEMAPS_SOURCE)
#define GETAVAILABLEMAPS_DllAPI __declspec(dllexport)
#else
#define GETAVAILABLEMAPS_DllAPI __declspec(dllimport)
#endif  // GETAVAILABLEMAPS_SOURCE
#else
#define GETAVAILABLEMAPS_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define GETAVAILABLEMAPS_DllAPI
#endif  // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
class CdrSizeCalculator;
}  // namespace fastcdr
}  // namespace eprosima

namespace carla_msgs {

namespace srv {

/*!
 * @brief This class represents the structure GetAvailableMaps_Request defined by the user in the IDL file.
 * @ingroup GetAvailableMaps
 */
class GetAvailableMaps_Request {
public:
  /*!
   * @brief Default constructor.
   */
  eProsima_user_DllExport GetAvailableMaps_Request();

  /*!
   * @brief Default destructor.
   */
  eProsima_user_DllExport ~GetAvailableMaps_Request();

  /*!
   * @brief Copy constructor.
   * @param x Reference to the object carla_msgs::srv::GetAvailableMaps_Request that will be copied.
   */
  eProsima_user_DllExport GetAvailableMaps_Request(const GetAvailableMaps_Request& x);

  /*!
   * @brief Move constructor.
   * @param x Reference to the object carla_msgs::srv::GetAvailableMaps_Request that will be copied.
   */
  eProsima_user_DllExport GetAvailableMaps_Request(GetAvailableMaps_Request&& x) noexcept;

  /*!
   * @brief Copy assignment.
   * @param x Reference to the object carla_msgs::srv::GetAvailableMaps_Request that will be copied.
   */
  eProsima_user_DllExport GetAvailableMaps_Request& operator=(const GetAvailableMaps_Request& x);

  /*!
   * @brief Move assignment.
   * @param x Reference to the object carla_msgs::srv::GetAvailableMaps_Request that will be copied.
   */
  eProsima_user_DllExport GetAvailableMaps_Request& operator=(GetAvailableMaps_Request&& x) noexcept;

  /*!
   * @brief Comparison operator.
   * @param x carla_msgs::srv::GetAvailableMaps_Request object to compare.
   */
  eProsima_user_DllExport bool operator==(const GetAvailableMaps_Request& x) const;

  /*!
   * @brief Comparison operator.
   * @param x carla_msgs::srv::GetAvailableMaps_Request object to compare.
   */
  eProsima_user_DllExport bool operator!=(const GetAvailableMaps_Request& x) const;

  /*!
   * @brief This function sets a value in member structure_needs_at_least_one_member
   * @param _structure_needs_at_least_one_member New value for member structure_needs_at_least_one_member
   */
  eProsima_user_DllExport void structure_needs_at_least_one_member(uint8_t _structure_needs_at_least_one_member);

  /*!
   * @brief This function returns the value of member structure_needs_at_least_one_member
   * @return Value of member structure_needs_at_least_one_member
   */
  eProsima_user_DllExport uint8_t structure_needs_at_least_one_member() const;

  /*!
   * @brief This function returns a reference to member structure_needs_at_least_one_member
   * @return Reference to member structure_needs_at_least_one_member
   */
  eProsima_user_DllExport uint8_t& structure_needs_at_least_one_member();

private:
  uint8_t m_structure_needs_at_least_one_member{0};
};

/*!
 * @brief This class represents the structure GetAvailableMaps_Response defined by the user in the IDL file.
 * @ingroup GetAvailableMaps
 */
class GetAvailableMaps_Response {
public:
  /*!
   * @brief Default constructor.
   */
  eProsima_user_DllExport GetAvailableMaps_Response();

  /*!
   * @brief Default destructor.
   */
  eProsima_user_DllExport ~GetAvailableMaps_Response();

  /*!
   * @brief Copy constructor.
   * @param x Reference to the object carla_msgs::srv::GetAvailableMaps_Response that will be copied.
   */
  eProsima_user_DllExport GetAvailableMaps_Response(const GetAvailableMaps_Response& x);

  /*!
   * @brief Move constructor.
   * @param x Reference to the object carla_msgs::srv::GetAvailableMaps_Response that will be copied.
   */
  eProsima_user_DllExport GetAvailableMaps_Response(GetAvailableMaps_Response&& x) noexcept;

  /*!
   * @brief Copy assignment.
   * @param x Reference to the object carla_msgs::srv::GetAvailableMaps_Response that will be copied.
   */
  eProsima_user_DllExport GetAvailableMaps_Response& operator=(const GetAvailableMaps_Response& x);

  /*!
   * @brief Move assignment.
   * @param x Reference to the object carla_msgs::srv::GetAvailableMaps_Response that will be copied.
   */
  eProsima_user_DllExport GetAvailableMaps_Response& operator=(GetAvailableMaps_Response&& x) noexcept;

  /*!
   * @brief Comparison operator.
   * @param x carla_msgs::srv::GetAvailableMaps_Response object to compare.
   */
  eProsima_user_DllExport bool operator==(const GetAvailableMaps_Response& x) const;

  /*!
   * @brief Comparison operator.
   * @param x carla_msgs::srv::GetAvailableMaps_Response object to compare.
   */
  eProsima_user_DllExport bool operator!=(const GetAvailableMaps_Response& x) const;

  /*!
   * @brief This function copies the value in member maps
   * @param _maps New value to be copied in member maps
   */
  eProsima_user_DllExport void maps(const std::vector<std::string>& _maps);

  /*!
   * @brief This function moves the value in member maps
   * @param _maps New value to be moved in member maps
   */
  eProsima_user_DllExport void maps(std::vector<std::string>&& _maps);

  /*!
   * @brief This function returns a constant reference to member maps
   * @return Constant reference to member maps
   */
  eProsima_user_DllExport const std::vector<std::string>& maps() const;

  /*!
   * @brief This function returns a reference to member maps
   * @return Reference to member maps
   */
  eProsima_user_DllExport std::vector<std::string>& maps();

private:
  std::vector<std::string> m_maps;
};

}  // namespace srv

}  // namespace carla_msgs

#endif  // _FAST_DDS_GENERATED_CARLA_MSGS_SRV_GETAVAILABLEMAPS_H_
