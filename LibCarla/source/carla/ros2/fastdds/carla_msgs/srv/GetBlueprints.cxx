// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file GetBlueprints.cpp
 * This source file contains the implementation of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "GetBlueprints.h"

#include <fastcdr/Cdr.h>


#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>


namespace carla_msgs {

namespace srv {



GetBlueprints_Request::GetBlueprints_Request()
{
}

GetBlueprints_Request::~GetBlueprints_Request()
{
}

GetBlueprints_Request::GetBlueprints_Request(
        const GetBlueprints_Request& x)
{
    m_filter = x.m_filter;
}

GetBlueprints_Request::GetBlueprints_Request(
        GetBlueprints_Request&& x) noexcept
{
    m_filter = std::move(x.m_filter);
}

GetBlueprints_Request& GetBlueprints_Request::operator =(
        const GetBlueprints_Request& x)
{

    m_filter = x.m_filter;
    return *this;
}

GetBlueprints_Request& GetBlueprints_Request::operator =(
        GetBlueprints_Request&& x) noexcept
{

    m_filter = std::move(x.m_filter);
    return *this;
}

bool GetBlueprints_Request::operator ==(
        const GetBlueprints_Request& x) const
{
    return (m_filter == x.m_filter);
}

bool GetBlueprints_Request::operator !=(
        const GetBlueprints_Request& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member filter
 * @param _filter New value to be copied in member filter
 */
void GetBlueprints_Request::filter(
        const std::string& _filter)
{
    m_filter = _filter;
}

/*!
 * @brief This function moves the value in member filter
 * @param _filter New value to be moved in member filter
 */
void GetBlueprints_Request::filter(
        std::string&& _filter)
{
    m_filter = std::move(_filter);
}

/*!
 * @brief This function returns a constant reference to member filter
 * @return Constant reference to member filter
 */
const std::string& GetBlueprints_Request::filter() const
{
    return m_filter;
}

/*!
 * @brief This function returns a reference to member filter
 * @return Reference to member filter
 */
std::string& GetBlueprints_Request::filter()
{
    return m_filter;
}






GetBlueprints_Response::GetBlueprints_Response()
{
}

GetBlueprints_Response::~GetBlueprints_Response()
{
}

GetBlueprints_Response::GetBlueprints_Response(
        const GetBlueprints_Response& x)
{
    m_blueprints = x.m_blueprints;
}

GetBlueprints_Response::GetBlueprints_Response(
        GetBlueprints_Response&& x) noexcept
{
    m_blueprints = std::move(x.m_blueprints);
}

GetBlueprints_Response& GetBlueprints_Response::operator =(
        const GetBlueprints_Response& x)
{

    m_blueprints = x.m_blueprints;
    return *this;
}

GetBlueprints_Response& GetBlueprints_Response::operator =(
        GetBlueprints_Response&& x) noexcept
{

    m_blueprints = std::move(x.m_blueprints);
    return *this;
}

bool GetBlueprints_Response::operator ==(
        const GetBlueprints_Response& x) const
{
    return (m_blueprints == x.m_blueprints);
}

bool GetBlueprints_Response::operator !=(
        const GetBlueprints_Response& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member blueprints
 * @param _blueprints New value to be copied in member blueprints
 */
void GetBlueprints_Response::blueprints(
        const std::vector<carla_msgs::msg::CarlaActorBlueprint>& _blueprints)
{
    m_blueprints = _blueprints;
}

/*!
 * @brief This function moves the value in member blueprints
 * @param _blueprints New value to be moved in member blueprints
 */
void GetBlueprints_Response::blueprints(
        std::vector<carla_msgs::msg::CarlaActorBlueprint>&& _blueprints)
{
    m_blueprints = std::move(_blueprints);
}

/*!
 * @brief This function returns a constant reference to member blueprints
 * @return Constant reference to member blueprints
 */
const std::vector<carla_msgs::msg::CarlaActorBlueprint>& GetBlueprints_Response::blueprints() const
{
    return m_blueprints;
}

/*!
 * @brief This function returns a reference to member blueprints
 * @return Reference to member blueprints
 */
std::vector<carla_msgs::msg::CarlaActorBlueprint>& GetBlueprints_Response::blueprints()
{
    return m_blueprints;
}




} // namespace srv


} // namespace carla_msgs
// Include auxiliary functions like for serializing/deserializing.
#include "GetBlueprintsCdrAux.ipp"

