// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file GetBlueprints.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "GetBlueprints.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

carla_msgs::srv::GetBlueprints_Request::GetBlueprints_Request()
{
    // m_filter com.eprosima.idl.parser.typecode.StringTypeCode@7c417213
    m_filter ="";

}

carla_msgs::srv::GetBlueprints_Request::~GetBlueprints_Request()
{
}

carla_msgs::srv::GetBlueprints_Request::GetBlueprints_Request(
        const GetBlueprints_Request& x)
{
    m_filter = x.m_filter;
}

carla_msgs::srv::GetBlueprints_Request::GetBlueprints_Request(
        GetBlueprints_Request&& x)
{
    m_filter = std::move(x.m_filter);
}

carla_msgs::srv::GetBlueprints_Request& carla_msgs::srv::GetBlueprints_Request::operator =(
        const GetBlueprints_Request& x)
{

    m_filter = x.m_filter;

    return *this;
}

carla_msgs::srv::GetBlueprints_Request& carla_msgs::srv::GetBlueprints_Request::operator =(
        GetBlueprints_Request&& x)
{

    m_filter = std::move(x.m_filter);

    return *this;
}

bool carla_msgs::srv::GetBlueprints_Request::operator ==(
        const GetBlueprints_Request& x) const
{

    return (m_filter == x.m_filter);
}

bool carla_msgs::srv::GetBlueprints_Request::operator !=(
        const GetBlueprints_Request& x) const
{
    return !(*this == x);
}

size_t carla_msgs::srv::GetBlueprints_Request::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

    return current_alignment - initial_alignment;
}

size_t carla_msgs::srv::GetBlueprints_Request::getCdrSerializedSize(
        const carla_msgs::srv::GetBlueprints_Request& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.filter().size() + 1;

    return current_alignment - initial_alignment;
}

void carla_msgs::srv::GetBlueprints_Request::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_filter;

}

void carla_msgs::srv::GetBlueprints_Request::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_filter;
}

/*!
 * @brief This function copies the value in member filter
 * @param _filter New value to be copied in member filter
 */
void carla_msgs::srv::GetBlueprints_Request::filter(
        const std::string& _filter)
{
    m_filter = _filter;
}

/*!
 * @brief This function moves the value in member filter
 * @param _filter New value to be moved in member filter
 */
void carla_msgs::srv::GetBlueprints_Request::filter(
        std::string&& _filter)
{
    m_filter = std::move(_filter);
}

/*!
 * @brief This function returns a constant reference to member filter
 * @return Constant reference to member filter
 */
const std::string& carla_msgs::srv::GetBlueprints_Request::filter() const
{
    return m_filter;
}

/*!
 * @brief This function returns a reference to member filter
 * @return Reference to member filter
 */
std::string& carla_msgs::srv::GetBlueprints_Request::filter()
{
    return m_filter;
}

size_t carla_msgs::srv::GetBlueprints_Request::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;



    return current_align;
}

bool carla_msgs::srv::GetBlueprints_Request::isKeyDefined()
{
    return false;
}

void carla_msgs::srv::GetBlueprints_Request::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
     
}

carla_msgs::srv::GetBlueprints_Response::GetBlueprints_Response()
{
    // m_blueprints com.eprosima.idl.parser.typecode.SequenceTypeCode@5e4c8041


}

carla_msgs::srv::GetBlueprints_Response::~GetBlueprints_Response()
{
}

carla_msgs::srv::GetBlueprints_Response::GetBlueprints_Response(
        const GetBlueprints_Response& x)
{
    m_blueprints = x.m_blueprints;
}

carla_msgs::srv::GetBlueprints_Response::GetBlueprints_Response(
        GetBlueprints_Response&& x)
{
    m_blueprints = std::move(x.m_blueprints);
}

carla_msgs::srv::GetBlueprints_Response& carla_msgs::srv::GetBlueprints_Response::operator =(
        const GetBlueprints_Response& x)
{

    m_blueprints = x.m_blueprints;

    return *this;
}

carla_msgs::srv::GetBlueprints_Response& carla_msgs::srv::GetBlueprints_Response::operator =(
        GetBlueprints_Response&& x)
{

    m_blueprints = std::move(x.m_blueprints);

    return *this;
}

bool carla_msgs::srv::GetBlueprints_Response::operator ==(
        const GetBlueprints_Response& x) const
{

    return (m_blueprints == x.m_blueprints);
}

bool carla_msgs::srv::GetBlueprints_Response::operator !=(
        const GetBlueprints_Response& x) const
{
    return !(*this == x);
}

size_t carla_msgs::srv::GetBlueprints_Response::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    for(size_t a = 0; a < 100; ++a)
    {
        current_alignment += carla_msgs::msg::CarlaActorBlueprint::getMaxCdrSerializedSize(current_alignment);}

    return current_alignment - initial_alignment;
}

size_t carla_msgs::srv::GetBlueprints_Response::getCdrSerializedSize(
        const carla_msgs::srv::GetBlueprints_Response& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    for(size_t a = 0; a < data.blueprints().size(); ++a)
    {
        current_alignment += carla_msgs::msg::CarlaActorBlueprint::getCdrSerializedSize(data.blueprints().at(a), current_alignment);}

    return current_alignment - initial_alignment;
}

void carla_msgs::srv::GetBlueprints_Response::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_blueprints;
}

void carla_msgs::srv::GetBlueprints_Response::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_blueprints;}

/*!
 * @brief This function copies the value in member blueprints
 * @param _blueprints New value to be copied in member blueprints
 */
void carla_msgs::srv::GetBlueprints_Response::blueprints(
        const std::vector<carla_msgs::msg::CarlaActorBlueprint>& _blueprints)
{
    m_blueprints = _blueprints;
}

/*!
 * @brief This function moves the value in member blueprints
 * @param _blueprints New value to be moved in member blueprints
 */
void carla_msgs::srv::GetBlueprints_Response::blueprints(
        std::vector<carla_msgs::msg::CarlaActorBlueprint>&& _blueprints)
{
    m_blueprints = std::move(_blueprints);
}

/*!
 * @brief This function returns a constant reference to member blueprints
 * @return Constant reference to member blueprints
 */
const std::vector<carla_msgs::msg::CarlaActorBlueprint>& carla_msgs::srv::GetBlueprints_Response::blueprints() const
{
    return m_blueprints;
}

/*!
 * @brief This function returns a reference to member blueprints
 * @return Reference to member blueprints
 */
std::vector<carla_msgs::msg::CarlaActorBlueprint>& carla_msgs::srv::GetBlueprints_Response::blueprints()
{
    return m_blueprints;
}

size_t carla_msgs::srv::GetBlueprints_Response::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;



    return current_align;
}

bool carla_msgs::srv::GetBlueprints_Response::isKeyDefined()
{
    return false;
}

void carla_msgs::srv::GetBlueprints_Response::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
     
}


