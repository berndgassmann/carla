// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file LoadMap.cpp
 * This source file contains the implementation of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "LoadMap.h"

#include <fastcdr/Cdr.h>


#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>


namespace carla_msgs {

namespace srv {

namespace LoadMap_Request_Constants {


} // namespace LoadMap_Request_Constants


LoadMap_Request::LoadMap_Request()
{
}

LoadMap_Request::~LoadMap_Request()
{
}

LoadMap_Request::LoadMap_Request(
        const LoadMap_Request& x)
{
    m_mapname = x.m_mapname;
    m_force_reload = x.m_force_reload;
    m_reset_episode_settings = x.m_reset_episode_settings;
    m_map_layers = x.m_map_layers;
}

LoadMap_Request::LoadMap_Request(
        LoadMap_Request&& x) noexcept
{
    m_mapname = std::move(x.m_mapname);
    m_force_reload = x.m_force_reload;
    m_reset_episode_settings = x.m_reset_episode_settings;
    m_map_layers = x.m_map_layers;
}

LoadMap_Request& LoadMap_Request::operator =(
        const LoadMap_Request& x)
{

    m_mapname = x.m_mapname;
    m_force_reload = x.m_force_reload;
    m_reset_episode_settings = x.m_reset_episode_settings;
    m_map_layers = x.m_map_layers;
    return *this;
}

LoadMap_Request& LoadMap_Request::operator =(
        LoadMap_Request&& x) noexcept
{

    m_mapname = std::move(x.m_mapname);
    m_force_reload = x.m_force_reload;
    m_reset_episode_settings = x.m_reset_episode_settings;
    m_map_layers = x.m_map_layers;
    return *this;
}

bool LoadMap_Request::operator ==(
        const LoadMap_Request& x) const
{
    return (m_mapname == x.m_mapname &&
           m_force_reload == x.m_force_reload &&
           m_reset_episode_settings == x.m_reset_episode_settings &&
           m_map_layers == x.m_map_layers);
}

bool LoadMap_Request::operator !=(
        const LoadMap_Request& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member mapname
 * @param _mapname New value to be copied in member mapname
 */
void LoadMap_Request::mapname(
        const std::string& _mapname)
{
    m_mapname = _mapname;
}

/*!
 * @brief This function moves the value in member mapname
 * @param _mapname New value to be moved in member mapname
 */
void LoadMap_Request::mapname(
        std::string&& _mapname)
{
    m_mapname = std::move(_mapname);
}

/*!
 * @brief This function returns a constant reference to member mapname
 * @return Constant reference to member mapname
 */
const std::string& LoadMap_Request::mapname() const
{
    return m_mapname;
}

/*!
 * @brief This function returns a reference to member mapname
 * @return Reference to member mapname
 */
std::string& LoadMap_Request::mapname()
{
    return m_mapname;
}


/*!
 * @brief This function sets a value in member force_reload
 * @param _force_reload New value for member force_reload
 */
void LoadMap_Request::force_reload(
        bool _force_reload)
{
    m_force_reload = _force_reload;
}

/*!
 * @brief This function returns the value of member force_reload
 * @return Value of member force_reload
 */
bool LoadMap_Request::force_reload() const
{
    return m_force_reload;
}

/*!
 * @brief This function returns a reference to member force_reload
 * @return Reference to member force_reload
 */
bool& LoadMap_Request::force_reload()
{
    return m_force_reload;
}


/*!
 * @brief This function sets a value in member reset_episode_settings
 * @param _reset_episode_settings New value for member reset_episode_settings
 */
void LoadMap_Request::reset_episode_settings(
        bool _reset_episode_settings)
{
    m_reset_episode_settings = _reset_episode_settings;
}

/*!
 * @brief This function returns the value of member reset_episode_settings
 * @return Value of member reset_episode_settings
 */
bool LoadMap_Request::reset_episode_settings() const
{
    return m_reset_episode_settings;
}

/*!
 * @brief This function returns a reference to member reset_episode_settings
 * @return Reference to member reset_episode_settings
 */
bool& LoadMap_Request::reset_episode_settings()
{
    return m_reset_episode_settings;
}


/*!
 * @brief This function sets a value in member map_layers
 * @param _map_layers New value for member map_layers
 */
void LoadMap_Request::map_layers(
        uint16_t _map_layers)
{
    m_map_layers = _map_layers;
}

/*!
 * @brief This function returns the value of member map_layers
 * @return Value of member map_layers
 */
uint16_t LoadMap_Request::map_layers() const
{
    return m_map_layers;
}

/*!
 * @brief This function returns a reference to member map_layers
 * @return Reference to member map_layers
 */
uint16_t& LoadMap_Request::map_layers()
{
    return m_map_layers;
}




LoadMap_Response::LoadMap_Response()
{
}

LoadMap_Response::~LoadMap_Response()
{
}

LoadMap_Response::LoadMap_Response(
        const LoadMap_Response& x)
{
    m_success = x.m_success;
}

LoadMap_Response::LoadMap_Response(
        LoadMap_Response&& x) noexcept
{
    m_success = x.m_success;
}

LoadMap_Response& LoadMap_Response::operator =(
        const LoadMap_Response& x)
{

    m_success = x.m_success;
    return *this;
}

LoadMap_Response& LoadMap_Response::operator =(
        LoadMap_Response&& x) noexcept
{

    m_success = x.m_success;
    return *this;
}

bool LoadMap_Response::operator ==(
        const LoadMap_Response& x) const
{
    return (m_success == x.m_success);
}

bool LoadMap_Response::operator !=(
        const LoadMap_Response& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function sets a value in member success
 * @param _success New value for member success
 */
void LoadMap_Response::success(
        bool _success)
{
    m_success = _success;
}

/*!
 * @brief This function returns the value of member success
 * @return Value of member success
 */
bool LoadMap_Response::success() const
{
    return m_success;
}

/*!
 * @brief This function returns a reference to member success
 * @return Reference to member success
 */
bool& LoadMap_Response::success()
{
    return m_success;
}




} // namespace srv


} // namespace carla_msgs
// Include auxiliary functions like for serializing/deserializing.
#include "LoadMapCdrAux.ipp"

