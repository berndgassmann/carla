// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file SpawnObject.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "SpawnObject.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

carla_msgs::srv::SpawnObject_Request::SpawnObject_Request()
{
    // m_blueprint com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@1622f1b

    // m_transform com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@72a7c7e0

    // m_attach_to com.eprosima.idl.parser.typecode.PrimitiveTypeCode@2e4b8173
    m_attach_to = 0;
    // m_random_pose com.eprosima.idl.parser.typecode.PrimitiveTypeCode@70e8f8e
    m_random_pose = false;

}

carla_msgs::srv::SpawnObject_Request::~SpawnObject_Request()
{



}

carla_msgs::srv::SpawnObject_Request::SpawnObject_Request(
        const SpawnObject_Request& x)
{
    m_blueprint = x.m_blueprint;
    m_transform = x.m_transform;
    m_attach_to = x.m_attach_to;
    m_random_pose = x.m_random_pose;
}

carla_msgs::srv::SpawnObject_Request::SpawnObject_Request(
        SpawnObject_Request&& x)
{
    m_blueprint = std::move(x.m_blueprint);
    m_transform = std::move(x.m_transform);
    m_attach_to = x.m_attach_to;
    m_random_pose = x.m_random_pose;
}

carla_msgs::srv::SpawnObject_Request& carla_msgs::srv::SpawnObject_Request::operator =(
        const SpawnObject_Request& x)
{

    m_blueprint = x.m_blueprint;
    m_transform = x.m_transform;
    m_attach_to = x.m_attach_to;
    m_random_pose = x.m_random_pose;

    return *this;
}

carla_msgs::srv::SpawnObject_Request& carla_msgs::srv::SpawnObject_Request::operator =(
        SpawnObject_Request&& x)
{

    m_blueprint = std::move(x.m_blueprint);
    m_transform = std::move(x.m_transform);
    m_attach_to = x.m_attach_to;
    m_random_pose = x.m_random_pose;

    return *this;
}

bool carla_msgs::srv::SpawnObject_Request::operator ==(
        const SpawnObject_Request& x) const
{

    return (m_blueprint == x.m_blueprint && m_transform == x.m_transform && m_attach_to == x.m_attach_to && m_random_pose == x.m_random_pose);
}

bool carla_msgs::srv::SpawnObject_Request::operator !=(
        const SpawnObject_Request& x) const
{
    return !(*this == x);
}

size_t carla_msgs::srv::SpawnObject_Request::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += carla_msgs::msg::CarlaActorBlueprint::getMaxCdrSerializedSize(current_alignment);
    current_alignment += geometry_msgs::msg::Pose::getMaxCdrSerializedSize(current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}

size_t carla_msgs::srv::SpawnObject_Request::getCdrSerializedSize(
        const carla_msgs::srv::SpawnObject_Request& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += carla_msgs::msg::CarlaActorBlueprint::getCdrSerializedSize(data.blueprint(), current_alignment);
    current_alignment += geometry_msgs::msg::Pose::getCdrSerializedSize(data.transform(), current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}

void carla_msgs::srv::SpawnObject_Request::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_blueprint;
    scdr << m_transform;
    scdr << m_attach_to;
    scdr << m_random_pose;

}

void carla_msgs::srv::SpawnObject_Request::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_blueprint;
    dcdr >> m_transform;
    dcdr >> m_attach_to;
    dcdr >> m_random_pose;
}

/*!
 * @brief This function copies the value in member blueprint
 * @param _blueprint New value to be copied in member blueprint
 */
void carla_msgs::srv::SpawnObject_Request::blueprint(
        const carla_msgs::msg::CarlaActorBlueprint& _blueprint)
{
    m_blueprint = _blueprint;
}

/*!
 * @brief This function moves the value in member blueprint
 * @param _blueprint New value to be moved in member blueprint
 */
void carla_msgs::srv::SpawnObject_Request::blueprint(
        carla_msgs::msg::CarlaActorBlueprint&& _blueprint)
{
    m_blueprint = std::move(_blueprint);
}

/*!
 * @brief This function returns a constant reference to member blueprint
 * @return Constant reference to member blueprint
 */
const carla_msgs::msg::CarlaActorBlueprint& carla_msgs::srv::SpawnObject_Request::blueprint() const
{
    return m_blueprint;
}

/*!
 * @brief This function returns a reference to member blueprint
 * @return Reference to member blueprint
 */
carla_msgs::msg::CarlaActorBlueprint& carla_msgs::srv::SpawnObject_Request::blueprint()
{
    return m_blueprint;
}
/*!
 * @brief This function copies the value in member transform
 * @param _transform New value to be copied in member transform
 */
void carla_msgs::srv::SpawnObject_Request::transform(
        const geometry_msgs::msg::Pose& _transform)
{
    m_transform = _transform;
}

/*!
 * @brief This function moves the value in member transform
 * @param _transform New value to be moved in member transform
 */
void carla_msgs::srv::SpawnObject_Request::transform(
        geometry_msgs::msg::Pose&& _transform)
{
    m_transform = std::move(_transform);
}

/*!
 * @brief This function returns a constant reference to member transform
 * @return Constant reference to member transform
 */
const geometry_msgs::msg::Pose& carla_msgs::srv::SpawnObject_Request::transform() const
{
    return m_transform;
}

/*!
 * @brief This function returns a reference to member transform
 * @return Reference to member transform
 */
geometry_msgs::msg::Pose& carla_msgs::srv::SpawnObject_Request::transform()
{
    return m_transform;
}
/*!
 * @brief This function sets a value in member attach_to
 * @param _attach_to New value for member attach_to
 */
void carla_msgs::srv::SpawnObject_Request::attach_to(
        uint32_t _attach_to)
{
    m_attach_to = _attach_to;
}

/*!
 * @brief This function returns the value of member attach_to
 * @return Value of member attach_to
 */
uint32_t carla_msgs::srv::SpawnObject_Request::attach_to() const
{
    return m_attach_to;
}

/*!
 * @brief This function returns a reference to member attach_to
 * @return Reference to member attach_to
 */
uint32_t& carla_msgs::srv::SpawnObject_Request::attach_to()
{
    return m_attach_to;
}

/*!
 * @brief This function sets a value in member random_pose
 * @param _random_pose New value for member random_pose
 */
void carla_msgs::srv::SpawnObject_Request::random_pose(
        bool _random_pose)
{
    m_random_pose = _random_pose;
}

/*!
 * @brief This function returns the value of member random_pose
 * @return Value of member random_pose
 */
bool carla_msgs::srv::SpawnObject_Request::random_pose() const
{
    return m_random_pose;
}

/*!
 * @brief This function returns a reference to member random_pose
 * @return Reference to member random_pose
 */
bool& carla_msgs::srv::SpawnObject_Request::random_pose()
{
    return m_random_pose;
}


size_t carla_msgs::srv::SpawnObject_Request::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;



    return current_align;
}

bool carla_msgs::srv::SpawnObject_Request::isKeyDefined()
{
    return false;
}

void carla_msgs::srv::SpawnObject_Request::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
        
}

carla_msgs::srv::SpawnObject_Response::SpawnObject_Response()
{
    // m_id com.eprosima.idl.parser.typecode.PrimitiveTypeCode@5e82df6a
    m_id = 0;
    // m_error_string com.eprosima.idl.parser.typecode.StringTypeCode@3f197a46
    m_error_string ="";

}

carla_msgs::srv::SpawnObject_Response::~SpawnObject_Response()
{

}

carla_msgs::srv::SpawnObject_Response::SpawnObject_Response(
        const SpawnObject_Response& x)
{
    m_id = x.m_id;
    m_error_string = x.m_error_string;
}

carla_msgs::srv::SpawnObject_Response::SpawnObject_Response(
        SpawnObject_Response&& x)
{
    m_id = x.m_id;
    m_error_string = std::move(x.m_error_string);
}

carla_msgs::srv::SpawnObject_Response& carla_msgs::srv::SpawnObject_Response::operator =(
        const SpawnObject_Response& x)
{

    m_id = x.m_id;
    m_error_string = x.m_error_string;

    return *this;
}

carla_msgs::srv::SpawnObject_Response& carla_msgs::srv::SpawnObject_Response::operator =(
        SpawnObject_Response&& x)
{

    m_id = x.m_id;
    m_error_string = std::move(x.m_error_string);

    return *this;
}

bool carla_msgs::srv::SpawnObject_Response::operator ==(
        const SpawnObject_Response& x) const
{

    return (m_id == x.m_id && m_error_string == x.m_error_string);
}

bool carla_msgs::srv::SpawnObject_Response::operator !=(
        const SpawnObject_Response& x) const
{
    return !(*this == x);
}

size_t carla_msgs::srv::SpawnObject_Response::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;


    return current_alignment - initial_alignment;
}

size_t carla_msgs::srv::SpawnObject_Response::getCdrSerializedSize(
        const carla_msgs::srv::SpawnObject_Response& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.error_string().size() + 1;


    return current_alignment - initial_alignment;
}

void carla_msgs::srv::SpawnObject_Response::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_id;
    scdr << m_error_string;

}

void carla_msgs::srv::SpawnObject_Response::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_id;
    dcdr >> m_error_string;
}

/*!
 * @brief This function sets a value in member id
 * @param _id New value for member id
 */
void carla_msgs::srv::SpawnObject_Response::id(
        int32_t _id)
{
    m_id = _id;
}

/*!
 * @brief This function returns the value of member id
 * @return Value of member id
 */
int32_t carla_msgs::srv::SpawnObject_Response::id() const
{
    return m_id;
}

/*!
 * @brief This function returns a reference to member id
 * @return Reference to member id
 */
int32_t& carla_msgs::srv::SpawnObject_Response::id()
{
    return m_id;
}

/*!
 * @brief This function copies the value in member error_string
 * @param _error_string New value to be copied in member error_string
 */
void carla_msgs::srv::SpawnObject_Response::error_string(
        const std::string& _error_string)
{
    m_error_string = _error_string;
}

/*!
 * @brief This function moves the value in member error_string
 * @param _error_string New value to be moved in member error_string
 */
void carla_msgs::srv::SpawnObject_Response::error_string(
        std::string&& _error_string)
{
    m_error_string = std::move(_error_string);
}

/*!
 * @brief This function returns a constant reference to member error_string
 * @return Constant reference to member error_string
 */
const std::string& carla_msgs::srv::SpawnObject_Response::error_string() const
{
    return m_error_string;
}

/*!
 * @brief This function returns a reference to member error_string
 * @return Reference to member error_string
 */
std::string& carla_msgs::srv::SpawnObject_Response::error_string()
{
    return m_error_string;
}

size_t carla_msgs::srv::SpawnObject_Response::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;



    return current_align;
}

bool carla_msgs::srv::SpawnObject_Response::isKeyDefined()
{
    return false;
}

void carla_msgs::srv::SpawnObject_Response::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
      
}


