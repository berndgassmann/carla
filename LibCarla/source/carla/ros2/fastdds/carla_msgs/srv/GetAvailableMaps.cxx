// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file GetAvailableMaps.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "GetAvailableMaps.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

carla_msgs::srv::GetAvailableMaps_Request::GetAvailableMaps_Request()
{
    // m_structure_needs_at_least_one_member com.eprosima.idl.parser.typecode.PrimitiveTypeCode@70b0b186
    m_structure_needs_at_least_one_member = 0;

}

carla_msgs::srv::GetAvailableMaps_Request::~GetAvailableMaps_Request()
{
}

carla_msgs::srv::GetAvailableMaps_Request::GetAvailableMaps_Request(
        const GetAvailableMaps_Request& x)
{
    m_structure_needs_at_least_one_member = x.m_structure_needs_at_least_one_member;
}

carla_msgs::srv::GetAvailableMaps_Request::GetAvailableMaps_Request(
        GetAvailableMaps_Request&& x)
{
    m_structure_needs_at_least_one_member = x.m_structure_needs_at_least_one_member;
}

carla_msgs::srv::GetAvailableMaps_Request& carla_msgs::srv::GetAvailableMaps_Request::operator =(
        const GetAvailableMaps_Request& x)
{

    m_structure_needs_at_least_one_member = x.m_structure_needs_at_least_one_member;

    return *this;
}

carla_msgs::srv::GetAvailableMaps_Request& carla_msgs::srv::GetAvailableMaps_Request::operator =(
        GetAvailableMaps_Request&& x)
{

    m_structure_needs_at_least_one_member = x.m_structure_needs_at_least_one_member;

    return *this;
}

bool carla_msgs::srv::GetAvailableMaps_Request::operator ==(
        const GetAvailableMaps_Request& x) const
{

    return (m_structure_needs_at_least_one_member == x.m_structure_needs_at_least_one_member);
}

bool carla_msgs::srv::GetAvailableMaps_Request::operator !=(
        const GetAvailableMaps_Request& x) const
{
    return !(*this == x);
}

size_t carla_msgs::srv::GetAvailableMaps_Request::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    return current_alignment - initial_alignment;
}

size_t carla_msgs::srv::GetAvailableMaps_Request::getCdrSerializedSize(
        const carla_msgs::srv::GetAvailableMaps_Request& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    return current_alignment - initial_alignment;
}

void carla_msgs::srv::GetAvailableMaps_Request::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_structure_needs_at_least_one_member;

}

void carla_msgs::srv::GetAvailableMaps_Request::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_structure_needs_at_least_one_member;
}

/*!
 * @brief This function sets a value in member structure_needs_at_least_one_member
 * @param _structure_needs_at_least_one_member New value for member structure_needs_at_least_one_member
 */
void carla_msgs::srv::GetAvailableMaps_Request::structure_needs_at_least_one_member(
        uint8_t _structure_needs_at_least_one_member)
{
    m_structure_needs_at_least_one_member = _structure_needs_at_least_one_member;
}

/*!
 * @brief This function returns the value of member structure_needs_at_least_one_member
 * @return Value of member structure_needs_at_least_one_member
 */
uint8_t carla_msgs::srv::GetAvailableMaps_Request::structure_needs_at_least_one_member() const
{
    return m_structure_needs_at_least_one_member;
}

/*!
 * @brief This function returns a reference to member structure_needs_at_least_one_member
 * @return Reference to member structure_needs_at_least_one_member
 */
uint8_t& carla_msgs::srv::GetAvailableMaps_Request::structure_needs_at_least_one_member()
{
    return m_structure_needs_at_least_one_member;
}


size_t carla_msgs::srv::GetAvailableMaps_Request::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;



    return current_align;
}

bool carla_msgs::srv::GetAvailableMaps_Request::isKeyDefined()
{
    return false;
}

void carla_msgs::srv::GetAvailableMaps_Request::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
     
}

carla_msgs::srv::GetAvailableMaps_Response::GetAvailableMaps_Response()
{
    // m_maps com.eprosima.idl.parser.typecode.SequenceTypeCode@1e67a849


}

carla_msgs::srv::GetAvailableMaps_Response::~GetAvailableMaps_Response()
{
}

carla_msgs::srv::GetAvailableMaps_Response::GetAvailableMaps_Response(
        const GetAvailableMaps_Response& x)
{
    m_maps = x.m_maps;
}

carla_msgs::srv::GetAvailableMaps_Response::GetAvailableMaps_Response(
        GetAvailableMaps_Response&& x)
{
    m_maps = std::move(x.m_maps);
}

carla_msgs::srv::GetAvailableMaps_Response& carla_msgs::srv::GetAvailableMaps_Response::operator =(
        const GetAvailableMaps_Response& x)
{

    m_maps = x.m_maps;

    return *this;
}

carla_msgs::srv::GetAvailableMaps_Response& carla_msgs::srv::GetAvailableMaps_Response::operator =(
        GetAvailableMaps_Response&& x)
{

    m_maps = std::move(x.m_maps);

    return *this;
}

bool carla_msgs::srv::GetAvailableMaps_Response::operator ==(
        const GetAvailableMaps_Response& x) const
{

    return (m_maps == x.m_maps);
}

bool carla_msgs::srv::GetAvailableMaps_Response::operator !=(
        const GetAvailableMaps_Response& x) const
{
    return !(*this == x);
}

size_t carla_msgs::srv::GetAvailableMaps_Response::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    for(size_t a = 0; a < 100; ++a)
    {
        current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;
    }
    return current_alignment - initial_alignment;
}

size_t carla_msgs::srv::GetAvailableMaps_Response::getCdrSerializedSize(
        const carla_msgs::srv::GetAvailableMaps_Response& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    for(size_t a = 0; a < data.maps().size(); ++a)
    {
        current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) +
            data.maps().at(a).size() + 1;
    }
    return current_alignment - initial_alignment;
}

void carla_msgs::srv::GetAvailableMaps_Response::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_maps;}

void carla_msgs::srv::GetAvailableMaps_Response::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_maps;}

/*!
 * @brief This function copies the value in member maps
 * @param _maps New value to be copied in member maps
 */
void carla_msgs::srv::GetAvailableMaps_Response::maps(
        const std::vector<std::string>& _maps)
{
    m_maps = _maps;
}

/*!
 * @brief This function moves the value in member maps
 * @param _maps New value to be moved in member maps
 */
void carla_msgs::srv::GetAvailableMaps_Response::maps(
        std::vector<std::string>&& _maps)
{
    m_maps = std::move(_maps);
}

/*!
 * @brief This function returns a constant reference to member maps
 * @return Constant reference to member maps
 */
const std::vector<std::string>& carla_msgs::srv::GetAvailableMaps_Response::maps() const
{
    return m_maps;
}

/*!
 * @brief This function returns a reference to member maps
 * @return Reference to member maps
 */
std::vector<std::string>& carla_msgs::srv::GetAvailableMaps_Response::maps()
{
    return m_maps;
}

size_t carla_msgs::srv::GetAvailableMaps_Response::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;



    return current_align;
}

bool carla_msgs::srv::GetAvailableMaps_Response::isKeyDefined()
{
    return false;
}

void carla_msgs::srv::GetAvailableMaps_Response::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
     
}


