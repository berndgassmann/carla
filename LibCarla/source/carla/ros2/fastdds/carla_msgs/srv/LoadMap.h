// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file LoadMap.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifndef _FAST_DDS_GENERATED_CARLA_MSGS_SRV_LOADMAP_H_
#define _FAST_DDS_GENERATED_CARLA_MSGS_SRV_LOADMAP_H_

#include <array>
#include <bitset>
#include <cstdint>
#include <map>
#include <string>
#include <vector>

#include <fastcdr/cdr/fixed_size_string.hpp>
#include <fastcdr/xcdr/external.hpp>
#include <fastcdr/xcdr/optional.hpp>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec(dllexport)
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(LOADMAP_SOURCE)
#define LOADMAP_DllAPI __declspec(dllexport)
#else
#define LOADMAP_DllAPI __declspec(dllimport)
#endif  // LOADMAP_SOURCE
#else
#define LOADMAP_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define LOADMAP_DllAPI
#endif  // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
class CdrSizeCalculator;
}  // namespace fastcdr
}  // namespace eprosima

namespace carla_msgs {

namespace srv {

namespace LoadMap_Request_Constants {

const uint16_t MAPLAYERFLAG_NONE = 0;
const uint16_t MAPLAYERFLAG_BUILDINGS = 1;
const uint16_t MAPLAYERFLAG_DECALS = 2;
const uint16_t MAPLAYERFLAG_FOLIAGE = 4;
const uint16_t MAPLAYERFLAG_GROUND = 8;
const uint16_t MAPLAYERFLAG_PARKEDVEHICLES = 16;
const uint16_t MAPLAYERFLAG_PARTICLES = 32;
const uint16_t MAPLAYERFLAG_PROPS = 64;
const uint16_t MAPLAYERFLAG_STREETLIGHTS = 128;
const uint16_t MAPLAYERFLAG_WALLS = 256;
const uint16_t MAPLAYERFLAG_ALL = 65535;

}  // namespace LoadMap_Request_Constants

/*!
 * @brief This class represents the structure LoadMap_Request defined by the user in the IDL file.
 * @ingroup LoadMap
 */
class LoadMap_Request {
public:
  /*!
   * @brief Default constructor.
   */
  eProsima_user_DllExport LoadMap_Request();

  /*!
   * @brief Default destructor.
   */
  eProsima_user_DllExport ~LoadMap_Request();

  /*!
   * @brief Copy constructor.
   * @param x Reference to the object carla_msgs::srv::LoadMap_Request that will be copied.
   */
  eProsima_user_DllExport LoadMap_Request(const LoadMap_Request& x);

  /*!
   * @brief Move constructor.
   * @param x Reference to the object carla_msgs::srv::LoadMap_Request that will be copied.
   */
  eProsima_user_DllExport LoadMap_Request(LoadMap_Request&& x) noexcept;

  /*!
   * @brief Copy assignment.
   * @param x Reference to the object carla_msgs::srv::LoadMap_Request that will be copied.
   */
  eProsima_user_DllExport LoadMap_Request& operator=(const LoadMap_Request& x);

  /*!
   * @brief Move assignment.
   * @param x Reference to the object carla_msgs::srv::LoadMap_Request that will be copied.
   */
  eProsima_user_DllExport LoadMap_Request& operator=(LoadMap_Request&& x) noexcept;

  /*!
   * @brief Comparison operator.
   * @param x carla_msgs::srv::LoadMap_Request object to compare.
   */
  eProsima_user_DllExport bool operator==(const LoadMap_Request& x) const;

  /*!
   * @brief Comparison operator.
   * @param x carla_msgs::srv::LoadMap_Request object to compare.
   */
  eProsima_user_DllExport bool operator!=(const LoadMap_Request& x) const;

  /*!
   * @brief This function copies the value in member mapname
   * @param _mapname New value to be copied in member mapname
   */
  eProsima_user_DllExport void mapname(const std::string& _mapname);

  /*!
   * @brief This function moves the value in member mapname
   * @param _mapname New value to be moved in member mapname
   */
  eProsima_user_DllExport void mapname(std::string&& _mapname);

  /*!
   * @brief This function returns a constant reference to member mapname
   * @return Constant reference to member mapname
   */
  eProsima_user_DllExport const std::string& mapname() const;

  /*!
   * @brief This function returns a reference to member mapname
   * @return Reference to member mapname
   */
  eProsima_user_DllExport std::string& mapname();

  /*!
   * @brief This function sets a value in member force_reload
   * @param _force_reload New value for member force_reload
   */
  eProsima_user_DllExport void force_reload(bool _force_reload);

  /*!
   * @brief This function returns the value of member force_reload
   * @return Value of member force_reload
   */
  eProsima_user_DllExport bool force_reload() const;

  /*!
   * @brief This function returns a reference to member force_reload
   * @return Reference to member force_reload
   */
  eProsima_user_DllExport bool& force_reload();

  /*!
   * @brief This function sets a value in member reset_episode_settings
   * @param _reset_episode_settings New value for member reset_episode_settings
   */
  eProsima_user_DllExport void reset_episode_settings(bool _reset_episode_settings);

  /*!
   * @brief This function returns the value of member reset_episode_settings
   * @return Value of member reset_episode_settings
   */
  eProsima_user_DllExport bool reset_episode_settings() const;

  /*!
   * @brief This function returns a reference to member reset_episode_settings
   * @return Reference to member reset_episode_settings
   */
  eProsima_user_DllExport bool& reset_episode_settings();

  /*!
   * @brief This function sets a value in member map_layers
   * @param _map_layers New value for member map_layers
   */
  eProsima_user_DllExport void map_layers(uint16_t _map_layers);

  /*!
   * @brief This function returns the value of member map_layers
   * @return Value of member map_layers
   */
  eProsima_user_DllExport uint16_t map_layers() const;

  /*!
   * @brief This function returns a reference to member map_layers
   * @return Reference to member map_layers
   */
  eProsima_user_DllExport uint16_t& map_layers();

private:
  std::string m_mapname;
  bool m_force_reload{false};
  bool m_reset_episode_settings{true};
  uint16_t m_map_layers{65535};
};

/*!
 * @brief This class represents the structure LoadMap_Response defined by the user in the IDL file.
 * @ingroup LoadMap
 */
class LoadMap_Response {
public:
  /*!
   * @brief Default constructor.
   */
  eProsima_user_DllExport LoadMap_Response();

  /*!
   * @brief Default destructor.
   */
  eProsima_user_DllExport ~LoadMap_Response();

  /*!
   * @brief Copy constructor.
   * @param x Reference to the object carla_msgs::srv::LoadMap_Response that will be copied.
   */
  eProsima_user_DllExport LoadMap_Response(const LoadMap_Response& x);

  /*!
   * @brief Move constructor.
   * @param x Reference to the object carla_msgs::srv::LoadMap_Response that will be copied.
   */
  eProsima_user_DllExport LoadMap_Response(LoadMap_Response&& x) noexcept;

  /*!
   * @brief Copy assignment.
   * @param x Reference to the object carla_msgs::srv::LoadMap_Response that will be copied.
   */
  eProsima_user_DllExport LoadMap_Response& operator=(const LoadMap_Response& x);

  /*!
   * @brief Move assignment.
   * @param x Reference to the object carla_msgs::srv::LoadMap_Response that will be copied.
   */
  eProsima_user_DllExport LoadMap_Response& operator=(LoadMap_Response&& x) noexcept;

  /*!
   * @brief Comparison operator.
   * @param x carla_msgs::srv::LoadMap_Response object to compare.
   */
  eProsima_user_DllExport bool operator==(const LoadMap_Response& x) const;

  /*!
   * @brief Comparison operator.
   * @param x carla_msgs::srv::LoadMap_Response object to compare.
   */
  eProsima_user_DllExport bool operator!=(const LoadMap_Response& x) const;

  /*!
   * @brief This function sets a value in member success
   * @param _success New value for member success
   */
  eProsima_user_DllExport void success(bool _success);

  /*!
   * @brief This function returns the value of member success
   * @return Value of member success
   */
  eProsima_user_DllExport bool success() const;

  /*!
   * @brief This function returns a reference to member success
   * @return Reference to member success
   */
  eProsima_user_DllExport bool& success();

private:
  bool m_success{false};
};

}  // namespace srv

}  // namespace carla_msgs

#endif  // _FAST_DDS_GENERATED_CARLA_MSGS_SRV_LOADMAP_H_
