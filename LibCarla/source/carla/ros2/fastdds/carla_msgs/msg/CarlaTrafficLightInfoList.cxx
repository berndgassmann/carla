// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file CarlaTrafficLightInfoList.cpp
 * This source file contains the implementation of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "CarlaTrafficLightInfoList.h"

#include <fastcdr/Cdr.h>


#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>


namespace carla_msgs {

namespace msg {





CarlaTrafficLightInfoList::CarlaTrafficLightInfoList()
{
}

CarlaTrafficLightInfoList::~CarlaTrafficLightInfoList()
{
}

CarlaTrafficLightInfoList::CarlaTrafficLightInfoList(
        const CarlaTrafficLightInfoList& x)
{
    m_traffic_lights = x.m_traffic_lights;
}

CarlaTrafficLightInfoList::CarlaTrafficLightInfoList(
        CarlaTrafficLightInfoList&& x) noexcept
{
    m_traffic_lights = std::move(x.m_traffic_lights);
}

CarlaTrafficLightInfoList& CarlaTrafficLightInfoList::operator =(
        const CarlaTrafficLightInfoList& x)
{

    m_traffic_lights = x.m_traffic_lights;
    return *this;
}

CarlaTrafficLightInfoList& CarlaTrafficLightInfoList::operator =(
        CarlaTrafficLightInfoList&& x) noexcept
{

    m_traffic_lights = std::move(x.m_traffic_lights);
    return *this;
}

bool CarlaTrafficLightInfoList::operator ==(
        const CarlaTrafficLightInfoList& x) const
{
    return (m_traffic_lights == x.m_traffic_lights);
}

bool CarlaTrafficLightInfoList::operator !=(
        const CarlaTrafficLightInfoList& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member traffic_lights
 * @param _traffic_lights New value to be copied in member traffic_lights
 */
void CarlaTrafficLightInfoList::traffic_lights(
        const std::vector<carla_msgs::msg::CarlaTrafficLightInfo>& _traffic_lights)
{
    m_traffic_lights = _traffic_lights;
}

/*!
 * @brief This function moves the value in member traffic_lights
 * @param _traffic_lights New value to be moved in member traffic_lights
 */
void CarlaTrafficLightInfoList::traffic_lights(
        std::vector<carla_msgs::msg::CarlaTrafficLightInfo>&& _traffic_lights)
{
    m_traffic_lights = std::move(_traffic_lights);
}

/*!
 * @brief This function returns a constant reference to member traffic_lights
 * @return Constant reference to member traffic_lights
 */
const std::vector<carla_msgs::msg::CarlaTrafficLightInfo>& CarlaTrafficLightInfoList::traffic_lights() const
{
    return m_traffic_lights;
}

/*!
 * @brief This function returns a reference to member traffic_lights
 * @return Reference to member traffic_lights
 */
std::vector<carla_msgs::msg::CarlaTrafficLightInfo>& CarlaTrafficLightInfoList::traffic_lights()
{
    return m_traffic_lights;
}




} // namespace msg


} // namespace carla_msgs
// Include auxiliary functions like for serializing/deserializing.
#include "CarlaTrafficLightInfoListCdrAux.ipp"

