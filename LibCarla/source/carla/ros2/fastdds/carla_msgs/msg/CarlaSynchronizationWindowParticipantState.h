// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file CarlaSynchronizationWindowParticipantState.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifndef _FAST_DDS_GENERATED_CARLA_MSGS_MSG_CARLASYNCHRONIZATIONWINDOWPARTICIPANTSTATE_H_
#define _FAST_DDS_GENERATED_CARLA_MSGS_MSG_CARLASYNCHRONIZATIONWINDOWPARTICIPANTSTATE_H_

#include <array>
#include <bitset>
#include <cstdint>
#include <map>
#include <string>
#include <vector>

#include <fastcdr/cdr/fixed_size_string.hpp>
#include <fastcdr/xcdr/external.hpp>
#include <fastcdr/xcdr/optional.hpp>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec(dllexport)
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(CARLASYNCHRONIZATIONWINDOWPARTICIPANTSTATE_SOURCE)
#define CARLASYNCHRONIZATIONWINDOWPARTICIPANTSTATE_DllAPI __declspec(dllexport)
#else
#define CARLASYNCHRONIZATIONWINDOWPARTICIPANTSTATE_DllAPI __declspec(dllimport)
#endif  // CARLASYNCHRONIZATIONWINDOWPARTICIPANTSTATE_SOURCE
#else
#define CARLASYNCHRONIZATIONWINDOWPARTICIPANTSTATE_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define CARLASYNCHRONIZATIONWINDOWPARTICIPANTSTATE_DllAPI
#endif  // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
class CdrSizeCalculator;
}  // namespace fastcdr
}  // namespace eprosima

namespace carla_msgs {

namespace msg {

/*!
 * @brief This class represents the structure CarlaSynchronizationWindowParticipantState defined by the user in the IDL
 * file.
 * @ingroup CarlaSynchronizationWindowParticipantState
 */
class CarlaSynchronizationWindowParticipantState {
public:
  /*!
   * @brief Default constructor.
   */
  eProsima_user_DllExport CarlaSynchronizationWindowParticipantState();

  /*!
   * @brief Default destructor.
   */
  eProsima_user_DllExport ~CarlaSynchronizationWindowParticipantState();

  /*!
   * @brief Copy constructor.
   * @param x Reference to the object carla_msgs::msg::CarlaSynchronizationWindowParticipantState that will be copied.
   */
  eProsima_user_DllExport CarlaSynchronizationWindowParticipantState(
      const CarlaSynchronizationWindowParticipantState& x);

  /*!
   * @brief Move constructor.
   * @param x Reference to the object carla_msgs::msg::CarlaSynchronizationWindowParticipantState that will be copied.
   */
  eProsima_user_DllExport CarlaSynchronizationWindowParticipantState(
      CarlaSynchronizationWindowParticipantState&& x) noexcept;

  /*!
   * @brief Copy assignment.
   * @param x Reference to the object carla_msgs::msg::CarlaSynchronizationWindowParticipantState that will be copied.
   */
  eProsima_user_DllExport CarlaSynchronizationWindowParticipantState& operator=(
      const CarlaSynchronizationWindowParticipantState& x);

  /*!
   * @brief Move assignment.
   * @param x Reference to the object carla_msgs::msg::CarlaSynchronizationWindowParticipantState that will be copied.
   */
  eProsima_user_DllExport CarlaSynchronizationWindowParticipantState& operator=(
      CarlaSynchronizationWindowParticipantState&& x) noexcept;

  /*!
   * @brief Comparison operator.
   * @param x carla_msgs::msg::CarlaSynchronizationWindowParticipantState object to compare.
   */
  eProsima_user_DllExport bool operator==(const CarlaSynchronizationWindowParticipantState& x) const;

  /*!
   * @brief Comparison operator.
   * @param x carla_msgs::msg::CarlaSynchronizationWindowParticipantState object to compare.
   */
  eProsima_user_DllExport bool operator!=(const CarlaSynchronizationWindowParticipantState& x) const;

  /*!
   * @brief This function copies the value in member client_id
   * @param _client_id New value to be copied in member client_id
   */
  eProsima_user_DllExport void client_id(const std::string& _client_id);

  /*!
   * @brief This function moves the value in member client_id
   * @param _client_id New value to be moved in member client_id
   */
  eProsima_user_DllExport void client_id(std::string&& _client_id);

  /*!
   * @brief This function returns a constant reference to member client_id
   * @return Constant reference to member client_id
   */
  eProsima_user_DllExport const std::string& client_id() const;

  /*!
   * @brief This function returns a reference to member client_id
   * @return Reference to member client_id
   */
  eProsima_user_DllExport std::string& client_id();

  /*!
   * @brief This function sets a value in member participant_id
   * @param _participant_id New value for member participant_id
   */
  eProsima_user_DllExport void participant_id(uint32_t _participant_id);

  /*!
   * @brief This function returns the value of member participant_id
   * @return Value of member participant_id
   */
  eProsima_user_DllExport uint32_t participant_id() const;

  /*!
   * @brief This function returns a reference to member participant_id
   * @return Reference to member participant_id
   */
  eProsima_user_DllExport uint32_t& participant_id();

  /*!
   * @brief This function sets a value in member target_game_time
   * @param _target_game_time New value for member target_game_time
   */
  eProsima_user_DllExport void target_game_time(double _target_game_time);

  /*!
   * @brief This function returns the value of member target_game_time
   * @return Value of member target_game_time
   */
  eProsima_user_DllExport double target_game_time() const;

  /*!
   * @brief This function returns a reference to member target_game_time
   * @return Reference to member target_game_time
   */
  eProsima_user_DllExport double& target_game_time();

private:
  std::string m_client_id;
  uint32_t m_participant_id{0};
  double m_target_game_time{0.0};
};

}  // namespace msg

}  // namespace carla_msgs

#endif  // _FAST_DDS_GENERATED_CARLA_MSGS_MSG_CARLASYNCHRONIZATIONWINDOWPARTICIPANTSTATE_H_
