// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file CarlaWeatherParameters.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifndef _FAST_DDS_GENERATED_CARLA_MSGS_MSG_CARLAWEATHERPARAMETERS_H_
#define _FAST_DDS_GENERATED_CARLA_MSGS_MSG_CARLAWEATHERPARAMETERS_H_

#include <array>
#include <bitset>
#include <cstdint>
#include <map>
#include <string>
#include <vector>

#include <fastcdr/cdr/fixed_size_string.hpp>
#include <fastcdr/xcdr/external.hpp>
#include <fastcdr/xcdr/optional.hpp>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec(dllexport)
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(CARLAWEATHERPARAMETERS_SOURCE)
#define CARLAWEATHERPARAMETERS_DllAPI __declspec(dllexport)
#else
#define CARLAWEATHERPARAMETERS_DllAPI __declspec(dllimport)
#endif  // CARLAWEATHERPARAMETERS_SOURCE
#else
#define CARLAWEATHERPARAMETERS_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define CARLAWEATHERPARAMETERS_DllAPI
#endif  // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
class CdrSizeCalculator;
}  // namespace fastcdr
}  // namespace eprosima

namespace carla_msgs {

namespace msg {

/*!
 * @brief This class represents the structure CarlaWeatherParameters defined by the user in the IDL file.
 * @ingroup CarlaWeatherParameters
 */
class CarlaWeatherParameters {
public:
  /*!
   * @brief Default constructor.
   */
  eProsima_user_DllExport CarlaWeatherParameters();

  /*!
   * @brief Default destructor.
   */
  eProsima_user_DllExport ~CarlaWeatherParameters();

  /*!
   * @brief Copy constructor.
   * @param x Reference to the object carla_msgs::msg::CarlaWeatherParameters that will be copied.
   */
  eProsima_user_DllExport CarlaWeatherParameters(const CarlaWeatherParameters& x);

  /*!
   * @brief Move constructor.
   * @param x Reference to the object carla_msgs::msg::CarlaWeatherParameters that will be copied.
   */
  eProsima_user_DllExport CarlaWeatherParameters(CarlaWeatherParameters&& x) noexcept;

  /*!
   * @brief Copy assignment.
   * @param x Reference to the object carla_msgs::msg::CarlaWeatherParameters that will be copied.
   */
  eProsima_user_DllExport CarlaWeatherParameters& operator=(const CarlaWeatherParameters& x);

  /*!
   * @brief Move assignment.
   * @param x Reference to the object carla_msgs::msg::CarlaWeatherParameters that will be copied.
   */
  eProsima_user_DllExport CarlaWeatherParameters& operator=(CarlaWeatherParameters&& x) noexcept;

  /*!
   * @brief Comparison operator.
   * @param x carla_msgs::msg::CarlaWeatherParameters object to compare.
   */
  eProsima_user_DllExport bool operator==(const CarlaWeatherParameters& x) const;

  /*!
   * @brief Comparison operator.
   * @param x carla_msgs::msg::CarlaWeatherParameters object to compare.
   */
  eProsima_user_DllExport bool operator!=(const CarlaWeatherParameters& x) const;

  /*!
   * @brief This function sets a value in member cloudiness
   * @param _cloudiness New value for member cloudiness
   */
  eProsima_user_DllExport void cloudiness(float _cloudiness);

  /*!
   * @brief This function returns the value of member cloudiness
   * @return Value of member cloudiness
   */
  eProsima_user_DllExport float cloudiness() const;

  /*!
   * @brief This function returns a reference to member cloudiness
   * @return Reference to member cloudiness
   */
  eProsima_user_DllExport float& cloudiness();

  /*!
   * @brief This function sets a value in member precipitation
   * @param _precipitation New value for member precipitation
   */
  eProsima_user_DllExport void precipitation(float _precipitation);

  /*!
   * @brief This function returns the value of member precipitation
   * @return Value of member precipitation
   */
  eProsima_user_DllExport float precipitation() const;

  /*!
   * @brief This function returns a reference to member precipitation
   * @return Reference to member precipitation
   */
  eProsima_user_DllExport float& precipitation();

  /*!
   * @brief This function sets a value in member precipitation_deposits
   * @param _precipitation_deposits New value for member precipitation_deposits
   */
  eProsima_user_DllExport void precipitation_deposits(float _precipitation_deposits);

  /*!
   * @brief This function returns the value of member precipitation_deposits
   * @return Value of member precipitation_deposits
   */
  eProsima_user_DllExport float precipitation_deposits() const;

  /*!
   * @brief This function returns a reference to member precipitation_deposits
   * @return Reference to member precipitation_deposits
   */
  eProsima_user_DllExport float& precipitation_deposits();

  /*!
   * @brief This function sets a value in member wind_intensity
   * @param _wind_intensity New value for member wind_intensity
   */
  eProsima_user_DllExport void wind_intensity(float _wind_intensity);

  /*!
   * @brief This function returns the value of member wind_intensity
   * @return Value of member wind_intensity
   */
  eProsima_user_DllExport float wind_intensity() const;

  /*!
   * @brief This function returns a reference to member wind_intensity
   * @return Reference to member wind_intensity
   */
  eProsima_user_DllExport float& wind_intensity();

  /*!
   * @brief This function sets a value in member fog_density
   * @param _fog_density New value for member fog_density
   */
  eProsima_user_DllExport void fog_density(float _fog_density);

  /*!
   * @brief This function returns the value of member fog_density
   * @return Value of member fog_density
   */
  eProsima_user_DllExport float fog_density() const;

  /*!
   * @brief This function returns a reference to member fog_density
   * @return Reference to member fog_density
   */
  eProsima_user_DllExport float& fog_density();

  /*!
   * @brief This function sets a value in member fog_distance
   * @param _fog_distance New value for member fog_distance
   */
  eProsima_user_DllExport void fog_distance(float _fog_distance);

  /*!
   * @brief This function returns the value of member fog_distance
   * @return Value of member fog_distance
   */
  eProsima_user_DllExport float fog_distance() const;

  /*!
   * @brief This function returns a reference to member fog_distance
   * @return Reference to member fog_distance
   */
  eProsima_user_DllExport float& fog_distance();

  /*!
   * @brief This function sets a value in member wetness
   * @param _wetness New value for member wetness
   */
  eProsima_user_DllExport void wetness(float _wetness);

  /*!
   * @brief This function returns the value of member wetness
   * @return Value of member wetness
   */
  eProsima_user_DllExport float wetness() const;

  /*!
   * @brief This function returns a reference to member wetness
   * @return Reference to member wetness
   */
  eProsima_user_DllExport float& wetness();

  /*!
   * @brief This function sets a value in member sun_azimuth_angle
   * @param _sun_azimuth_angle New value for member sun_azimuth_angle
   */
  eProsima_user_DllExport void sun_azimuth_angle(float _sun_azimuth_angle);

  /*!
   * @brief This function returns the value of member sun_azimuth_angle
   * @return Value of member sun_azimuth_angle
   */
  eProsima_user_DllExport float sun_azimuth_angle() const;

  /*!
   * @brief This function returns a reference to member sun_azimuth_angle
   * @return Reference to member sun_azimuth_angle
   */
  eProsima_user_DllExport float& sun_azimuth_angle();

  /*!
   * @brief This function sets a value in member sun_altitude_angle
   * @param _sun_altitude_angle New value for member sun_altitude_angle
   */
  eProsima_user_DllExport void sun_altitude_angle(float _sun_altitude_angle);

  /*!
   * @brief This function returns the value of member sun_altitude_angle
   * @return Value of member sun_altitude_angle
   */
  eProsima_user_DllExport float sun_altitude_angle() const;

  /*!
   * @brief This function returns a reference to member sun_altitude_angle
   * @return Reference to member sun_altitude_angle
   */
  eProsima_user_DllExport float& sun_altitude_angle();

private:
  float m_cloudiness{0.0};
  float m_precipitation{0.0};
  float m_precipitation_deposits{0.0};
  float m_wind_intensity{0.0};
  float m_fog_density{0.0};
  float m_fog_distance{0.0};
  float m_wetness{0.0};
  float m_sun_azimuth_angle{0.0};
  float m_sun_altitude_angle{0.0};
};

}  // namespace msg

}  // namespace carla_msgs

#endif  // _FAST_DDS_GENERATED_CARLA_MSGS_MSG_CARLAWEATHERPARAMETERS_H_
