// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file CarlaStatus.cpp
 * This source file contains the implementation of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "CarlaStatus.h"

#include <fastcdr/Cdr.h>


#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>


namespace carla_msgs {

namespace msg {



CarlaStatus::CarlaStatus()
{
}

CarlaStatus::~CarlaStatus()
{
}

CarlaStatus::CarlaStatus(
        const CarlaStatus& x)
{
    m_header = x.m_header;
    m_episode_settings = x.m_episode_settings;
    m_frame = x.m_frame;
    m_synchronous_mode_participant_states = x.m_synchronous_mode_participant_states;
    m_game_running = x.m_game_running;
}

CarlaStatus::CarlaStatus(
        CarlaStatus&& x) noexcept
{
    m_header = std::move(x.m_header);
    m_episode_settings = std::move(x.m_episode_settings);
    m_frame = x.m_frame;
    m_synchronous_mode_participant_states = std::move(x.m_synchronous_mode_participant_states);
    m_game_running = x.m_game_running;
}

CarlaStatus& CarlaStatus::operator =(
        const CarlaStatus& x)
{

    m_header = x.m_header;
    m_episode_settings = x.m_episode_settings;
    m_frame = x.m_frame;
    m_synchronous_mode_participant_states = x.m_synchronous_mode_participant_states;
    m_game_running = x.m_game_running;
    return *this;
}

CarlaStatus& CarlaStatus::operator =(
        CarlaStatus&& x) noexcept
{

    m_header = std::move(x.m_header);
    m_episode_settings = std::move(x.m_episode_settings);
    m_frame = x.m_frame;
    m_synchronous_mode_participant_states = std::move(x.m_synchronous_mode_participant_states);
    m_game_running = x.m_game_running;
    return *this;
}

bool CarlaStatus::operator ==(
        const CarlaStatus& x) const
{
    return (m_header == x.m_header &&
           m_episode_settings == x.m_episode_settings &&
           m_frame == x.m_frame &&
           m_synchronous_mode_participant_states == x.m_synchronous_mode_participant_states &&
           m_game_running == x.m_game_running);
}

bool CarlaStatus::operator !=(
        const CarlaStatus& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member header
 * @param _header New value to be copied in member header
 */
void CarlaStatus::header(
        const std_msgs::msg::Header& _header)
{
    m_header = _header;
}

/*!
 * @brief This function moves the value in member header
 * @param _header New value to be moved in member header
 */
void CarlaStatus::header(
        std_msgs::msg::Header&& _header)
{
    m_header = std::move(_header);
}

/*!
 * @brief This function returns a constant reference to member header
 * @return Constant reference to member header
 */
const std_msgs::msg::Header& CarlaStatus::header() const
{
    return m_header;
}

/*!
 * @brief This function returns a reference to member header
 * @return Reference to member header
 */
std_msgs::msg::Header& CarlaStatus::header()
{
    return m_header;
}


/*!
 * @brief This function copies the value in member episode_settings
 * @param _episode_settings New value to be copied in member episode_settings
 */
void CarlaStatus::episode_settings(
        const carla_msgs::msg::CarlaEpisodeSettings& _episode_settings)
{
    m_episode_settings = _episode_settings;
}

/*!
 * @brief This function moves the value in member episode_settings
 * @param _episode_settings New value to be moved in member episode_settings
 */
void CarlaStatus::episode_settings(
        carla_msgs::msg::CarlaEpisodeSettings&& _episode_settings)
{
    m_episode_settings = std::move(_episode_settings);
}

/*!
 * @brief This function returns a constant reference to member episode_settings
 * @return Constant reference to member episode_settings
 */
const carla_msgs::msg::CarlaEpisodeSettings& CarlaStatus::episode_settings() const
{
    return m_episode_settings;
}

/*!
 * @brief This function returns a reference to member episode_settings
 * @return Reference to member episode_settings
 */
carla_msgs::msg::CarlaEpisodeSettings& CarlaStatus::episode_settings()
{
    return m_episode_settings;
}


/*!
 * @brief This function sets a value in member frame
 * @param _frame New value for member frame
 */
void CarlaStatus::frame(
        uint64_t _frame)
{
    m_frame = _frame;
}

/*!
 * @brief This function returns the value of member frame
 * @return Value of member frame
 */
uint64_t CarlaStatus::frame() const
{
    return m_frame;
}

/*!
 * @brief This function returns a reference to member frame
 * @return Reference to member frame
 */
uint64_t& CarlaStatus::frame()
{
    return m_frame;
}


/*!
 * @brief This function copies the value in member synchronous_mode_participant_states
 * @param _synchronous_mode_participant_states New value to be copied in member synchronous_mode_participant_states
 */
void CarlaStatus::synchronous_mode_participant_states(
        const std::vector<carla_msgs::msg::CarlaSynchronizationWindowParticipantState>& _synchronous_mode_participant_states)
{
    m_synchronous_mode_participant_states = _synchronous_mode_participant_states;
}

/*!
 * @brief This function moves the value in member synchronous_mode_participant_states
 * @param _synchronous_mode_participant_states New value to be moved in member synchronous_mode_participant_states
 */
void CarlaStatus::synchronous_mode_participant_states(
        std::vector<carla_msgs::msg::CarlaSynchronizationWindowParticipantState>&& _synchronous_mode_participant_states)
{
    m_synchronous_mode_participant_states = std::move(_synchronous_mode_participant_states);
}

/*!
 * @brief This function returns a constant reference to member synchronous_mode_participant_states
 * @return Constant reference to member synchronous_mode_participant_states
 */
const std::vector<carla_msgs::msg::CarlaSynchronizationWindowParticipantState>& CarlaStatus::synchronous_mode_participant_states() const
{
    return m_synchronous_mode_participant_states;
}

/*!
 * @brief This function returns a reference to member synchronous_mode_participant_states
 * @return Reference to member synchronous_mode_participant_states
 */
std::vector<carla_msgs::msg::CarlaSynchronizationWindowParticipantState>& CarlaStatus::synchronous_mode_participant_states()
{
    return m_synchronous_mode_participant_states;
}


/*!
 * @brief This function sets a value in member game_running
 * @param _game_running New value for member game_running
 */
void CarlaStatus::game_running(
        bool _game_running)
{
    m_game_running = _game_running;
}

/*!
 * @brief This function returns the value of member game_running
 * @return Value of member game_running
 */
bool CarlaStatus::game_running() const
{
    return m_game_running;
}

/*!
 * @brief This function returns a reference to member game_running
 * @return Reference to member game_running
 */
bool& CarlaStatus::game_running()
{
    return m_game_running;
}




} // namespace msg


} // namespace carla_msgs
// Include auxiliary functions like for serializing/deserializing.
#include "CarlaStatusCdrAux.ipp"

