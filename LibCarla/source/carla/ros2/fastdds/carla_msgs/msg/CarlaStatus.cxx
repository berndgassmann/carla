// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file CarlaStatus.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "CarlaStatus.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

carla_msgs::msg::CarlaStatus::CarlaStatus()
{
    // m_header com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@5b03b9fe

    // m_episode_settings com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@37d4349f

    // m_frame com.eprosima.idl.parser.typecode.PrimitiveTypeCode@434a63ab
    m_frame = 0;
    // m_synchronous_mode_participant_states com.eprosima.idl.parser.typecode.SequenceTypeCode@6e0f5f7f

    // m_game_running com.eprosima.idl.parser.typecode.PrimitiveTypeCode@2805d709
    m_game_running = false;

}

carla_msgs::msg::CarlaStatus::~CarlaStatus()
{




}

carla_msgs::msg::CarlaStatus::CarlaStatus(
        const CarlaStatus& x)
{
    m_header = x.m_header;
    m_episode_settings = x.m_episode_settings;
    m_frame = x.m_frame;
    m_synchronous_mode_participant_states = x.m_synchronous_mode_participant_states;
    m_game_running = x.m_game_running;
}

carla_msgs::msg::CarlaStatus::CarlaStatus(
        CarlaStatus&& x)
{
    m_header = std::move(x.m_header);
    m_episode_settings = std::move(x.m_episode_settings);
    m_frame = x.m_frame;
    m_synchronous_mode_participant_states = std::move(x.m_synchronous_mode_participant_states);
    m_game_running = x.m_game_running;
}

carla_msgs::msg::CarlaStatus& carla_msgs::msg::CarlaStatus::operator =(
        const CarlaStatus& x)
{

    m_header = x.m_header;
    m_episode_settings = x.m_episode_settings;
    m_frame = x.m_frame;
    m_synchronous_mode_participant_states = x.m_synchronous_mode_participant_states;
    m_game_running = x.m_game_running;

    return *this;
}

carla_msgs::msg::CarlaStatus& carla_msgs::msg::CarlaStatus::operator =(
        CarlaStatus&& x)
{

    m_header = std::move(x.m_header);
    m_episode_settings = std::move(x.m_episode_settings);
    m_frame = x.m_frame;
    m_synchronous_mode_participant_states = std::move(x.m_synchronous_mode_participant_states);
    m_game_running = x.m_game_running;

    return *this;
}

bool carla_msgs::msg::CarlaStatus::operator ==(
        const CarlaStatus& x) const
{

    return (m_header == x.m_header && m_episode_settings == x.m_episode_settings && m_frame == x.m_frame && m_synchronous_mode_participant_states == x.m_synchronous_mode_participant_states && m_game_running == x.m_game_running);
}

bool carla_msgs::msg::CarlaStatus::operator !=(
        const CarlaStatus& x) const
{
    return !(*this == x);
}

size_t carla_msgs::msg::CarlaStatus::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += std_msgs::msg::Header::getMaxCdrSerializedSize(current_alignment);
    current_alignment += carla_msgs::msg::CarlaEpisodeSettings::getMaxCdrSerializedSize(current_alignment);
    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    for(size_t a = 0; a < 100; ++a)
    {
        current_alignment += carla_msgs::msg::CarlaSynchronizationWindowParticipantState::getMaxCdrSerializedSize(current_alignment);}

    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}

size_t carla_msgs::msg::CarlaStatus::getCdrSerializedSize(
        const carla_msgs::msg::CarlaStatus& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += std_msgs::msg::Header::getCdrSerializedSize(data.header(), current_alignment);
    current_alignment += carla_msgs::msg::CarlaEpisodeSettings::getCdrSerializedSize(data.episode_settings(), current_alignment);
    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    for(size_t a = 0; a < data.synchronous_mode_participant_states().size(); ++a)
    {
        current_alignment += carla_msgs::msg::CarlaSynchronizationWindowParticipantState::getCdrSerializedSize(data.synchronous_mode_participant_states().at(a), current_alignment);}

    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}

void carla_msgs::msg::CarlaStatus::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_header;
    scdr << m_episode_settings;
    scdr << m_frame;
    scdr << m_synchronous_mode_participant_states;
    scdr << m_game_running;

}

void carla_msgs::msg::CarlaStatus::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_header;
    dcdr >> m_episode_settings;
    dcdr >> m_frame;
    dcdr >> m_synchronous_mode_participant_states;
    dcdr >> m_game_running;
}

/*!
 * @brief This function copies the value in member header
 * @param _header New value to be copied in member header
 */
void carla_msgs::msg::CarlaStatus::header(
        const std_msgs::msg::Header& _header)
{
    m_header = _header;
}

/*!
 * @brief This function moves the value in member header
 * @param _header New value to be moved in member header
 */
void carla_msgs::msg::CarlaStatus::header(
        std_msgs::msg::Header&& _header)
{
    m_header = std::move(_header);
}

/*!
 * @brief This function returns a constant reference to member header
 * @return Constant reference to member header
 */
const std_msgs::msg::Header& carla_msgs::msg::CarlaStatus::header() const
{
    return m_header;
}

/*!
 * @brief This function returns a reference to member header
 * @return Reference to member header
 */
std_msgs::msg::Header& carla_msgs::msg::CarlaStatus::header()
{
    return m_header;
}
/*!
 * @brief This function copies the value in member episode_settings
 * @param _episode_settings New value to be copied in member episode_settings
 */
void carla_msgs::msg::CarlaStatus::episode_settings(
        const carla_msgs::msg::CarlaEpisodeSettings& _episode_settings)
{
    m_episode_settings = _episode_settings;
}

/*!
 * @brief This function moves the value in member episode_settings
 * @param _episode_settings New value to be moved in member episode_settings
 */
void carla_msgs::msg::CarlaStatus::episode_settings(
        carla_msgs::msg::CarlaEpisodeSettings&& _episode_settings)
{
    m_episode_settings = std::move(_episode_settings);
}

/*!
 * @brief This function returns a constant reference to member episode_settings
 * @return Constant reference to member episode_settings
 */
const carla_msgs::msg::CarlaEpisodeSettings& carla_msgs::msg::CarlaStatus::episode_settings() const
{
    return m_episode_settings;
}

/*!
 * @brief This function returns a reference to member episode_settings
 * @return Reference to member episode_settings
 */
carla_msgs::msg::CarlaEpisodeSettings& carla_msgs::msg::CarlaStatus::episode_settings()
{
    return m_episode_settings;
}
/*!
 * @brief This function sets a value in member frame
 * @param _frame New value for member frame
 */
void carla_msgs::msg::CarlaStatus::frame(
        uint64_t _frame)
{
    m_frame = _frame;
}

/*!
 * @brief This function returns the value of member frame
 * @return Value of member frame
 */
uint64_t carla_msgs::msg::CarlaStatus::frame() const
{
    return m_frame;
}

/*!
 * @brief This function returns a reference to member frame
 * @return Reference to member frame
 */
uint64_t& carla_msgs::msg::CarlaStatus::frame()
{
    return m_frame;
}

/*!
 * @brief This function copies the value in member synchronous_mode_participant_states
 * @param _synchronous_mode_participant_states New value to be copied in member synchronous_mode_participant_states
 */
void carla_msgs::msg::CarlaStatus::synchronous_mode_participant_states(
        const std::vector<carla_msgs::msg::CarlaSynchronizationWindowParticipantState>& _synchronous_mode_participant_states)
{
    m_synchronous_mode_participant_states = _synchronous_mode_participant_states;
}

/*!
 * @brief This function moves the value in member synchronous_mode_participant_states
 * @param _synchronous_mode_participant_states New value to be moved in member synchronous_mode_participant_states
 */
void carla_msgs::msg::CarlaStatus::synchronous_mode_participant_states(
        std::vector<carla_msgs::msg::CarlaSynchronizationWindowParticipantState>&& _synchronous_mode_participant_states)
{
    m_synchronous_mode_participant_states = std::move(_synchronous_mode_participant_states);
}

/*!
 * @brief This function returns a constant reference to member synchronous_mode_participant_states
 * @return Constant reference to member synchronous_mode_participant_states
 */
const std::vector<carla_msgs::msg::CarlaSynchronizationWindowParticipantState>& carla_msgs::msg::CarlaStatus::synchronous_mode_participant_states() const
{
    return m_synchronous_mode_participant_states;
}

/*!
 * @brief This function returns a reference to member synchronous_mode_participant_states
 * @return Reference to member synchronous_mode_participant_states
 */
std::vector<carla_msgs::msg::CarlaSynchronizationWindowParticipantState>& carla_msgs::msg::CarlaStatus::synchronous_mode_participant_states()
{
    return m_synchronous_mode_participant_states;
}
/*!
 * @brief This function sets a value in member game_running
 * @param _game_running New value for member game_running
 */
void carla_msgs::msg::CarlaStatus::game_running(
        bool _game_running)
{
    m_game_running = _game_running;
}

/*!
 * @brief This function returns the value of member game_running
 * @return Value of member game_running
 */
bool carla_msgs::msg::CarlaStatus::game_running() const
{
    return m_game_running;
}

/*!
 * @brief This function returns a reference to member game_running
 * @return Reference to member game_running
 */
bool& carla_msgs::msg::CarlaStatus::game_running()
{
    return m_game_running;
}


size_t carla_msgs::msg::CarlaStatus::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;



    return current_align;
}

bool carla_msgs::msg::CarlaStatus::isKeyDefined()
{
    return false;
}

void carla_msgs::msg::CarlaStatus::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
         
}


