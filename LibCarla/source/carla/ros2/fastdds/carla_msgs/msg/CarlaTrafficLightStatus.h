// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file CarlaTrafficLightStatus.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifndef _FAST_DDS_GENERATED_CARLA_MSGS_MSG_CARLATRAFFICLIGHTSTATUS_H_
#define _FAST_DDS_GENERATED_CARLA_MSGS_MSG_CARLATRAFFICLIGHTSTATUS_H_

#include <array>
#include <bitset>
#include <cstdint>
#include <map>
#include <string>
#include <vector>

#include <fastcdr/cdr/fixed_size_string.hpp>
#include <fastcdr/xcdr/external.hpp>
#include <fastcdr/xcdr/optional.hpp>

#include "std_msgs/msg/Header.h"

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec(dllexport)
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(CARLATRAFFICLIGHTSTATUS_SOURCE)
#define CARLATRAFFICLIGHTSTATUS_DllAPI __declspec(dllexport)
#else
#define CARLATRAFFICLIGHTSTATUS_DllAPI __declspec(dllimport)
#endif  // CARLATRAFFICLIGHTSTATUS_SOURCE
#else
#define CARLATRAFFICLIGHTSTATUS_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define CARLATRAFFICLIGHTSTATUS_DllAPI
#endif  // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
class CdrSizeCalculator;
}  // namespace fastcdr
}  // namespace eprosima

namespace carla_msgs {

namespace msg {

namespace CarlaTrafficLightStatus_Constants {

const uint8_t RED = 0;
const uint8_t YELLOW = 1;
const uint8_t GREEN = 2;
const uint8_t OFF = 3;
const uint8_t UNKNOWN = 4;

}  // namespace CarlaTrafficLightStatus_Constants

/*!
 * @brief This class represents the structure CarlaTrafficLightStatus defined by the user in the IDL file.
 * @ingroup CarlaTrafficLightStatus
 */
class CarlaTrafficLightStatus {
public:
  /*!
   * @brief Default constructor.
   */
  eProsima_user_DllExport CarlaTrafficLightStatus();

  /*!
   * @brief Default destructor.
   */
  eProsima_user_DllExport ~CarlaTrafficLightStatus();

  /*!
   * @brief Copy constructor.
   * @param x Reference to the object carla_msgs::msg::CarlaTrafficLightStatus that will be copied.
   */
  eProsima_user_DllExport CarlaTrafficLightStatus(const CarlaTrafficLightStatus& x);

  /*!
   * @brief Move constructor.
   * @param x Reference to the object carla_msgs::msg::CarlaTrafficLightStatus that will be copied.
   */
  eProsima_user_DllExport CarlaTrafficLightStatus(CarlaTrafficLightStatus&& x) noexcept;

  /*!
   * @brief Copy assignment.
   * @param x Reference to the object carla_msgs::msg::CarlaTrafficLightStatus that will be copied.
   */
  eProsima_user_DllExport CarlaTrafficLightStatus& operator=(const CarlaTrafficLightStatus& x);

  /*!
   * @brief Move assignment.
   * @param x Reference to the object carla_msgs::msg::CarlaTrafficLightStatus that will be copied.
   */
  eProsima_user_DllExport CarlaTrafficLightStatus& operator=(CarlaTrafficLightStatus&& x) noexcept;

  /*!
   * @brief Comparison operator.
   * @param x carla_msgs::msg::CarlaTrafficLightStatus object to compare.
   */
  eProsima_user_DllExport bool operator==(const CarlaTrafficLightStatus& x) const;

  /*!
   * @brief Comparison operator.
   * @param x carla_msgs::msg::CarlaTrafficLightStatus object to compare.
   */
  eProsima_user_DllExport bool operator!=(const CarlaTrafficLightStatus& x) const;

  /*!
   * @brief This function copies the value in member header
   * @param _header New value to be copied in member header
   */
  eProsima_user_DllExport void header(const std_msgs::msg::Header& _header);

  /*!
   * @brief This function moves the value in member header
   * @param _header New value to be moved in member header
   */
  eProsima_user_DllExport void header(std_msgs::msg::Header&& _header);

  /*!
   * @brief This function returns a constant reference to member header
   * @return Constant reference to member header
   */
  eProsima_user_DllExport const std_msgs::msg::Header& header() const;

  /*!
   * @brief This function returns a reference to member header
   * @return Reference to member header
   */
  eProsima_user_DllExport std_msgs::msg::Header& header();

  /*!
   * @brief This function sets a value in member id
   * @param _id New value for member id
   */
  eProsima_user_DllExport void id(uint32_t _id);

  /*!
   * @brief This function returns the value of member id
   * @return Value of member id
   */
  eProsima_user_DllExport uint32_t id() const;

  /*!
   * @brief This function returns a reference to member id
   * @return Reference to member id
   */
  eProsima_user_DllExport uint32_t& id();

  /*!
   * @brief This function sets a value in member state
   * @param _state New value for member state
   */
  eProsima_user_DllExport void state(uint8_t _state);

  /*!
   * @brief This function returns the value of member state
   * @return Value of member state
   */
  eProsima_user_DllExport uint8_t state() const;

  /*!
   * @brief This function returns a reference to member state
   * @return Reference to member state
   */
  eProsima_user_DllExport uint8_t& state();

private:
  std_msgs::msg::Header m_header;
  uint32_t m_id{0};
  uint8_t m_state{0};
};

}  // namespace msg

}  // namespace carla_msgs

#endif  // _FAST_DDS_GENERATED_CARLA_MSGS_MSG_CARLATRAFFICLIGHTSTATUS_H_
