// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file CarlaVehicleInfo.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "CarlaVehicleInfo.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

carla_msgs::msg::CarlaVehicleInfo::CarlaVehicleInfo()
{
    // m_id com.eprosima.idl.parser.typecode.PrimitiveTypeCode@5ab956d7
    m_id = 0;
    // m_type com.eprosima.idl.parser.typecode.StringTypeCode@3646a422
    m_type ="";
    // m_rolename com.eprosima.idl.parser.typecode.StringTypeCode@750e2b97
    m_rolename ="";
    // m_wheels com.eprosima.idl.parser.typecode.SequenceTypeCode@3e27aa33

    // m_max_rpm com.eprosima.idl.parser.typecode.PrimitiveTypeCode@2e385cce
    m_max_rpm = 0.0;
    // m_moi com.eprosima.idl.parser.typecode.PrimitiveTypeCode@2ddc9a9f
    m_moi = 0.0;
    // m_damping_rate_full_throttle com.eprosima.idl.parser.typecode.PrimitiveTypeCode@298a5e20
    m_damping_rate_full_throttle = 0.0;
    // m_damping_rate_zero_throttle_clutch_engaged com.eprosima.idl.parser.typecode.PrimitiveTypeCode@2a7f1f10
    m_damping_rate_zero_throttle_clutch_engaged = 0.0;
    // m_damping_rate_zero_throttle_clutch_disengaged com.eprosima.idl.parser.typecode.PrimitiveTypeCode@46cdf8bd
    m_damping_rate_zero_throttle_clutch_disengaged = 0.0;
    // m_use_gear_autobox com.eprosima.idl.parser.typecode.PrimitiveTypeCode@f0c8a99
    m_use_gear_autobox = false;
    // m_gear_switch_time com.eprosima.idl.parser.typecode.PrimitiveTypeCode@740cae06
    m_gear_switch_time = 0.0;
    // m_clutch_strength com.eprosima.idl.parser.typecode.PrimitiveTypeCode@26d9b808
    m_clutch_strength = 0.0;
    // m_mass com.eprosima.idl.parser.typecode.PrimitiveTypeCode@f78a47e
    m_mass = 0.0;
    // m_drag_coefficient com.eprosima.idl.parser.typecode.PrimitiveTypeCode@644baf4a
    m_drag_coefficient = 0.0;
    // m_center_of_mass com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@7526515b

    // m_shape com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@1ed4ae0f


}

carla_msgs::msg::CarlaVehicleInfo::~CarlaVehicleInfo()
{















}

carla_msgs::msg::CarlaVehicleInfo::CarlaVehicleInfo(
        const CarlaVehicleInfo& x)
{
    m_id = x.m_id;
    m_type = x.m_type;
    m_rolename = x.m_rolename;
    m_wheels = x.m_wheels;
    m_max_rpm = x.m_max_rpm;
    m_moi = x.m_moi;
    m_damping_rate_full_throttle = x.m_damping_rate_full_throttle;
    m_damping_rate_zero_throttle_clutch_engaged = x.m_damping_rate_zero_throttle_clutch_engaged;
    m_damping_rate_zero_throttle_clutch_disengaged = x.m_damping_rate_zero_throttle_clutch_disengaged;
    m_use_gear_autobox = x.m_use_gear_autobox;
    m_gear_switch_time = x.m_gear_switch_time;
    m_clutch_strength = x.m_clutch_strength;
    m_mass = x.m_mass;
    m_drag_coefficient = x.m_drag_coefficient;
    m_center_of_mass = x.m_center_of_mass;
    m_shape = x.m_shape;
}

carla_msgs::msg::CarlaVehicleInfo::CarlaVehicleInfo(
        CarlaVehicleInfo&& x)
{
    m_id = x.m_id;
    m_type = std::move(x.m_type);
    m_rolename = std::move(x.m_rolename);
    m_wheels = std::move(x.m_wheels);
    m_max_rpm = x.m_max_rpm;
    m_moi = x.m_moi;
    m_damping_rate_full_throttle = x.m_damping_rate_full_throttle;
    m_damping_rate_zero_throttle_clutch_engaged = x.m_damping_rate_zero_throttle_clutch_engaged;
    m_damping_rate_zero_throttle_clutch_disengaged = x.m_damping_rate_zero_throttle_clutch_disengaged;
    m_use_gear_autobox = x.m_use_gear_autobox;
    m_gear_switch_time = x.m_gear_switch_time;
    m_clutch_strength = x.m_clutch_strength;
    m_mass = x.m_mass;
    m_drag_coefficient = x.m_drag_coefficient;
    m_center_of_mass = std::move(x.m_center_of_mass);
    m_shape = std::move(x.m_shape);
}

carla_msgs::msg::CarlaVehicleInfo& carla_msgs::msg::CarlaVehicleInfo::operator =(
        const CarlaVehicleInfo& x)
{

    m_id = x.m_id;
    m_type = x.m_type;
    m_rolename = x.m_rolename;
    m_wheels = x.m_wheels;
    m_max_rpm = x.m_max_rpm;
    m_moi = x.m_moi;
    m_damping_rate_full_throttle = x.m_damping_rate_full_throttle;
    m_damping_rate_zero_throttle_clutch_engaged = x.m_damping_rate_zero_throttle_clutch_engaged;
    m_damping_rate_zero_throttle_clutch_disengaged = x.m_damping_rate_zero_throttle_clutch_disengaged;
    m_use_gear_autobox = x.m_use_gear_autobox;
    m_gear_switch_time = x.m_gear_switch_time;
    m_clutch_strength = x.m_clutch_strength;
    m_mass = x.m_mass;
    m_drag_coefficient = x.m_drag_coefficient;
    m_center_of_mass = x.m_center_of_mass;
    m_shape = x.m_shape;

    return *this;
}

carla_msgs::msg::CarlaVehicleInfo& carla_msgs::msg::CarlaVehicleInfo::operator =(
        CarlaVehicleInfo&& x)
{

    m_id = x.m_id;
    m_type = std::move(x.m_type);
    m_rolename = std::move(x.m_rolename);
    m_wheels = std::move(x.m_wheels);
    m_max_rpm = x.m_max_rpm;
    m_moi = x.m_moi;
    m_damping_rate_full_throttle = x.m_damping_rate_full_throttle;
    m_damping_rate_zero_throttle_clutch_engaged = x.m_damping_rate_zero_throttle_clutch_engaged;
    m_damping_rate_zero_throttle_clutch_disengaged = x.m_damping_rate_zero_throttle_clutch_disengaged;
    m_use_gear_autobox = x.m_use_gear_autobox;
    m_gear_switch_time = x.m_gear_switch_time;
    m_clutch_strength = x.m_clutch_strength;
    m_mass = x.m_mass;
    m_drag_coefficient = x.m_drag_coefficient;
    m_center_of_mass = std::move(x.m_center_of_mass);
    m_shape = std::move(x.m_shape);

    return *this;
}

bool carla_msgs::msg::CarlaVehicleInfo::operator ==(
        const CarlaVehicleInfo& x) const
{

    return (m_id == x.m_id && m_type == x.m_type && m_rolename == x.m_rolename && m_wheels == x.m_wheels && m_max_rpm == x.m_max_rpm && m_moi == x.m_moi && m_damping_rate_full_throttle == x.m_damping_rate_full_throttle && m_damping_rate_zero_throttle_clutch_engaged == x.m_damping_rate_zero_throttle_clutch_engaged && m_damping_rate_zero_throttle_clutch_disengaged == x.m_damping_rate_zero_throttle_clutch_disengaged && m_use_gear_autobox == x.m_use_gear_autobox && m_gear_switch_time == x.m_gear_switch_time && m_clutch_strength == x.m_clutch_strength && m_mass == x.m_mass && m_drag_coefficient == x.m_drag_coefficient && m_center_of_mass == x.m_center_of_mass && m_shape == x.m_shape);
}

bool carla_msgs::msg::CarlaVehicleInfo::operator !=(
        const CarlaVehicleInfo& x) const
{
    return !(*this == x);
}

size_t carla_msgs::msg::CarlaVehicleInfo::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    for(size_t a = 0; a < 100; ++a)
    {
        current_alignment += carla_msgs::msg::CarlaVehicleInfoWheel::getMaxCdrSerializedSize(current_alignment);}

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += geometry_msgs::msg::Vector3::getMaxCdrSerializedSize(current_alignment);
    current_alignment += shape_msgs::msg::SolidPrimitive::getMaxCdrSerializedSize(current_alignment);

    return current_alignment - initial_alignment;
}

size_t carla_msgs::msg::CarlaVehicleInfo::getCdrSerializedSize(
        const carla_msgs::msg::CarlaVehicleInfo& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.type().size() + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.rolename().size() + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    for(size_t a = 0; a < data.wheels().size(); ++a)
    {
        current_alignment += carla_msgs::msg::CarlaVehicleInfoWheel::getCdrSerializedSize(data.wheels().at(a), current_alignment);}

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += geometry_msgs::msg::Vector3::getCdrSerializedSize(data.center_of_mass(), current_alignment);
    current_alignment += shape_msgs::msg::SolidPrimitive::getCdrSerializedSize(data.shape(), current_alignment);

    return current_alignment - initial_alignment;
}

void carla_msgs::msg::CarlaVehicleInfo::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_id;
    scdr << m_type;
    scdr << m_rolename;
    scdr << m_wheels;
    scdr << m_max_rpm;
    scdr << m_moi;
    scdr << m_damping_rate_full_throttle;
    scdr << m_damping_rate_zero_throttle_clutch_engaged;
    scdr << m_damping_rate_zero_throttle_clutch_disengaged;
    scdr << m_use_gear_autobox;
    scdr << m_gear_switch_time;
    scdr << m_clutch_strength;
    scdr << m_mass;
    scdr << m_drag_coefficient;
    scdr << m_center_of_mass;
    scdr << m_shape;

}

void carla_msgs::msg::CarlaVehicleInfo::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_id;
    dcdr >> m_type;
    dcdr >> m_rolename;
    dcdr >> m_wheels;
    dcdr >> m_max_rpm;
    dcdr >> m_moi;
    dcdr >> m_damping_rate_full_throttle;
    dcdr >> m_damping_rate_zero_throttle_clutch_engaged;
    dcdr >> m_damping_rate_zero_throttle_clutch_disengaged;
    dcdr >> m_use_gear_autobox;
    dcdr >> m_gear_switch_time;
    dcdr >> m_clutch_strength;
    dcdr >> m_mass;
    dcdr >> m_drag_coefficient;
    dcdr >> m_center_of_mass;
    dcdr >> m_shape;
}

/*!
 * @brief This function sets a value in member id
 * @param _id New value for member id
 */
void carla_msgs::msg::CarlaVehicleInfo::id(
        uint32_t _id)
{
    m_id = _id;
}

/*!
 * @brief This function returns the value of member id
 * @return Value of member id
 */
uint32_t carla_msgs::msg::CarlaVehicleInfo::id() const
{
    return m_id;
}

/*!
 * @brief This function returns a reference to member id
 * @return Reference to member id
 */
uint32_t& carla_msgs::msg::CarlaVehicleInfo::id()
{
    return m_id;
}

/*!
 * @brief This function copies the value in member type
 * @param _type New value to be copied in member type
 */
void carla_msgs::msg::CarlaVehicleInfo::type(
        const std::string& _type)
{
    m_type = _type;
}

/*!
 * @brief This function moves the value in member type
 * @param _type New value to be moved in member type
 */
void carla_msgs::msg::CarlaVehicleInfo::type(
        std::string&& _type)
{
    m_type = std::move(_type);
}

/*!
 * @brief This function returns a constant reference to member type
 * @return Constant reference to member type
 */
const std::string& carla_msgs::msg::CarlaVehicleInfo::type() const
{
    return m_type;
}

/*!
 * @brief This function returns a reference to member type
 * @return Reference to member type
 */
std::string& carla_msgs::msg::CarlaVehicleInfo::type()
{
    return m_type;
}
/*!
 * @brief This function copies the value in member rolename
 * @param _rolename New value to be copied in member rolename
 */
void carla_msgs::msg::CarlaVehicleInfo::rolename(
        const std::string& _rolename)
{
    m_rolename = _rolename;
}

/*!
 * @brief This function moves the value in member rolename
 * @param _rolename New value to be moved in member rolename
 */
void carla_msgs::msg::CarlaVehicleInfo::rolename(
        std::string&& _rolename)
{
    m_rolename = std::move(_rolename);
}

/*!
 * @brief This function returns a constant reference to member rolename
 * @return Constant reference to member rolename
 */
const std::string& carla_msgs::msg::CarlaVehicleInfo::rolename() const
{
    return m_rolename;
}

/*!
 * @brief This function returns a reference to member rolename
 * @return Reference to member rolename
 */
std::string& carla_msgs::msg::CarlaVehicleInfo::rolename()
{
    return m_rolename;
}
/*!
 * @brief This function copies the value in member wheels
 * @param _wheels New value to be copied in member wheels
 */
void carla_msgs::msg::CarlaVehicleInfo::wheels(
        const std::vector<carla_msgs::msg::CarlaVehicleInfoWheel>& _wheels)
{
    m_wheels = _wheels;
}

/*!
 * @brief This function moves the value in member wheels
 * @param _wheels New value to be moved in member wheels
 */
void carla_msgs::msg::CarlaVehicleInfo::wheels(
        std::vector<carla_msgs::msg::CarlaVehicleInfoWheel>&& _wheels)
{
    m_wheels = std::move(_wheels);
}

/*!
 * @brief This function returns a constant reference to member wheels
 * @return Constant reference to member wheels
 */
const std::vector<carla_msgs::msg::CarlaVehicleInfoWheel>& carla_msgs::msg::CarlaVehicleInfo::wheels() const
{
    return m_wheels;
}

/*!
 * @brief This function returns a reference to member wheels
 * @return Reference to member wheels
 */
std::vector<carla_msgs::msg::CarlaVehicleInfoWheel>& carla_msgs::msg::CarlaVehicleInfo::wheels()
{
    return m_wheels;
}
/*!
 * @brief This function sets a value in member max_rpm
 * @param _max_rpm New value for member max_rpm
 */
void carla_msgs::msg::CarlaVehicleInfo::max_rpm(
        float _max_rpm)
{
    m_max_rpm = _max_rpm;
}

/*!
 * @brief This function returns the value of member max_rpm
 * @return Value of member max_rpm
 */
float carla_msgs::msg::CarlaVehicleInfo::max_rpm() const
{
    return m_max_rpm;
}

/*!
 * @brief This function returns a reference to member max_rpm
 * @return Reference to member max_rpm
 */
float& carla_msgs::msg::CarlaVehicleInfo::max_rpm()
{
    return m_max_rpm;
}

/*!
 * @brief This function sets a value in member moi
 * @param _moi New value for member moi
 */
void carla_msgs::msg::CarlaVehicleInfo::moi(
        float _moi)
{
    m_moi = _moi;
}

/*!
 * @brief This function returns the value of member moi
 * @return Value of member moi
 */
float carla_msgs::msg::CarlaVehicleInfo::moi() const
{
    return m_moi;
}

/*!
 * @brief This function returns a reference to member moi
 * @return Reference to member moi
 */
float& carla_msgs::msg::CarlaVehicleInfo::moi()
{
    return m_moi;
}

/*!
 * @brief This function sets a value in member damping_rate_full_throttle
 * @param _damping_rate_full_throttle New value for member damping_rate_full_throttle
 */
void carla_msgs::msg::CarlaVehicleInfo::damping_rate_full_throttle(
        float _damping_rate_full_throttle)
{
    m_damping_rate_full_throttle = _damping_rate_full_throttle;
}

/*!
 * @brief This function returns the value of member damping_rate_full_throttle
 * @return Value of member damping_rate_full_throttle
 */
float carla_msgs::msg::CarlaVehicleInfo::damping_rate_full_throttle() const
{
    return m_damping_rate_full_throttle;
}

/*!
 * @brief This function returns a reference to member damping_rate_full_throttle
 * @return Reference to member damping_rate_full_throttle
 */
float& carla_msgs::msg::CarlaVehicleInfo::damping_rate_full_throttle()
{
    return m_damping_rate_full_throttle;
}

/*!
 * @brief This function sets a value in member damping_rate_zero_throttle_clutch_engaged
 * @param _damping_rate_zero_throttle_clutch_engaged New value for member damping_rate_zero_throttle_clutch_engaged
 */
void carla_msgs::msg::CarlaVehicleInfo::damping_rate_zero_throttle_clutch_engaged(
        float _damping_rate_zero_throttle_clutch_engaged)
{
    m_damping_rate_zero_throttle_clutch_engaged = _damping_rate_zero_throttle_clutch_engaged;
}

/*!
 * @brief This function returns the value of member damping_rate_zero_throttle_clutch_engaged
 * @return Value of member damping_rate_zero_throttle_clutch_engaged
 */
float carla_msgs::msg::CarlaVehicleInfo::damping_rate_zero_throttle_clutch_engaged() const
{
    return m_damping_rate_zero_throttle_clutch_engaged;
}

/*!
 * @brief This function returns a reference to member damping_rate_zero_throttle_clutch_engaged
 * @return Reference to member damping_rate_zero_throttle_clutch_engaged
 */
float& carla_msgs::msg::CarlaVehicleInfo::damping_rate_zero_throttle_clutch_engaged()
{
    return m_damping_rate_zero_throttle_clutch_engaged;
}

/*!
 * @brief This function sets a value in member damping_rate_zero_throttle_clutch_disengaged
 * @param _damping_rate_zero_throttle_clutch_disengaged New value for member damping_rate_zero_throttle_clutch_disengaged
 */
void carla_msgs::msg::CarlaVehicleInfo::damping_rate_zero_throttle_clutch_disengaged(
        float _damping_rate_zero_throttle_clutch_disengaged)
{
    m_damping_rate_zero_throttle_clutch_disengaged = _damping_rate_zero_throttle_clutch_disengaged;
}

/*!
 * @brief This function returns the value of member damping_rate_zero_throttle_clutch_disengaged
 * @return Value of member damping_rate_zero_throttle_clutch_disengaged
 */
float carla_msgs::msg::CarlaVehicleInfo::damping_rate_zero_throttle_clutch_disengaged() const
{
    return m_damping_rate_zero_throttle_clutch_disengaged;
}

/*!
 * @brief This function returns a reference to member damping_rate_zero_throttle_clutch_disengaged
 * @return Reference to member damping_rate_zero_throttle_clutch_disengaged
 */
float& carla_msgs::msg::CarlaVehicleInfo::damping_rate_zero_throttle_clutch_disengaged()
{
    return m_damping_rate_zero_throttle_clutch_disengaged;
}

/*!
 * @brief This function sets a value in member use_gear_autobox
 * @param _use_gear_autobox New value for member use_gear_autobox
 */
void carla_msgs::msg::CarlaVehicleInfo::use_gear_autobox(
        bool _use_gear_autobox)
{
    m_use_gear_autobox = _use_gear_autobox;
}

/*!
 * @brief This function returns the value of member use_gear_autobox
 * @return Value of member use_gear_autobox
 */
bool carla_msgs::msg::CarlaVehicleInfo::use_gear_autobox() const
{
    return m_use_gear_autobox;
}

/*!
 * @brief This function returns a reference to member use_gear_autobox
 * @return Reference to member use_gear_autobox
 */
bool& carla_msgs::msg::CarlaVehicleInfo::use_gear_autobox()
{
    return m_use_gear_autobox;
}

/*!
 * @brief This function sets a value in member gear_switch_time
 * @param _gear_switch_time New value for member gear_switch_time
 */
void carla_msgs::msg::CarlaVehicleInfo::gear_switch_time(
        float _gear_switch_time)
{
    m_gear_switch_time = _gear_switch_time;
}

/*!
 * @brief This function returns the value of member gear_switch_time
 * @return Value of member gear_switch_time
 */
float carla_msgs::msg::CarlaVehicleInfo::gear_switch_time() const
{
    return m_gear_switch_time;
}

/*!
 * @brief This function returns a reference to member gear_switch_time
 * @return Reference to member gear_switch_time
 */
float& carla_msgs::msg::CarlaVehicleInfo::gear_switch_time()
{
    return m_gear_switch_time;
}

/*!
 * @brief This function sets a value in member clutch_strength
 * @param _clutch_strength New value for member clutch_strength
 */
void carla_msgs::msg::CarlaVehicleInfo::clutch_strength(
        float _clutch_strength)
{
    m_clutch_strength = _clutch_strength;
}

/*!
 * @brief This function returns the value of member clutch_strength
 * @return Value of member clutch_strength
 */
float carla_msgs::msg::CarlaVehicleInfo::clutch_strength() const
{
    return m_clutch_strength;
}

/*!
 * @brief This function returns a reference to member clutch_strength
 * @return Reference to member clutch_strength
 */
float& carla_msgs::msg::CarlaVehicleInfo::clutch_strength()
{
    return m_clutch_strength;
}

/*!
 * @brief This function sets a value in member mass
 * @param _mass New value for member mass
 */
void carla_msgs::msg::CarlaVehicleInfo::mass(
        float _mass)
{
    m_mass = _mass;
}

/*!
 * @brief This function returns the value of member mass
 * @return Value of member mass
 */
float carla_msgs::msg::CarlaVehicleInfo::mass() const
{
    return m_mass;
}

/*!
 * @brief This function returns a reference to member mass
 * @return Reference to member mass
 */
float& carla_msgs::msg::CarlaVehicleInfo::mass()
{
    return m_mass;
}

/*!
 * @brief This function sets a value in member drag_coefficient
 * @param _drag_coefficient New value for member drag_coefficient
 */
void carla_msgs::msg::CarlaVehicleInfo::drag_coefficient(
        float _drag_coefficient)
{
    m_drag_coefficient = _drag_coefficient;
}

/*!
 * @brief This function returns the value of member drag_coefficient
 * @return Value of member drag_coefficient
 */
float carla_msgs::msg::CarlaVehicleInfo::drag_coefficient() const
{
    return m_drag_coefficient;
}

/*!
 * @brief This function returns a reference to member drag_coefficient
 * @return Reference to member drag_coefficient
 */
float& carla_msgs::msg::CarlaVehicleInfo::drag_coefficient()
{
    return m_drag_coefficient;
}

/*!
 * @brief This function copies the value in member center_of_mass
 * @param _center_of_mass New value to be copied in member center_of_mass
 */
void carla_msgs::msg::CarlaVehicleInfo::center_of_mass(
        const geometry_msgs::msg::Vector3& _center_of_mass)
{
    m_center_of_mass = _center_of_mass;
}

/*!
 * @brief This function moves the value in member center_of_mass
 * @param _center_of_mass New value to be moved in member center_of_mass
 */
void carla_msgs::msg::CarlaVehicleInfo::center_of_mass(
        geometry_msgs::msg::Vector3&& _center_of_mass)
{
    m_center_of_mass = std::move(_center_of_mass);
}

/*!
 * @brief This function returns a constant reference to member center_of_mass
 * @return Constant reference to member center_of_mass
 */
const geometry_msgs::msg::Vector3& carla_msgs::msg::CarlaVehicleInfo::center_of_mass() const
{
    return m_center_of_mass;
}

/*!
 * @brief This function returns a reference to member center_of_mass
 * @return Reference to member center_of_mass
 */
geometry_msgs::msg::Vector3& carla_msgs::msg::CarlaVehicleInfo::center_of_mass()
{
    return m_center_of_mass;
}
/*!
 * @brief This function copies the value in member shape
 * @param _shape New value to be copied in member shape
 */
void carla_msgs::msg::CarlaVehicleInfo::shape(
        const shape_msgs::msg::SolidPrimitive& _shape)
{
    m_shape = _shape;
}

/*!
 * @brief This function moves the value in member shape
 * @param _shape New value to be moved in member shape
 */
void carla_msgs::msg::CarlaVehicleInfo::shape(
        shape_msgs::msg::SolidPrimitive&& _shape)
{
    m_shape = std::move(_shape);
}

/*!
 * @brief This function returns a constant reference to member shape
 * @return Constant reference to member shape
 */
const shape_msgs::msg::SolidPrimitive& carla_msgs::msg::CarlaVehicleInfo::shape() const
{
    return m_shape;
}

/*!
 * @brief This function returns a reference to member shape
 * @return Reference to member shape
 */
shape_msgs::msg::SolidPrimitive& carla_msgs::msg::CarlaVehicleInfo::shape()
{
    return m_shape;
}

size_t carla_msgs::msg::CarlaVehicleInfo::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;



    return current_align;
}

bool carla_msgs::msg::CarlaVehicleInfo::isKeyDefined()
{
    return false;
}

void carla_msgs::msg::CarlaVehicleInfo::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
                    
}


