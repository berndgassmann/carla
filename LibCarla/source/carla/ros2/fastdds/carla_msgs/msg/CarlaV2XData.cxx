// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file CarlaV2XData.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "CarlaV2XData.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

carla_msgs::msg::CarlaV2XData::CarlaV2XData()
{
    // m_power com.eprosima.idl.parser.typecode.PrimitiveTypeCode@f1da57d
    m_power = 0.0;
    // m_message com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@72c8e7b


}

carla_msgs::msg::CarlaV2XData::~CarlaV2XData()
{

}

carla_msgs::msg::CarlaV2XData::CarlaV2XData(
        const CarlaV2XData& x)
{
    m_power = x.m_power;
    m_message = x.m_message;
}

carla_msgs::msg::CarlaV2XData::CarlaV2XData(
        CarlaV2XData&& x)
{
    m_power = x.m_power;
    m_message = std::move(x.m_message);
}

carla_msgs::msg::CarlaV2XData& carla_msgs::msg::CarlaV2XData::operator =(
        const CarlaV2XData& x)
{

    m_power = x.m_power;
    m_message = x.m_message;

    return *this;
}

carla_msgs::msg::CarlaV2XData& carla_msgs::msg::CarlaV2XData::operator =(
        CarlaV2XData&& x)
{

    m_power = x.m_power;
    m_message = std::move(x.m_message);

    return *this;
}

bool carla_msgs::msg::CarlaV2XData::operator ==(
        const CarlaV2XData& x) const
{

    return (m_power == x.m_power && m_message == x.m_message);
}

bool carla_msgs::msg::CarlaV2XData::operator !=(
        const CarlaV2XData& x) const
{
    return !(*this == x);
}

size_t carla_msgs::msg::CarlaV2XData::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += etsi_its_cam_msgs::msg::CAM::getMaxCdrSerializedSize(current_alignment);

    return current_alignment - initial_alignment;
}

size_t carla_msgs::msg::CarlaV2XData::getCdrSerializedSize(
        const carla_msgs::msg::CarlaV2XData& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += etsi_its_cam_msgs::msg::CAM::getCdrSerializedSize(data.message(), current_alignment);

    return current_alignment - initial_alignment;
}

void carla_msgs::msg::CarlaV2XData::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_power;
    scdr << m_message;

}

void carla_msgs::msg::CarlaV2XData::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_power;
    dcdr >> m_message;
}

/*!
 * @brief This function sets a value in member power
 * @param _power New value for member power
 */
void carla_msgs::msg::CarlaV2XData::power(
        float _power)
{
    m_power = _power;
}

/*!
 * @brief This function returns the value of member power
 * @return Value of member power
 */
float carla_msgs::msg::CarlaV2XData::power() const
{
    return m_power;
}

/*!
 * @brief This function returns a reference to member power
 * @return Reference to member power
 */
float& carla_msgs::msg::CarlaV2XData::power()
{
    return m_power;
}

/*!
 * @brief This function copies the value in member message
 * @param _message New value to be copied in member message
 */
void carla_msgs::msg::CarlaV2XData::message(
        const etsi_its_cam_msgs::msg::CAM& _message)
{
    m_message = _message;
}

/*!
 * @brief This function moves the value in member message
 * @param _message New value to be moved in member message
 */
void carla_msgs::msg::CarlaV2XData::message(
        etsi_its_cam_msgs::msg::CAM&& _message)
{
    m_message = std::move(_message);
}

/*!
 * @brief This function returns a constant reference to member message
 * @return Constant reference to member message
 */
const etsi_its_cam_msgs::msg::CAM& carla_msgs::msg::CarlaV2XData::message() const
{
    return m_message;
}

/*!
 * @brief This function returns a reference to member message
 * @return Reference to member message
 */
etsi_its_cam_msgs::msg::CAM& carla_msgs::msg::CarlaV2XData::message()
{
    return m_message;
}

size_t carla_msgs::msg::CarlaV2XData::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;



    return current_align;
}

bool carla_msgs::msg::CarlaV2XData::isKeyDefined()
{
    return false;
}

void carla_msgs::msg::CarlaV2XData::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
      
}


