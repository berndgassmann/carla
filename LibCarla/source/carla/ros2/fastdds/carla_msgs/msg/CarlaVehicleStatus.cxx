// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file CarlaVehicleStatus.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "CarlaVehicleStatus.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>




carla_msgs::msg::CarlaVehicleStatus::CarlaVehicleStatus()
{
    // m_header com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@865dd6

    // m_child_frame_id com.eprosima.idl.parser.typecode.StringTypeCode@4da4253
    m_child_frame_id ="";
    // m_pose com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@3972a855

    // m_twist com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@62e7f11d

    // m_velocity com.eprosima.idl.parser.typecode.PrimitiveTypeCode@503d687a
    m_velocity = 0.0;
    // m_acceleration com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@6a370f4

    // m_orientation com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@4cc8eb05

    // m_active_control_type com.eprosima.idl.parser.typecode.PrimitiveTypeCode@51f116b8
    m_active_control_type = 0;
    // m_last_applied_vehicle_control com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@19d481b

    // m_last_applied_ackermann_control com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@1f97cf0d


}

carla_msgs::msg::CarlaVehicleStatus::~CarlaVehicleStatus()
{









}

carla_msgs::msg::CarlaVehicleStatus::CarlaVehicleStatus(
        const CarlaVehicleStatus& x)
{
    m_header = x.m_header;
    m_child_frame_id = x.m_child_frame_id;
    m_pose = x.m_pose;
    m_twist = x.m_twist;
    m_velocity = x.m_velocity;
    m_acceleration = x.m_acceleration;
    m_orientation = x.m_orientation;
    m_active_control_type = x.m_active_control_type;
    m_last_applied_vehicle_control = x.m_last_applied_vehicle_control;
    m_last_applied_ackermann_control = x.m_last_applied_ackermann_control;
}

carla_msgs::msg::CarlaVehicleStatus::CarlaVehicleStatus(
        CarlaVehicleStatus&& x)
{
    m_header = std::move(x.m_header);
    m_child_frame_id = std::move(x.m_child_frame_id);
    m_pose = std::move(x.m_pose);
    m_twist = std::move(x.m_twist);
    m_velocity = x.m_velocity;
    m_acceleration = std::move(x.m_acceleration);
    m_orientation = std::move(x.m_orientation);
    m_active_control_type = x.m_active_control_type;
    m_last_applied_vehicle_control = std::move(x.m_last_applied_vehicle_control);
    m_last_applied_ackermann_control = std::move(x.m_last_applied_ackermann_control);
}

carla_msgs::msg::CarlaVehicleStatus& carla_msgs::msg::CarlaVehicleStatus::operator =(
        const CarlaVehicleStatus& x)
{

    m_header = x.m_header;
    m_child_frame_id = x.m_child_frame_id;
    m_pose = x.m_pose;
    m_twist = x.m_twist;
    m_velocity = x.m_velocity;
    m_acceleration = x.m_acceleration;
    m_orientation = x.m_orientation;
    m_active_control_type = x.m_active_control_type;
    m_last_applied_vehicle_control = x.m_last_applied_vehicle_control;
    m_last_applied_ackermann_control = x.m_last_applied_ackermann_control;

    return *this;
}

carla_msgs::msg::CarlaVehicleStatus& carla_msgs::msg::CarlaVehicleStatus::operator =(
        CarlaVehicleStatus&& x)
{

    m_header = std::move(x.m_header);
    m_child_frame_id = std::move(x.m_child_frame_id);
    m_pose = std::move(x.m_pose);
    m_twist = std::move(x.m_twist);
    m_velocity = x.m_velocity;
    m_acceleration = std::move(x.m_acceleration);
    m_orientation = std::move(x.m_orientation);
    m_active_control_type = x.m_active_control_type;
    m_last_applied_vehicle_control = std::move(x.m_last_applied_vehicle_control);
    m_last_applied_ackermann_control = std::move(x.m_last_applied_ackermann_control);

    return *this;
}

bool carla_msgs::msg::CarlaVehicleStatus::operator ==(
        const CarlaVehicleStatus& x) const
{

    return (m_header == x.m_header && m_child_frame_id == x.m_child_frame_id && m_pose == x.m_pose && m_twist == x.m_twist && m_velocity == x.m_velocity && m_acceleration == x.m_acceleration && m_orientation == x.m_orientation && m_active_control_type == x.m_active_control_type && m_last_applied_vehicle_control == x.m_last_applied_vehicle_control && m_last_applied_ackermann_control == x.m_last_applied_ackermann_control);
}

bool carla_msgs::msg::CarlaVehicleStatus::operator !=(
        const CarlaVehicleStatus& x) const
{
    return !(*this == x);
}

size_t carla_msgs::msg::CarlaVehicleStatus::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += std_msgs::msg::Header::getMaxCdrSerializedSize(current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

    current_alignment += geometry_msgs::msg::Pose::getMaxCdrSerializedSize(current_alignment);
    current_alignment += geometry_msgs::msg::Twist::getMaxCdrSerializedSize(current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += geometry_msgs::msg::Accel::getMaxCdrSerializedSize(current_alignment);
    current_alignment += geometry_msgs::msg::Quaternion::getMaxCdrSerializedSize(current_alignment);
    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += carla_msgs::msg::CarlaVehicleControl::getMaxCdrSerializedSize(current_alignment);
    current_alignment += ackermann_msgs::msg::AckermannDriveStamped::getMaxCdrSerializedSize(current_alignment);

    return current_alignment - initial_alignment;
}

size_t carla_msgs::msg::CarlaVehicleStatus::getCdrSerializedSize(
        const carla_msgs::msg::CarlaVehicleStatus& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += std_msgs::msg::Header::getCdrSerializedSize(data.header(), current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.child_frame_id().size() + 1;

    current_alignment += geometry_msgs::msg::Pose::getCdrSerializedSize(data.pose(), current_alignment);
    current_alignment += geometry_msgs::msg::Twist::getCdrSerializedSize(data.twist(), current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += geometry_msgs::msg::Accel::getCdrSerializedSize(data.acceleration(), current_alignment);
    current_alignment += geometry_msgs::msg::Quaternion::getCdrSerializedSize(data.orientation(), current_alignment);
    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += carla_msgs::msg::CarlaVehicleControl::getCdrSerializedSize(data.last_applied_vehicle_control(), current_alignment);
    current_alignment += ackermann_msgs::msg::AckermannDriveStamped::getCdrSerializedSize(data.last_applied_ackermann_control(), current_alignment);

    return current_alignment - initial_alignment;
}

void carla_msgs::msg::CarlaVehicleStatus::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_header;
    scdr << m_child_frame_id;
    scdr << m_pose;
    scdr << m_twist;
    scdr << m_velocity;
    scdr << m_acceleration;
    scdr << m_orientation;
    scdr << m_active_control_type;
    scdr << m_last_applied_vehicle_control;
    scdr << m_last_applied_ackermann_control;

}

void carla_msgs::msg::CarlaVehicleStatus::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_header;
    dcdr >> m_child_frame_id;
    dcdr >> m_pose;
    dcdr >> m_twist;
    dcdr >> m_velocity;
    dcdr >> m_acceleration;
    dcdr >> m_orientation;
    dcdr >> m_active_control_type;
    dcdr >> m_last_applied_vehicle_control;
    dcdr >> m_last_applied_ackermann_control;
}

/*!
 * @brief This function copies the value in member header
 * @param _header New value to be copied in member header
 */
void carla_msgs::msg::CarlaVehicleStatus::header(
        const std_msgs::msg::Header& _header)
{
    m_header = _header;
}

/*!
 * @brief This function moves the value in member header
 * @param _header New value to be moved in member header
 */
void carla_msgs::msg::CarlaVehicleStatus::header(
        std_msgs::msg::Header&& _header)
{
    m_header = std::move(_header);
}

/*!
 * @brief This function returns a constant reference to member header
 * @return Constant reference to member header
 */
const std_msgs::msg::Header& carla_msgs::msg::CarlaVehicleStatus::header() const
{
    return m_header;
}

/*!
 * @brief This function returns a reference to member header
 * @return Reference to member header
 */
std_msgs::msg::Header& carla_msgs::msg::CarlaVehicleStatus::header()
{
    return m_header;
}
/*!
 * @brief This function copies the value in member child_frame_id
 * @param _child_frame_id New value to be copied in member child_frame_id
 */
void carla_msgs::msg::CarlaVehicleStatus::child_frame_id(
        const std::string& _child_frame_id)
{
    m_child_frame_id = _child_frame_id;
}

/*!
 * @brief This function moves the value in member child_frame_id
 * @param _child_frame_id New value to be moved in member child_frame_id
 */
void carla_msgs::msg::CarlaVehicleStatus::child_frame_id(
        std::string&& _child_frame_id)
{
    m_child_frame_id = std::move(_child_frame_id);
}

/*!
 * @brief This function returns a constant reference to member child_frame_id
 * @return Constant reference to member child_frame_id
 */
const std::string& carla_msgs::msg::CarlaVehicleStatus::child_frame_id() const
{
    return m_child_frame_id;
}

/*!
 * @brief This function returns a reference to member child_frame_id
 * @return Reference to member child_frame_id
 */
std::string& carla_msgs::msg::CarlaVehicleStatus::child_frame_id()
{
    return m_child_frame_id;
}
/*!
 * @brief This function copies the value in member pose
 * @param _pose New value to be copied in member pose
 */
void carla_msgs::msg::CarlaVehicleStatus::pose(
        const geometry_msgs::msg::Pose& _pose)
{
    m_pose = _pose;
}

/*!
 * @brief This function moves the value in member pose
 * @param _pose New value to be moved in member pose
 */
void carla_msgs::msg::CarlaVehicleStatus::pose(
        geometry_msgs::msg::Pose&& _pose)
{
    m_pose = std::move(_pose);
}

/*!
 * @brief This function returns a constant reference to member pose
 * @return Constant reference to member pose
 */
const geometry_msgs::msg::Pose& carla_msgs::msg::CarlaVehicleStatus::pose() const
{
    return m_pose;
}

/*!
 * @brief This function returns a reference to member pose
 * @return Reference to member pose
 */
geometry_msgs::msg::Pose& carla_msgs::msg::CarlaVehicleStatus::pose()
{
    return m_pose;
}
/*!
 * @brief This function copies the value in member twist
 * @param _twist New value to be copied in member twist
 */
void carla_msgs::msg::CarlaVehicleStatus::twist(
        const geometry_msgs::msg::Twist& _twist)
{
    m_twist = _twist;
}

/*!
 * @brief This function moves the value in member twist
 * @param _twist New value to be moved in member twist
 */
void carla_msgs::msg::CarlaVehicleStatus::twist(
        geometry_msgs::msg::Twist&& _twist)
{
    m_twist = std::move(_twist);
}

/*!
 * @brief This function returns a constant reference to member twist
 * @return Constant reference to member twist
 */
const geometry_msgs::msg::Twist& carla_msgs::msg::CarlaVehicleStatus::twist() const
{
    return m_twist;
}

/*!
 * @brief This function returns a reference to member twist
 * @return Reference to member twist
 */
geometry_msgs::msg::Twist& carla_msgs::msg::CarlaVehicleStatus::twist()
{
    return m_twist;
}
/*!
 * @brief This function sets a value in member velocity
 * @param _velocity New value for member velocity
 */
void carla_msgs::msg::CarlaVehicleStatus::velocity(
        float _velocity)
{
    m_velocity = _velocity;
}

/*!
 * @brief This function returns the value of member velocity
 * @return Value of member velocity
 */
float carla_msgs::msg::CarlaVehicleStatus::velocity() const
{
    return m_velocity;
}

/*!
 * @brief This function returns a reference to member velocity
 * @return Reference to member velocity
 */
float& carla_msgs::msg::CarlaVehicleStatus::velocity()
{
    return m_velocity;
}

/*!
 * @brief This function copies the value in member acceleration
 * @param _acceleration New value to be copied in member acceleration
 */
void carla_msgs::msg::CarlaVehicleStatus::acceleration(
        const geometry_msgs::msg::Accel& _acceleration)
{
    m_acceleration = _acceleration;
}

/*!
 * @brief This function moves the value in member acceleration
 * @param _acceleration New value to be moved in member acceleration
 */
void carla_msgs::msg::CarlaVehicleStatus::acceleration(
        geometry_msgs::msg::Accel&& _acceleration)
{
    m_acceleration = std::move(_acceleration);
}

/*!
 * @brief This function returns a constant reference to member acceleration
 * @return Constant reference to member acceleration
 */
const geometry_msgs::msg::Accel& carla_msgs::msg::CarlaVehicleStatus::acceleration() const
{
    return m_acceleration;
}

/*!
 * @brief This function returns a reference to member acceleration
 * @return Reference to member acceleration
 */
geometry_msgs::msg::Accel& carla_msgs::msg::CarlaVehicleStatus::acceleration()
{
    return m_acceleration;
}
/*!
 * @brief This function copies the value in member orientation
 * @param _orientation New value to be copied in member orientation
 */
void carla_msgs::msg::CarlaVehicleStatus::orientation(
        const geometry_msgs::msg::Quaternion& _orientation)
{
    m_orientation = _orientation;
}

/*!
 * @brief This function moves the value in member orientation
 * @param _orientation New value to be moved in member orientation
 */
void carla_msgs::msg::CarlaVehicleStatus::orientation(
        geometry_msgs::msg::Quaternion&& _orientation)
{
    m_orientation = std::move(_orientation);
}

/*!
 * @brief This function returns a constant reference to member orientation
 * @return Constant reference to member orientation
 */
const geometry_msgs::msg::Quaternion& carla_msgs::msg::CarlaVehicleStatus::orientation() const
{
    return m_orientation;
}

/*!
 * @brief This function returns a reference to member orientation
 * @return Reference to member orientation
 */
geometry_msgs::msg::Quaternion& carla_msgs::msg::CarlaVehicleStatus::orientation()
{
    return m_orientation;
}
/*!
 * @brief This function sets a value in member active_control_type
 * @param _active_control_type New value for member active_control_type
 */
void carla_msgs::msg::CarlaVehicleStatus::active_control_type(
        uint8_t _active_control_type)
{
    m_active_control_type = _active_control_type;
}

/*!
 * @brief This function returns the value of member active_control_type
 * @return Value of member active_control_type
 */
uint8_t carla_msgs::msg::CarlaVehicleStatus::active_control_type() const
{
    return m_active_control_type;
}

/*!
 * @brief This function returns a reference to member active_control_type
 * @return Reference to member active_control_type
 */
uint8_t& carla_msgs::msg::CarlaVehicleStatus::active_control_type()
{
    return m_active_control_type;
}

/*!
 * @brief This function copies the value in member last_applied_vehicle_control
 * @param _last_applied_vehicle_control New value to be copied in member last_applied_vehicle_control
 */
void carla_msgs::msg::CarlaVehicleStatus::last_applied_vehicle_control(
        const carla_msgs::msg::CarlaVehicleControl& _last_applied_vehicle_control)
{
    m_last_applied_vehicle_control = _last_applied_vehicle_control;
}

/*!
 * @brief This function moves the value in member last_applied_vehicle_control
 * @param _last_applied_vehicle_control New value to be moved in member last_applied_vehicle_control
 */
void carla_msgs::msg::CarlaVehicleStatus::last_applied_vehicle_control(
        carla_msgs::msg::CarlaVehicleControl&& _last_applied_vehicle_control)
{
    m_last_applied_vehicle_control = std::move(_last_applied_vehicle_control);
}

/*!
 * @brief This function returns a constant reference to member last_applied_vehicle_control
 * @return Constant reference to member last_applied_vehicle_control
 */
const carla_msgs::msg::CarlaVehicleControl& carla_msgs::msg::CarlaVehicleStatus::last_applied_vehicle_control() const
{
    return m_last_applied_vehicle_control;
}

/*!
 * @brief This function returns a reference to member last_applied_vehicle_control
 * @return Reference to member last_applied_vehicle_control
 */
carla_msgs::msg::CarlaVehicleControl& carla_msgs::msg::CarlaVehicleStatus::last_applied_vehicle_control()
{
    return m_last_applied_vehicle_control;
}
/*!
 * @brief This function copies the value in member last_applied_ackermann_control
 * @param _last_applied_ackermann_control New value to be copied in member last_applied_ackermann_control
 */
void carla_msgs::msg::CarlaVehicleStatus::last_applied_ackermann_control(
        const ackermann_msgs::msg::AckermannDriveStamped& _last_applied_ackermann_control)
{
    m_last_applied_ackermann_control = _last_applied_ackermann_control;
}

/*!
 * @brief This function moves the value in member last_applied_ackermann_control
 * @param _last_applied_ackermann_control New value to be moved in member last_applied_ackermann_control
 */
void carla_msgs::msg::CarlaVehicleStatus::last_applied_ackermann_control(
        ackermann_msgs::msg::AckermannDriveStamped&& _last_applied_ackermann_control)
{
    m_last_applied_ackermann_control = std::move(_last_applied_ackermann_control);
}

/*!
 * @brief This function returns a constant reference to member last_applied_ackermann_control
 * @return Constant reference to member last_applied_ackermann_control
 */
const ackermann_msgs::msg::AckermannDriveStamped& carla_msgs::msg::CarlaVehicleStatus::last_applied_ackermann_control() const
{
    return m_last_applied_ackermann_control;
}

/*!
 * @brief This function returns a reference to member last_applied_ackermann_control
 * @return Reference to member last_applied_ackermann_control
 */
ackermann_msgs::msg::AckermannDriveStamped& carla_msgs::msg::CarlaVehicleStatus::last_applied_ackermann_control()
{
    return m_last_applied_ackermann_control;
}

size_t carla_msgs::msg::CarlaVehicleStatus::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;



    return current_align;
}

bool carla_msgs::msg::CarlaVehicleStatus::isKeyDefined()
{
    return false;
}

void carla_msgs::msg::CarlaVehicleStatus::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
              
}


