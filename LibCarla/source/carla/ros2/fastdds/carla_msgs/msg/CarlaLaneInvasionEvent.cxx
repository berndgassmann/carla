// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file CarlaLaneInvasionEvent.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "CarlaLaneInvasionEvent.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>





carla_msgs::msg::CarlaLaneInvasionEvent::CarlaLaneInvasionEvent()
{
    // m_header com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@37654521

    // m_crossed_lane_markings com.eprosima.idl.parser.typecode.SequenceTypeCode@15aab8c6


}

carla_msgs::msg::CarlaLaneInvasionEvent::~CarlaLaneInvasionEvent()
{

}

carla_msgs::msg::CarlaLaneInvasionEvent::CarlaLaneInvasionEvent(
        const CarlaLaneInvasionEvent& x)
{
    m_header = x.m_header;
    m_crossed_lane_markings = x.m_crossed_lane_markings;
}

carla_msgs::msg::CarlaLaneInvasionEvent::CarlaLaneInvasionEvent(
        CarlaLaneInvasionEvent&& x)
{
    m_header = std::move(x.m_header);
    m_crossed_lane_markings = std::move(x.m_crossed_lane_markings);
}

carla_msgs::msg::CarlaLaneInvasionEvent& carla_msgs::msg::CarlaLaneInvasionEvent::operator =(
        const CarlaLaneInvasionEvent& x)
{

    m_header = x.m_header;
    m_crossed_lane_markings = x.m_crossed_lane_markings;

    return *this;
}

carla_msgs::msg::CarlaLaneInvasionEvent& carla_msgs::msg::CarlaLaneInvasionEvent::operator =(
        CarlaLaneInvasionEvent&& x)
{

    m_header = std::move(x.m_header);
    m_crossed_lane_markings = std::move(x.m_crossed_lane_markings);

    return *this;
}

bool carla_msgs::msg::CarlaLaneInvasionEvent::operator ==(
        const CarlaLaneInvasionEvent& x) const
{

    return (m_header == x.m_header && m_crossed_lane_markings == x.m_crossed_lane_markings);
}

bool carla_msgs::msg::CarlaLaneInvasionEvent::operator !=(
        const CarlaLaneInvasionEvent& x) const
{
    return !(*this == x);
}

size_t carla_msgs::msg::CarlaLaneInvasionEvent::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += std_msgs::msg::Header::getMaxCdrSerializedSize(current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += (100 * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);




    return current_alignment - initial_alignment;
}

size_t carla_msgs::msg::CarlaLaneInvasionEvent::getCdrSerializedSize(
        const carla_msgs::msg::CarlaLaneInvasionEvent& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += std_msgs::msg::Header::getCdrSerializedSize(data.header(), current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    if (data.crossed_lane_markings().size() > 0)
    {
        current_alignment += (data.crossed_lane_markings().size() * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }




    return current_alignment - initial_alignment;
}

void carla_msgs::msg::CarlaLaneInvasionEvent::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_header;
    scdr << m_crossed_lane_markings;

}

void carla_msgs::msg::CarlaLaneInvasionEvent::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_header;
    dcdr >> m_crossed_lane_markings;
}

/*!
 * @brief This function copies the value in member header
 * @param _header New value to be copied in member header
 */
void carla_msgs::msg::CarlaLaneInvasionEvent::header(
        const std_msgs::msg::Header& _header)
{
    m_header = _header;
}

/*!
 * @brief This function moves the value in member header
 * @param _header New value to be moved in member header
 */
void carla_msgs::msg::CarlaLaneInvasionEvent::header(
        std_msgs::msg::Header&& _header)
{
    m_header = std::move(_header);
}

/*!
 * @brief This function returns a constant reference to member header
 * @return Constant reference to member header
 */
const std_msgs::msg::Header& carla_msgs::msg::CarlaLaneInvasionEvent::header() const
{
    return m_header;
}

/*!
 * @brief This function returns a reference to member header
 * @return Reference to member header
 */
std_msgs::msg::Header& carla_msgs::msg::CarlaLaneInvasionEvent::header()
{
    return m_header;
}
/*!
 * @brief This function copies the value in member crossed_lane_markings
 * @param _crossed_lane_markings New value to be copied in member crossed_lane_markings
 */
void carla_msgs::msg::CarlaLaneInvasionEvent::crossed_lane_markings(
        const std::vector<int32_t>& _crossed_lane_markings)
{
    m_crossed_lane_markings = _crossed_lane_markings;
}

/*!
 * @brief This function moves the value in member crossed_lane_markings
 * @param _crossed_lane_markings New value to be moved in member crossed_lane_markings
 */
void carla_msgs::msg::CarlaLaneInvasionEvent::crossed_lane_markings(
        std::vector<int32_t>&& _crossed_lane_markings)
{
    m_crossed_lane_markings = std::move(_crossed_lane_markings);
}

/*!
 * @brief This function returns a constant reference to member crossed_lane_markings
 * @return Constant reference to member crossed_lane_markings
 */
const std::vector<int32_t>& carla_msgs::msg::CarlaLaneInvasionEvent::crossed_lane_markings() const
{
    return m_crossed_lane_markings;
}

/*!
 * @brief This function returns a reference to member crossed_lane_markings
 * @return Reference to member crossed_lane_markings
 */
std::vector<int32_t>& carla_msgs::msg::CarlaLaneInvasionEvent::crossed_lane_markings()
{
    return m_crossed_lane_markings;
}

size_t carla_msgs::msg::CarlaLaneInvasionEvent::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;



    return current_align;
}

bool carla_msgs::msg::CarlaLaneInvasionEvent::isKeyDefined()
{
    return false;
}

void carla_msgs::msg::CarlaLaneInvasionEvent::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
      
}


