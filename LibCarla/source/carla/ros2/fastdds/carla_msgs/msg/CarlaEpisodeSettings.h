// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file CarlaEpisodeSettings.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _FAST_DDS_GENERATED_CARLA_MSGS_MSG_CARLAEPISODESETTINGS_H_
#define _FAST_DDS_GENERATED_CARLA_MSGS_MSG_CARLAEPISODESETTINGS_H_


#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(CarlaEpisodeSettings_SOURCE)
#define CarlaEpisodeSettings_DllAPI __declspec( dllexport )
#else
#define CarlaEpisodeSettings_DllAPI __declspec( dllimport )
#endif // CarlaEpisodeSettings_SOURCE
#else
#define CarlaEpisodeSettings_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define CarlaEpisodeSettings_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
} // namespace fastcdr
} // namespace eprosima


namespace carla_msgs {
    namespace msg {
        /*!
         * @brief This class represents the structure CarlaEpisodeSettings defined by the user in the IDL file.
         * @ingroup CARLAEPISODESETTINGS
         */
        class CarlaEpisodeSettings
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport CarlaEpisodeSettings();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~CarlaEpisodeSettings();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object carla_msgs::msg::CarlaEpisodeSettings that will be copied.
             */
            eProsima_user_DllExport CarlaEpisodeSettings(
                    const CarlaEpisodeSettings& x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object carla_msgs::msg::CarlaEpisodeSettings that will be copied.
             */
            eProsima_user_DllExport CarlaEpisodeSettings(
                    CarlaEpisodeSettings&& x);

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object carla_msgs::msg::CarlaEpisodeSettings that will be copied.
             */
            eProsima_user_DllExport CarlaEpisodeSettings& operator =(
                    const CarlaEpisodeSettings& x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object carla_msgs::msg::CarlaEpisodeSettings that will be copied.
             */
            eProsima_user_DllExport CarlaEpisodeSettings& operator =(
                    CarlaEpisodeSettings&& x);

            /*!
             * @brief Comparison operator.
             * @param x carla_msgs::msg::CarlaEpisodeSettings object to compare.
             */
            eProsima_user_DllExport bool operator ==(
                    const CarlaEpisodeSettings& x) const;

            /*!
             * @brief Comparison operator.
             * @param x carla_msgs::msg::CarlaEpisodeSettings object to compare.
             */
            eProsima_user_DllExport bool operator !=(
                    const CarlaEpisodeSettings& x) const;

            /*!
             * @brief This function sets a value in member synchronous_mode
             * @param _synchronous_mode New value for member synchronous_mode
             */
            eProsima_user_DllExport void synchronous_mode(
                    bool _synchronous_mode);

            /*!
             * @brief This function returns the value of member synchronous_mode
             * @return Value of member synchronous_mode
             */
            eProsima_user_DllExport bool synchronous_mode() const;

            /*!
             * @brief This function returns a reference to member synchronous_mode
             * @return Reference to member synchronous_mode
             */
            eProsima_user_DllExport bool& synchronous_mode();

            /*!
             * @brief This function sets a value in member no_rendering_mode
             * @param _no_rendering_mode New value for member no_rendering_mode
             */
            eProsima_user_DllExport void no_rendering_mode(
                    bool _no_rendering_mode);

            /*!
             * @brief This function returns the value of member no_rendering_mode
             * @return Value of member no_rendering_mode
             */
            eProsima_user_DllExport bool no_rendering_mode() const;

            /*!
             * @brief This function returns a reference to member no_rendering_mode
             * @return Reference to member no_rendering_mode
             */
            eProsima_user_DllExport bool& no_rendering_mode();

            /*!
             * @brief This function sets a value in member fixed_delta_seconds
             * @param _fixed_delta_seconds New value for member fixed_delta_seconds
             */
            eProsima_user_DllExport void fixed_delta_seconds(
                    float _fixed_delta_seconds);

            /*!
             * @brief This function returns the value of member fixed_delta_seconds
             * @return Value of member fixed_delta_seconds
             */
            eProsima_user_DllExport float fixed_delta_seconds() const;

            /*!
             * @brief This function returns a reference to member fixed_delta_seconds
             * @return Reference to member fixed_delta_seconds
             */
            eProsima_user_DllExport float& fixed_delta_seconds();

            /*!
             * @brief This function sets a value in member substepping
             * @param _substepping New value for member substepping
             */
            eProsima_user_DllExport void substepping(
                    bool _substepping);

            /*!
             * @brief This function returns the value of member substepping
             * @return Value of member substepping
             */
            eProsima_user_DllExport bool substepping() const;

            /*!
             * @brief This function returns a reference to member substepping
             * @return Reference to member substepping
             */
            eProsima_user_DllExport bool& substepping();

            /*!
             * @brief This function sets a value in member max_substep_delta_time
             * @param _max_substep_delta_time New value for member max_substep_delta_time
             */
            eProsima_user_DllExport void max_substep_delta_time(
                    float _max_substep_delta_time);

            /*!
             * @brief This function returns the value of member max_substep_delta_time
             * @return Value of member max_substep_delta_time
             */
            eProsima_user_DllExport float max_substep_delta_time() const;

            /*!
             * @brief This function returns a reference to member max_substep_delta_time
             * @return Reference to member max_substep_delta_time
             */
            eProsima_user_DllExport float& max_substep_delta_time();

            /*!
             * @brief This function sets a value in member max_substeps
             * @param _max_substeps New value for member max_substeps
             */
            eProsima_user_DllExport void max_substeps(
                    int32_t _max_substeps);

            /*!
             * @brief This function returns the value of member max_substeps
             * @return Value of member max_substeps
             */
            eProsima_user_DllExport int32_t max_substeps() const;

            /*!
             * @brief This function returns a reference to member max_substeps
             * @return Reference to member max_substeps
             */
            eProsima_user_DllExport int32_t& max_substeps();

            /*!
             * @brief This function sets a value in member max_culling_distance
             * @param _max_culling_distance New value for member max_culling_distance
             */
            eProsima_user_DllExport void max_culling_distance(
                    float _max_culling_distance);

            /*!
             * @brief This function returns the value of member max_culling_distance
             * @return Value of member max_culling_distance
             */
            eProsima_user_DllExport float max_culling_distance() const;

            /*!
             * @brief This function returns a reference to member max_culling_distance
             * @return Reference to member max_culling_distance
             */
            eProsima_user_DllExport float& max_culling_distance();

            /*!
             * @brief This function sets a value in member deterministic_ragdolls
             * @param _deterministic_ragdolls New value for member deterministic_ragdolls
             */
            eProsima_user_DllExport void deterministic_ragdolls(
                    bool _deterministic_ragdolls);

            /*!
             * @brief This function returns the value of member deterministic_ragdolls
             * @return Value of member deterministic_ragdolls
             */
            eProsima_user_DllExport bool deterministic_ragdolls() const;

            /*!
             * @brief This function returns a reference to member deterministic_ragdolls
             * @return Reference to member deterministic_ragdolls
             */
            eProsima_user_DllExport bool& deterministic_ragdolls();

            /*!
             * @brief This function sets a value in member tile_stream_distance
             * @param _tile_stream_distance New value for member tile_stream_distance
             */
            eProsima_user_DllExport void tile_stream_distance(
                    float _tile_stream_distance);

            /*!
             * @brief This function returns the value of member tile_stream_distance
             * @return Value of member tile_stream_distance
             */
            eProsima_user_DllExport float tile_stream_distance() const;

            /*!
             * @brief This function returns a reference to member tile_stream_distance
             * @return Reference to member tile_stream_distance
             */
            eProsima_user_DllExport float& tile_stream_distance();

            /*!
             * @brief This function sets a value in member actor_active_distance
             * @param _actor_active_distance New value for member actor_active_distance
             */
            eProsima_user_DllExport void actor_active_distance(
                    float _actor_active_distance);

            /*!
             * @brief This function returns the value of member actor_active_distance
             * @return Value of member actor_active_distance
             */
            eProsima_user_DllExport float actor_active_distance() const;

            /*!
             * @brief This function returns a reference to member actor_active_distance
             * @return Reference to member actor_active_distance
             */
            eProsima_user_DllExport float& actor_active_distance();

            /*!
             * @brief This function sets a value in member spectator_as_ego
             * @param _spectator_as_ego New value for member spectator_as_ego
             */
            eProsima_user_DllExport void spectator_as_ego(
                    bool _spectator_as_ego);

            /*!
             * @brief This function returns the value of member spectator_as_ego
             * @return Value of member spectator_as_ego
             */
            eProsima_user_DllExport bool spectator_as_ego() const;

            /*!
             * @brief This function returns a reference to member spectator_as_ego
             * @return Reference to member spectator_as_ego
             */
            eProsima_user_DllExport bool& spectator_as_ego();


            /*!
             * @brief This function returns the maximum serialized size of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(
                    const carla_msgs::msg::CarlaEpisodeSettings& data,
                    size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(
                    eprosima::fastcdr::Cdr& cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(
                    eprosima::fastcdr::Cdr& cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(
                    eprosima::fastcdr::Cdr& cdr) const;

        private:

            bool m_synchronous_mode;
            bool m_no_rendering_mode;
            float m_fixed_delta_seconds;
            bool m_substepping;
            float m_max_substep_delta_time;
            int32_t m_max_substeps;
            float m_max_culling_distance;
            bool m_deterministic_ragdolls;
            float m_tile_stream_distance;
            float m_actor_active_distance;
            bool m_spectator_as_ego;
        };
    } // namespace msg
} // namespace carla_msgs

#endif // _FAST_DDS_GENERATED_CARLA_MSGS_MSG_CARLAEPISODESETTINGS_H_