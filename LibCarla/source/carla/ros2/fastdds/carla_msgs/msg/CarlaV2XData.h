// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file CarlaV2XData.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifndef _FAST_DDS_GENERATED_CARLA_MSGS_MSG_CARLAV2XDATA_H_
#define _FAST_DDS_GENERATED_CARLA_MSGS_MSG_CARLAV2XDATA_H_

#include <array>
#include <bitset>
#include <cstdint>
#include <map>
#include <string>
#include <vector>

#include <fastcdr/cdr/fixed_size_string.hpp>
#include <fastcdr/xcdr/external.hpp>
#include <fastcdr/xcdr/optional.hpp>

#include "etsi_its_cam_msgs/msg/CAM.h"

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec(dllexport)
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(CARLAV2XDATA_SOURCE)
#define CARLAV2XDATA_DllAPI __declspec(dllexport)
#else
#define CARLAV2XDATA_DllAPI __declspec(dllimport)
#endif  // CARLAV2XDATA_SOURCE
#else
#define CARLAV2XDATA_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define CARLAV2XDATA_DllAPI
#endif  // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
class CdrSizeCalculator;
}  // namespace fastcdr
}  // namespace eprosima

namespace carla_msgs {

namespace msg {

/*!
 * @brief This class represents the structure CarlaV2XData defined by the user in the IDL file.
 * @ingroup CarlaV2XData
 */
class CarlaV2XData {
public:
  /*!
   * @brief Default constructor.
   */
  eProsima_user_DllExport CarlaV2XData();

  /*!
   * @brief Default destructor.
   */
  eProsima_user_DllExport ~CarlaV2XData();

  /*!
   * @brief Copy constructor.
   * @param x Reference to the object carla_msgs::msg::CarlaV2XData that will be copied.
   */
  eProsima_user_DllExport CarlaV2XData(const CarlaV2XData& x);

  /*!
   * @brief Move constructor.
   * @param x Reference to the object carla_msgs::msg::CarlaV2XData that will be copied.
   */
  eProsima_user_DllExport CarlaV2XData(CarlaV2XData&& x) noexcept;

  /*!
   * @brief Copy assignment.
   * @param x Reference to the object carla_msgs::msg::CarlaV2XData that will be copied.
   */
  eProsima_user_DllExport CarlaV2XData& operator=(const CarlaV2XData& x);

  /*!
   * @brief Move assignment.
   * @param x Reference to the object carla_msgs::msg::CarlaV2XData that will be copied.
   */
  eProsima_user_DllExport CarlaV2XData& operator=(CarlaV2XData&& x) noexcept;

  /*!
   * @brief Comparison operator.
   * @param x carla_msgs::msg::CarlaV2XData object to compare.
   */
  eProsima_user_DllExport bool operator==(const CarlaV2XData& x) const;

  /*!
   * @brief Comparison operator.
   * @param x carla_msgs::msg::CarlaV2XData object to compare.
   */
  eProsima_user_DllExport bool operator!=(const CarlaV2XData& x) const;

  /*!
   * @brief This function sets a value in member power
   * @param _power New value for member power
   */
  eProsima_user_DllExport void power(float _power);

  /*!
   * @brief This function returns the value of member power
   * @return Value of member power
   */
  eProsima_user_DllExport float power() const;

  /*!
   * @brief This function returns a reference to member power
   * @return Reference to member power
   */
  eProsima_user_DllExport float& power();

  /*!
   * @brief This function copies the value in member message
   * @param _message New value to be copied in member message
   */
  eProsima_user_DllExport void message(const etsi_its_cam_msgs::msg::CAM& _message);

  /*!
   * @brief This function moves the value in member message
   * @param _message New value to be moved in member message
   */
  eProsima_user_DllExport void message(etsi_its_cam_msgs::msg::CAM&& _message);

  /*!
   * @brief This function returns a constant reference to member message
   * @return Constant reference to member message
   */
  eProsima_user_DllExport const etsi_its_cam_msgs::msg::CAM& message() const;

  /*!
   * @brief This function returns a reference to member message
   * @return Reference to member message
   */
  eProsima_user_DllExport etsi_its_cam_msgs::msg::CAM& message();

private:
  float m_power{0.0};
  etsi_its_cam_msgs::msg::CAM m_message;
};

}  // namespace msg

}  // namespace carla_msgs

#endif  // _FAST_DDS_GENERATED_CARLA_MSGS_MSG_CARLAV2XDATA_H_
