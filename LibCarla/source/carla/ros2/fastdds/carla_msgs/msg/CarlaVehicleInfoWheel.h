// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file CarlaVehicleInfoWheel.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifndef _FAST_DDS_GENERATED_CARLA_MSGS_MSG_CARLAVEHICLEINFOWHEEL_H_
#define _FAST_DDS_GENERATED_CARLA_MSGS_MSG_CARLAVEHICLEINFOWHEEL_H_

#include <array>
#include <bitset>
#include <cstdint>
#include <map>
#include <string>
#include <vector>

#include <fastcdr/cdr/fixed_size_string.hpp>
#include <fastcdr/xcdr/external.hpp>
#include <fastcdr/xcdr/optional.hpp>

#include "geometry_msgs/msg/Vector3.h"

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec(dllexport)
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(CARLAVEHICLEINFOWHEEL_SOURCE)
#define CARLAVEHICLEINFOWHEEL_DllAPI __declspec(dllexport)
#else
#define CARLAVEHICLEINFOWHEEL_DllAPI __declspec(dllimport)
#endif  // CARLAVEHICLEINFOWHEEL_SOURCE
#else
#define CARLAVEHICLEINFOWHEEL_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define CARLAVEHICLEINFOWHEEL_DllAPI
#endif  // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
class CdrSizeCalculator;
}  // namespace fastcdr
}  // namespace eprosima

namespace carla_msgs {

namespace msg {

/*!
 * @brief This class represents the structure CarlaVehicleInfoWheel defined by the user in the IDL file.
 * @ingroup CarlaVehicleInfoWheel
 */
class CarlaVehicleInfoWheel {
public:
  /*!
   * @brief Default constructor.
   */
  eProsima_user_DllExport CarlaVehicleInfoWheel();

  /*!
   * @brief Default destructor.
   */
  eProsima_user_DllExport ~CarlaVehicleInfoWheel();

  /*!
   * @brief Copy constructor.
   * @param x Reference to the object carla_msgs::msg::CarlaVehicleInfoWheel that will be copied.
   */
  eProsima_user_DllExport CarlaVehicleInfoWheel(const CarlaVehicleInfoWheel& x);

  /*!
   * @brief Move constructor.
   * @param x Reference to the object carla_msgs::msg::CarlaVehicleInfoWheel that will be copied.
   */
  eProsima_user_DllExport CarlaVehicleInfoWheel(CarlaVehicleInfoWheel&& x) noexcept;

  /*!
   * @brief Copy assignment.
   * @param x Reference to the object carla_msgs::msg::CarlaVehicleInfoWheel that will be copied.
   */
  eProsima_user_DllExport CarlaVehicleInfoWheel& operator=(const CarlaVehicleInfoWheel& x);

  /*!
   * @brief Move assignment.
   * @param x Reference to the object carla_msgs::msg::CarlaVehicleInfoWheel that will be copied.
   */
  eProsima_user_DllExport CarlaVehicleInfoWheel& operator=(CarlaVehicleInfoWheel&& x) noexcept;

  /*!
   * @brief Comparison operator.
   * @param x carla_msgs::msg::CarlaVehicleInfoWheel object to compare.
   */
  eProsima_user_DllExport bool operator==(const CarlaVehicleInfoWheel& x) const;

  /*!
   * @brief Comparison operator.
   * @param x carla_msgs::msg::CarlaVehicleInfoWheel object to compare.
   */
  eProsima_user_DllExport bool operator!=(const CarlaVehicleInfoWheel& x) const;

  /*!
   * @brief This function sets a value in member tire_friction
   * @param _tire_friction New value for member tire_friction
   */
  eProsima_user_DllExport void tire_friction(float _tire_friction);

  /*!
   * @brief This function returns the value of member tire_friction
   * @return Value of member tire_friction
   */
  eProsima_user_DllExport float tire_friction() const;

  /*!
   * @brief This function returns a reference to member tire_friction
   * @return Reference to member tire_friction
   */
  eProsima_user_DllExport float& tire_friction();

  /*!
   * @brief This function sets a value in member damping_rate
   * @param _damping_rate New value for member damping_rate
   */
  eProsima_user_DllExport void damping_rate(float _damping_rate);

  /*!
   * @brief This function returns the value of member damping_rate
   * @return Value of member damping_rate
   */
  eProsima_user_DllExport float damping_rate() const;

  /*!
   * @brief This function returns a reference to member damping_rate
   * @return Reference to member damping_rate
   */
  eProsima_user_DllExport float& damping_rate();

  /*!
   * @brief This function sets a value in member max_steer_angle
   * @param _max_steer_angle New value for member max_steer_angle
   */
  eProsima_user_DllExport void max_steer_angle(float _max_steer_angle);

  /*!
   * @brief This function returns the value of member max_steer_angle
   * @return Value of member max_steer_angle
   */
  eProsima_user_DllExport float max_steer_angle() const;

  /*!
   * @brief This function returns a reference to member max_steer_angle
   * @return Reference to member max_steer_angle
   */
  eProsima_user_DllExport float& max_steer_angle();

  /*!
   * @brief This function sets a value in member radius
   * @param _radius New value for member radius
   */
  eProsima_user_DllExport void radius(float _radius);

  /*!
   * @brief This function returns the value of member radius
   * @return Value of member radius
   */
  eProsima_user_DllExport float radius() const;

  /*!
   * @brief This function returns a reference to member radius
   * @return Reference to member radius
   */
  eProsima_user_DllExport float& radius();

  /*!
   * @brief This function sets a value in member max_brake_torque
   * @param _max_brake_torque New value for member max_brake_torque
   */
  eProsima_user_DllExport void max_brake_torque(float _max_brake_torque);

  /*!
   * @brief This function returns the value of member max_brake_torque
   * @return Value of member max_brake_torque
   */
  eProsima_user_DllExport float max_brake_torque() const;

  /*!
   * @brief This function returns a reference to member max_brake_torque
   * @return Reference to member max_brake_torque
   */
  eProsima_user_DllExport float& max_brake_torque();

  /*!
   * @brief This function sets a value in member max_handbrake_torque
   * @param _max_handbrake_torque New value for member max_handbrake_torque
   */
  eProsima_user_DllExport void max_handbrake_torque(float _max_handbrake_torque);

  /*!
   * @brief This function returns the value of member max_handbrake_torque
   * @return Value of member max_handbrake_torque
   */
  eProsima_user_DllExport float max_handbrake_torque() const;

  /*!
   * @brief This function returns a reference to member max_handbrake_torque
   * @return Reference to member max_handbrake_torque
   */
  eProsima_user_DllExport float& max_handbrake_torque();

  /*!
   * @brief This function copies the value in member position
   * @param _position New value to be copied in member position
   */
  eProsima_user_DllExport void position(const geometry_msgs::msg::Vector3& _position);

  /*!
   * @brief This function moves the value in member position
   * @param _position New value to be moved in member position
   */
  eProsima_user_DllExport void position(geometry_msgs::msg::Vector3&& _position);

  /*!
   * @brief This function returns a constant reference to member position
   * @return Constant reference to member position
   */
  eProsima_user_DllExport const geometry_msgs::msg::Vector3& position() const;

  /*!
   * @brief This function returns a reference to member position
   * @return Reference to member position
   */
  eProsima_user_DllExport geometry_msgs::msg::Vector3& position();

private:
  float m_tire_friction{0.0};
  float m_damping_rate{0.0};
  float m_max_steer_angle{0.0};
  float m_radius{0.0};
  float m_max_brake_torque{0.0};
  float m_max_handbrake_torque{0.0};
  geometry_msgs::msg::Vector3 m_position;
};

}  // namespace msg

}  // namespace carla_msgs

#endif  // _FAST_DDS_GENERATED_CARLA_MSGS_MSG_CARLAVEHICLEINFOWHEEL_H_
