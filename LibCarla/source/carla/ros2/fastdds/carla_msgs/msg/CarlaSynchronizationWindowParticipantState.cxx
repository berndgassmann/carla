// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file CarlaSynchronizationWindowParticipantState.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "CarlaSynchronizationWindowParticipantState.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

carla_msgs::msg::CarlaSynchronizationWindowParticipantState::CarlaSynchronizationWindowParticipantState()
{
    // m_client_id com.eprosima.idl.parser.typecode.StringTypeCode@506ae4d4
    m_client_id ="";
    // m_participant_id com.eprosima.idl.parser.typecode.PrimitiveTypeCode@7d4f9aae
    m_participant_id = 0;
    // m_target_game_time com.eprosima.idl.parser.typecode.PrimitiveTypeCode@72e5a8e
    m_target_game_time = 0.0;

}

carla_msgs::msg::CarlaSynchronizationWindowParticipantState::~CarlaSynchronizationWindowParticipantState()
{


}

carla_msgs::msg::CarlaSynchronizationWindowParticipantState::CarlaSynchronizationWindowParticipantState(
        const CarlaSynchronizationWindowParticipantState& x)
{
    m_client_id = x.m_client_id;
    m_participant_id = x.m_participant_id;
    m_target_game_time = x.m_target_game_time;
}

carla_msgs::msg::CarlaSynchronizationWindowParticipantState::CarlaSynchronizationWindowParticipantState(
        CarlaSynchronizationWindowParticipantState&& x)
{
    m_client_id = std::move(x.m_client_id);
    m_participant_id = x.m_participant_id;
    m_target_game_time = x.m_target_game_time;
}

carla_msgs::msg::CarlaSynchronizationWindowParticipantState& carla_msgs::msg::CarlaSynchronizationWindowParticipantState::operator =(
        const CarlaSynchronizationWindowParticipantState& x)
{

    m_client_id = x.m_client_id;
    m_participant_id = x.m_participant_id;
    m_target_game_time = x.m_target_game_time;

    return *this;
}

carla_msgs::msg::CarlaSynchronizationWindowParticipantState& carla_msgs::msg::CarlaSynchronizationWindowParticipantState::operator =(
        CarlaSynchronizationWindowParticipantState&& x)
{

    m_client_id = std::move(x.m_client_id);
    m_participant_id = x.m_participant_id;
    m_target_game_time = x.m_target_game_time;

    return *this;
}

bool carla_msgs::msg::CarlaSynchronizationWindowParticipantState::operator ==(
        const CarlaSynchronizationWindowParticipantState& x) const
{

    return (m_client_id == x.m_client_id && m_participant_id == x.m_participant_id && m_target_game_time == x.m_target_game_time);
}

bool carla_msgs::msg::CarlaSynchronizationWindowParticipantState::operator !=(
        const CarlaSynchronizationWindowParticipantState& x) const
{
    return !(*this == x);
}

size_t carla_msgs::msg::CarlaSynchronizationWindowParticipantState::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);



    return current_alignment - initial_alignment;
}

size_t carla_msgs::msg::CarlaSynchronizationWindowParticipantState::getCdrSerializedSize(
        const carla_msgs::msg::CarlaSynchronizationWindowParticipantState& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.client_id().size() + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);



    return current_alignment - initial_alignment;
}

void carla_msgs::msg::CarlaSynchronizationWindowParticipantState::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_client_id;
    scdr << m_participant_id;
    scdr << m_target_game_time;

}

void carla_msgs::msg::CarlaSynchronizationWindowParticipantState::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_client_id;
    dcdr >> m_participant_id;
    dcdr >> m_target_game_time;
}

/*!
 * @brief This function copies the value in member client_id
 * @param _client_id New value to be copied in member client_id
 */
void carla_msgs::msg::CarlaSynchronizationWindowParticipantState::client_id(
        const std::string& _client_id)
{
    m_client_id = _client_id;
}

/*!
 * @brief This function moves the value in member client_id
 * @param _client_id New value to be moved in member client_id
 */
void carla_msgs::msg::CarlaSynchronizationWindowParticipantState::client_id(
        std::string&& _client_id)
{
    m_client_id = std::move(_client_id);
}

/*!
 * @brief This function returns a constant reference to member client_id
 * @return Constant reference to member client_id
 */
const std::string& carla_msgs::msg::CarlaSynchronizationWindowParticipantState::client_id() const
{
    return m_client_id;
}

/*!
 * @brief This function returns a reference to member client_id
 * @return Reference to member client_id
 */
std::string& carla_msgs::msg::CarlaSynchronizationWindowParticipantState::client_id()
{
    return m_client_id;
}
/*!
 * @brief This function sets a value in member participant_id
 * @param _participant_id New value for member participant_id
 */
void carla_msgs::msg::CarlaSynchronizationWindowParticipantState::participant_id(
        uint32_t _participant_id)
{
    m_participant_id = _participant_id;
}

/*!
 * @brief This function returns the value of member participant_id
 * @return Value of member participant_id
 */
uint32_t carla_msgs::msg::CarlaSynchronizationWindowParticipantState::participant_id() const
{
    return m_participant_id;
}

/*!
 * @brief This function returns a reference to member participant_id
 * @return Reference to member participant_id
 */
uint32_t& carla_msgs::msg::CarlaSynchronizationWindowParticipantState::participant_id()
{
    return m_participant_id;
}

/*!
 * @brief This function sets a value in member target_game_time
 * @param _target_game_time New value for member target_game_time
 */
void carla_msgs::msg::CarlaSynchronizationWindowParticipantState::target_game_time(
        double _target_game_time)
{
    m_target_game_time = _target_game_time;
}

/*!
 * @brief This function returns the value of member target_game_time
 * @return Value of member target_game_time
 */
double carla_msgs::msg::CarlaSynchronizationWindowParticipantState::target_game_time() const
{
    return m_target_game_time;
}

/*!
 * @brief This function returns a reference to member target_game_time
 * @return Reference to member target_game_time
 */
double& carla_msgs::msg::CarlaSynchronizationWindowParticipantState::target_game_time()
{
    return m_target_game_time;
}


size_t carla_msgs::msg::CarlaSynchronizationWindowParticipantState::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;



    return current_align;
}

bool carla_msgs::msg::CarlaSynchronizationWindowParticipantState::isKeyDefined()
{
    return false;
}

void carla_msgs::msg::CarlaSynchronizationWindowParticipantState::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
       
}


