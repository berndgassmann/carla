// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file CarlaV2XByteArray.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "CarlaV2XByteArray.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>


carla_msgs::msg::CarlaV2XByteArray::CarlaV2XByteArray()
{
    // m_data_size com.eprosima.idl.parser.typecode.PrimitiveTypeCode@1a75e76a
    m_data_size = 0;
    // m_bytes com.eprosima.idl.parser.typecode.AliasTypeCode@5524cca1
    memset(&m_bytes, 0, (100) * 1);

}

carla_msgs::msg::CarlaV2XByteArray::~CarlaV2XByteArray()
{

}

carla_msgs::msg::CarlaV2XByteArray::CarlaV2XByteArray(
        const CarlaV2XByteArray& x)
{
    m_data_size = x.m_data_size;
    m_bytes = x.m_bytes;
}

carla_msgs::msg::CarlaV2XByteArray::CarlaV2XByteArray(
        CarlaV2XByteArray&& x)
{
    m_data_size = x.m_data_size;
    m_bytes = std::move(x.m_bytes);
}

carla_msgs::msg::CarlaV2XByteArray& carla_msgs::msg::CarlaV2XByteArray::operator =(
        const CarlaV2XByteArray& x)
{

    m_data_size = x.m_data_size;
    m_bytes = x.m_bytes;

    return *this;
}

carla_msgs::msg::CarlaV2XByteArray& carla_msgs::msg::CarlaV2XByteArray::operator =(
        CarlaV2XByteArray&& x)
{

    m_data_size = x.m_data_size;
    m_bytes = std::move(x.m_bytes);

    return *this;
}

bool carla_msgs::msg::CarlaV2XByteArray::operator ==(
        const CarlaV2XByteArray& x) const
{

    return (m_data_size == x.m_data_size && m_bytes == x.m_bytes);
}

bool carla_msgs::msg::CarlaV2XByteArray::operator !=(
        const CarlaV2XByteArray& x) const
{
    return !(*this == x);
}

size_t carla_msgs::msg::CarlaV2XByteArray::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += ((100) * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}

size_t carla_msgs::msg::CarlaV2XByteArray::getCdrSerializedSize(
        const carla_msgs::msg::CarlaV2XByteArray& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    if ((100) > 0)
    {
        current_alignment += ((100) * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);
    }


    return current_alignment - initial_alignment;
}

void carla_msgs::msg::CarlaV2XByteArray::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_data_size;
    scdr << m_bytes;


}

void carla_msgs::msg::CarlaV2XByteArray::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_data_size;
    dcdr >> m_bytes;

}

/*!
 * @brief This function sets a value in member data_size
 * @param _data_size New value for member data_size
 */
void carla_msgs::msg::CarlaV2XByteArray::data_size(
        uint8_t _data_size)
{
    m_data_size = _data_size;
}

/*!
 * @brief This function returns the value of member data_size
 * @return Value of member data_size
 */
uint8_t carla_msgs::msg::CarlaV2XByteArray::data_size() const
{
    return m_data_size;
}

/*!
 * @brief This function returns a reference to member data_size
 * @return Reference to member data_size
 */
uint8_t& carla_msgs::msg::CarlaV2XByteArray::data_size()
{
    return m_data_size;
}

/*!
 * @brief This function copies the value in member bytes
 * @param _bytes New value to be copied in member bytes
 */
void carla_msgs::msg::CarlaV2XByteArray::bytes(
        const carla_msgs::msg::octet__100& _bytes)
{
    m_bytes = _bytes;
}

/*!
 * @brief This function moves the value in member bytes
 * @param _bytes New value to be moved in member bytes
 */
void carla_msgs::msg::CarlaV2XByteArray::bytes(
        carla_msgs::msg::octet__100&& _bytes)
{
    m_bytes = std::move(_bytes);
}

/*!
 * @brief This function returns a constant reference to member bytes
 * @return Constant reference to member bytes
 */
const carla_msgs::msg::octet__100& carla_msgs::msg::CarlaV2XByteArray::bytes() const
{
    return m_bytes;
}

/*!
 * @brief This function returns a reference to member bytes
 * @return Reference to member bytes
 */
carla_msgs::msg::octet__100& carla_msgs::msg::CarlaV2XByteArray::bytes()
{
    return m_bytes;
}

size_t carla_msgs::msg::CarlaV2XByteArray::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;



    return current_align;
}

bool carla_msgs::msg::CarlaV2XByteArray::isKeyDefined()
{
    return false;
}

void carla_msgs::msg::CarlaV2XByteArray::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
      
}


