// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file CarlaV2XByteArray.cpp
 * This source file contains the implementation of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "CarlaV2XByteArray.h"

#include <fastcdr/Cdr.h>


#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>


namespace carla_msgs {

namespace msg {



CarlaV2XByteArray::CarlaV2XByteArray()
{
}

CarlaV2XByteArray::~CarlaV2XByteArray()
{
}

CarlaV2XByteArray::CarlaV2XByteArray(
        const CarlaV2XByteArray& x)
{
    m_data_size = x.m_data_size;
    m_bytes = x.m_bytes;
}

CarlaV2XByteArray::CarlaV2XByteArray(
        CarlaV2XByteArray&& x) noexcept
{
    m_data_size = x.m_data_size;
    m_bytes = std::move(x.m_bytes);
}

CarlaV2XByteArray& CarlaV2XByteArray::operator =(
        const CarlaV2XByteArray& x)
{

    m_data_size = x.m_data_size;
    m_bytes = x.m_bytes;
    return *this;
}

CarlaV2XByteArray& CarlaV2XByteArray::operator =(
        CarlaV2XByteArray&& x) noexcept
{

    m_data_size = x.m_data_size;
    m_bytes = std::move(x.m_bytes);
    return *this;
}

bool CarlaV2XByteArray::operator ==(
        const CarlaV2XByteArray& x) const
{
    return (m_data_size == x.m_data_size &&
           m_bytes == x.m_bytes);
}

bool CarlaV2XByteArray::operator !=(
        const CarlaV2XByteArray& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function sets a value in member data_size
 * @param _data_size New value for member data_size
 */
void CarlaV2XByteArray::data_size(
        uint8_t _data_size)
{
    m_data_size = _data_size;
}

/*!
 * @brief This function returns the value of member data_size
 * @return Value of member data_size
 */
uint8_t CarlaV2XByteArray::data_size() const
{
    return m_data_size;
}

/*!
 * @brief This function returns a reference to member data_size
 * @return Reference to member data_size
 */
uint8_t& CarlaV2XByteArray::data_size()
{
    return m_data_size;
}


/*!
 * @brief This function copies the value in member bytes
 * @param _bytes New value to be copied in member bytes
 */
void CarlaV2XByteArray::bytes(
        const carla_msgs::msg::octet__100& _bytes)
{
    m_bytes = _bytes;
}

/*!
 * @brief This function moves the value in member bytes
 * @param _bytes New value to be moved in member bytes
 */
void CarlaV2XByteArray::bytes(
        carla_msgs::msg::octet__100&& _bytes)
{
    m_bytes = std::move(_bytes);
}

/*!
 * @brief This function returns a constant reference to member bytes
 * @return Constant reference to member bytes
 */
const carla_msgs::msg::octet__100& CarlaV2XByteArray::bytes() const
{
    return m_bytes;
}

/*!
 * @brief This function returns a reference to member bytes
 * @return Reference to member bytes
 */
carla_msgs::msg::octet__100& CarlaV2XByteArray::bytes()
{
    return m_bytes;
}




} // namespace msg


} // namespace carla_msgs
// Include auxiliary functions like for serializing/deserializing.
#include "CarlaV2XByteArrayCdrAux.ipp"

