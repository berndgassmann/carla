// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file CarlaV2XCustom.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "CarlaV2XCustom.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

carla_msgs::msg::CarlaV2XCustom::CarlaV2XCustom()
{
    // m_header com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@5fdcaa40

    // m_message com.eprosima.idl.parser.typecode.StringTypeCode@6dc17b83
    m_message ="";

}

carla_msgs::msg::CarlaV2XCustom::~CarlaV2XCustom()
{

}

carla_msgs::msg::CarlaV2XCustom::CarlaV2XCustom(
        const CarlaV2XCustom& x)
{
    m_header = x.m_header;
    m_message = x.m_message;
}

carla_msgs::msg::CarlaV2XCustom::CarlaV2XCustom(
        CarlaV2XCustom&& x)
{
    m_header = std::move(x.m_header);
    m_message = std::move(x.m_message);
}

carla_msgs::msg::CarlaV2XCustom& carla_msgs::msg::CarlaV2XCustom::operator =(
        const CarlaV2XCustom& x)
{

    m_header = x.m_header;
    m_message = x.m_message;

    return *this;
}

carla_msgs::msg::CarlaV2XCustom& carla_msgs::msg::CarlaV2XCustom::operator =(
        CarlaV2XCustom&& x)
{

    m_header = std::move(x.m_header);
    m_message = std::move(x.m_message);

    return *this;
}

bool carla_msgs::msg::CarlaV2XCustom::operator ==(
        const CarlaV2XCustom& x) const
{

    return (m_header == x.m_header && m_message == x.m_message);
}

bool carla_msgs::msg::CarlaV2XCustom::operator !=(
        const CarlaV2XCustom& x) const
{
    return !(*this == x);
}

size_t carla_msgs::msg::CarlaV2XCustom::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += etsi_its_cam_msgs::msg::ItsPduHeader::getMaxCdrSerializedSize(current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;


    return current_alignment - initial_alignment;
}

size_t carla_msgs::msg::CarlaV2XCustom::getCdrSerializedSize(
        const carla_msgs::msg::CarlaV2XCustom& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += etsi_its_cam_msgs::msg::ItsPduHeader::getCdrSerializedSize(data.header(), current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.message().size() + 1;


    return current_alignment - initial_alignment;
}

void carla_msgs::msg::CarlaV2XCustom::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_header;
    scdr << m_message;

}

void carla_msgs::msg::CarlaV2XCustom::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_header;
    dcdr >> m_message;
}

/*!
 * @brief This function copies the value in member header
 * @param _header New value to be copied in member header
 */
void carla_msgs::msg::CarlaV2XCustom::header(
        const etsi_its_cam_msgs::msg::ItsPduHeader& _header)
{
    m_header = _header;
}

/*!
 * @brief This function moves the value in member header
 * @param _header New value to be moved in member header
 */
void carla_msgs::msg::CarlaV2XCustom::header(
        etsi_its_cam_msgs::msg::ItsPduHeader&& _header)
{
    m_header = std::move(_header);
}

/*!
 * @brief This function returns a constant reference to member header
 * @return Constant reference to member header
 */
const etsi_its_cam_msgs::msg::ItsPduHeader& carla_msgs::msg::CarlaV2XCustom::header() const
{
    return m_header;
}

/*!
 * @brief This function returns a reference to member header
 * @return Reference to member header
 */
etsi_its_cam_msgs::msg::ItsPduHeader& carla_msgs::msg::CarlaV2XCustom::header()
{
    return m_header;
}
/*!
 * @brief This function copies the value in member message
 * @param _message New value to be copied in member message
 */
void carla_msgs::msg::CarlaV2XCustom::message(
        const std::string& _message)
{
    m_message = _message;
}

/*!
 * @brief This function moves the value in member message
 * @param _message New value to be moved in member message
 */
void carla_msgs::msg::CarlaV2XCustom::message(
        std::string&& _message)
{
    m_message = std::move(_message);
}

/*!
 * @brief This function returns a constant reference to member message
 * @return Constant reference to member message
 */
const std::string& carla_msgs::msg::CarlaV2XCustom::message() const
{
    return m_message;
}

/*!
 * @brief This function returns a reference to member message
 * @return Reference to member message
 */
std::string& carla_msgs::msg::CarlaV2XCustom::message()
{
    return m_message;
}

size_t carla_msgs::msg::CarlaV2XCustom::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;



    return current_align;
}

bool carla_msgs::msg::CarlaV2XCustom::isKeyDefined()
{
    return false;
}

void carla_msgs::msg::CarlaV2XCustom::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
      
}


