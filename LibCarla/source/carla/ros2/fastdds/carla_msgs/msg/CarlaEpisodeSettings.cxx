// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file CarlaEpisodeSettings.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "CarlaEpisodeSettings.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

carla_msgs::msg::CarlaEpisodeSettings::CarlaEpisodeSettings()
{
    // m_synchronous_mode com.eprosima.idl.parser.typecode.PrimitiveTypeCode@2df3b89c
    m_synchronous_mode = false;
    // m_no_rendering_mode com.eprosima.idl.parser.typecode.PrimitiveTypeCode@23348b5d
    m_no_rendering_mode = false;
    // m_fixed_delta_seconds com.eprosima.idl.parser.typecode.PrimitiveTypeCode@70325e14
    m_fixed_delta_seconds = 0.0;
    // m_substepping com.eprosima.idl.parser.typecode.PrimitiveTypeCode@37ceb1df
    m_substepping = true;
    // m_max_substep_delta_time com.eprosima.idl.parser.typecode.PrimitiveTypeCode@7c9d8e2
    m_max_substep_delta_time = 0.01;
    // m_max_substeps com.eprosima.idl.parser.typecode.PrimitiveTypeCode@20d525
    m_max_substeps = 10;
    // m_max_culling_distance com.eprosima.idl.parser.typecode.PrimitiveTypeCode@6200f9cb
    m_max_culling_distance = 0.0;
    // m_deterministic_ragdolls com.eprosima.idl.parser.typecode.PrimitiveTypeCode@2002fc1d
    m_deterministic_ragdolls = false;
    // m_tile_stream_distance com.eprosima.idl.parser.typecode.PrimitiveTypeCode@ae13544
    m_tile_stream_distance = 3000.0;
    // m_actor_active_distance com.eprosima.idl.parser.typecode.PrimitiveTypeCode@3d34d211
    m_actor_active_distance = 2000.0;
    // m_spectator_as_ego com.eprosima.idl.parser.typecode.PrimitiveTypeCode@7dc0f706
    m_spectator_as_ego = true;

}

carla_msgs::msg::CarlaEpisodeSettings::~CarlaEpisodeSettings()
{










}

carla_msgs::msg::CarlaEpisodeSettings::CarlaEpisodeSettings(
        const CarlaEpisodeSettings& x)
{
    m_synchronous_mode = x.m_synchronous_mode;
    m_no_rendering_mode = x.m_no_rendering_mode;
    m_fixed_delta_seconds = x.m_fixed_delta_seconds;
    m_substepping = x.m_substepping;
    m_max_substep_delta_time = x.m_max_substep_delta_time;
    m_max_substeps = x.m_max_substeps;
    m_max_culling_distance = x.m_max_culling_distance;
    m_deterministic_ragdolls = x.m_deterministic_ragdolls;
    m_tile_stream_distance = x.m_tile_stream_distance;
    m_actor_active_distance = x.m_actor_active_distance;
    m_spectator_as_ego = x.m_spectator_as_ego;
}

carla_msgs::msg::CarlaEpisodeSettings::CarlaEpisodeSettings(
        CarlaEpisodeSettings&& x)
{
    m_synchronous_mode = x.m_synchronous_mode;
    m_no_rendering_mode = x.m_no_rendering_mode;
    m_fixed_delta_seconds = x.m_fixed_delta_seconds;
    m_substepping = x.m_substepping;
    m_max_substep_delta_time = x.m_max_substep_delta_time;
    m_max_substeps = x.m_max_substeps;
    m_max_culling_distance = x.m_max_culling_distance;
    m_deterministic_ragdolls = x.m_deterministic_ragdolls;
    m_tile_stream_distance = x.m_tile_stream_distance;
    m_actor_active_distance = x.m_actor_active_distance;
    m_spectator_as_ego = x.m_spectator_as_ego;
}

carla_msgs::msg::CarlaEpisodeSettings& carla_msgs::msg::CarlaEpisodeSettings::operator =(
        const CarlaEpisodeSettings& x)
{

    m_synchronous_mode = x.m_synchronous_mode;
    m_no_rendering_mode = x.m_no_rendering_mode;
    m_fixed_delta_seconds = x.m_fixed_delta_seconds;
    m_substepping = x.m_substepping;
    m_max_substep_delta_time = x.m_max_substep_delta_time;
    m_max_substeps = x.m_max_substeps;
    m_max_culling_distance = x.m_max_culling_distance;
    m_deterministic_ragdolls = x.m_deterministic_ragdolls;
    m_tile_stream_distance = x.m_tile_stream_distance;
    m_actor_active_distance = x.m_actor_active_distance;
    m_spectator_as_ego = x.m_spectator_as_ego;

    return *this;
}

carla_msgs::msg::CarlaEpisodeSettings& carla_msgs::msg::CarlaEpisodeSettings::operator =(
        CarlaEpisodeSettings&& x)
{

    m_synchronous_mode = x.m_synchronous_mode;
    m_no_rendering_mode = x.m_no_rendering_mode;
    m_fixed_delta_seconds = x.m_fixed_delta_seconds;
    m_substepping = x.m_substepping;
    m_max_substep_delta_time = x.m_max_substep_delta_time;
    m_max_substeps = x.m_max_substeps;
    m_max_culling_distance = x.m_max_culling_distance;
    m_deterministic_ragdolls = x.m_deterministic_ragdolls;
    m_tile_stream_distance = x.m_tile_stream_distance;
    m_actor_active_distance = x.m_actor_active_distance;
    m_spectator_as_ego = x.m_spectator_as_ego;

    return *this;
}

bool carla_msgs::msg::CarlaEpisodeSettings::operator ==(
        const CarlaEpisodeSettings& x) const
{

    return (m_synchronous_mode == x.m_synchronous_mode && m_no_rendering_mode == x.m_no_rendering_mode && m_fixed_delta_seconds == x.m_fixed_delta_seconds && m_substepping == x.m_substepping && m_max_substep_delta_time == x.m_max_substep_delta_time && m_max_substeps == x.m_max_substeps && m_max_culling_distance == x.m_max_culling_distance && m_deterministic_ragdolls == x.m_deterministic_ragdolls && m_tile_stream_distance == x.m_tile_stream_distance && m_actor_active_distance == x.m_actor_active_distance && m_spectator_as_ego == x.m_spectator_as_ego);
}

bool carla_msgs::msg::CarlaEpisodeSettings::operator !=(
        const CarlaEpisodeSettings& x) const
{
    return !(*this == x);
}

size_t carla_msgs::msg::CarlaEpisodeSettings::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}

size_t carla_msgs::msg::CarlaEpisodeSettings::getCdrSerializedSize(
        const carla_msgs::msg::CarlaEpisodeSettings& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}

void carla_msgs::msg::CarlaEpisodeSettings::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_synchronous_mode;
    scdr << m_no_rendering_mode;
    scdr << m_fixed_delta_seconds;
    scdr << m_substepping;
    scdr << m_max_substep_delta_time;
    scdr << m_max_substeps;
    scdr << m_max_culling_distance;
    scdr << m_deterministic_ragdolls;
    scdr << m_tile_stream_distance;
    scdr << m_actor_active_distance;
    scdr << m_spectator_as_ego;

}

void carla_msgs::msg::CarlaEpisodeSettings::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_synchronous_mode;
    dcdr >> m_no_rendering_mode;
    dcdr >> m_fixed_delta_seconds;
    dcdr >> m_substepping;
    dcdr >> m_max_substep_delta_time;
    dcdr >> m_max_substeps;
    dcdr >> m_max_culling_distance;
    dcdr >> m_deterministic_ragdolls;
    dcdr >> m_tile_stream_distance;
    dcdr >> m_actor_active_distance;
    dcdr >> m_spectator_as_ego;
}

/*!
 * @brief This function sets a value in member synchronous_mode
 * @param _synchronous_mode New value for member synchronous_mode
 */
void carla_msgs::msg::CarlaEpisodeSettings::synchronous_mode(
        bool _synchronous_mode)
{
    m_synchronous_mode = _synchronous_mode;
}

/*!
 * @brief This function returns the value of member synchronous_mode
 * @return Value of member synchronous_mode
 */
bool carla_msgs::msg::CarlaEpisodeSettings::synchronous_mode() const
{
    return m_synchronous_mode;
}

/*!
 * @brief This function returns a reference to member synchronous_mode
 * @return Reference to member synchronous_mode
 */
bool& carla_msgs::msg::CarlaEpisodeSettings::synchronous_mode()
{
    return m_synchronous_mode;
}

/*!
 * @brief This function sets a value in member no_rendering_mode
 * @param _no_rendering_mode New value for member no_rendering_mode
 */
void carla_msgs::msg::CarlaEpisodeSettings::no_rendering_mode(
        bool _no_rendering_mode)
{
    m_no_rendering_mode = _no_rendering_mode;
}

/*!
 * @brief This function returns the value of member no_rendering_mode
 * @return Value of member no_rendering_mode
 */
bool carla_msgs::msg::CarlaEpisodeSettings::no_rendering_mode() const
{
    return m_no_rendering_mode;
}

/*!
 * @brief This function returns a reference to member no_rendering_mode
 * @return Reference to member no_rendering_mode
 */
bool& carla_msgs::msg::CarlaEpisodeSettings::no_rendering_mode()
{
    return m_no_rendering_mode;
}

/*!
 * @brief This function sets a value in member fixed_delta_seconds
 * @param _fixed_delta_seconds New value for member fixed_delta_seconds
 */
void carla_msgs::msg::CarlaEpisodeSettings::fixed_delta_seconds(
        float _fixed_delta_seconds)
{
    m_fixed_delta_seconds = _fixed_delta_seconds;
}

/*!
 * @brief This function returns the value of member fixed_delta_seconds
 * @return Value of member fixed_delta_seconds
 */
float carla_msgs::msg::CarlaEpisodeSettings::fixed_delta_seconds() const
{
    return m_fixed_delta_seconds;
}

/*!
 * @brief This function returns a reference to member fixed_delta_seconds
 * @return Reference to member fixed_delta_seconds
 */
float& carla_msgs::msg::CarlaEpisodeSettings::fixed_delta_seconds()
{
    return m_fixed_delta_seconds;
}

/*!
 * @brief This function sets a value in member substepping
 * @param _substepping New value for member substepping
 */
void carla_msgs::msg::CarlaEpisodeSettings::substepping(
        bool _substepping)
{
    m_substepping = _substepping;
}

/*!
 * @brief This function returns the value of member substepping
 * @return Value of member substepping
 */
bool carla_msgs::msg::CarlaEpisodeSettings::substepping() const
{
    return m_substepping;
}

/*!
 * @brief This function returns a reference to member substepping
 * @return Reference to member substepping
 */
bool& carla_msgs::msg::CarlaEpisodeSettings::substepping()
{
    return m_substepping;
}

/*!
 * @brief This function sets a value in member max_substep_delta_time
 * @param _max_substep_delta_time New value for member max_substep_delta_time
 */
void carla_msgs::msg::CarlaEpisodeSettings::max_substep_delta_time(
        float _max_substep_delta_time)
{
    m_max_substep_delta_time = _max_substep_delta_time;
}

/*!
 * @brief This function returns the value of member max_substep_delta_time
 * @return Value of member max_substep_delta_time
 */
float carla_msgs::msg::CarlaEpisodeSettings::max_substep_delta_time() const
{
    return m_max_substep_delta_time;
}

/*!
 * @brief This function returns a reference to member max_substep_delta_time
 * @return Reference to member max_substep_delta_time
 */
float& carla_msgs::msg::CarlaEpisodeSettings::max_substep_delta_time()
{
    return m_max_substep_delta_time;
}

/*!
 * @brief This function sets a value in member max_substeps
 * @param _max_substeps New value for member max_substeps
 */
void carla_msgs::msg::CarlaEpisodeSettings::max_substeps(
        int32_t _max_substeps)
{
    m_max_substeps = _max_substeps;
}

/*!
 * @brief This function returns the value of member max_substeps
 * @return Value of member max_substeps
 */
int32_t carla_msgs::msg::CarlaEpisodeSettings::max_substeps() const
{
    return m_max_substeps;
}

/*!
 * @brief This function returns a reference to member max_substeps
 * @return Reference to member max_substeps
 */
int32_t& carla_msgs::msg::CarlaEpisodeSettings::max_substeps()
{
    return m_max_substeps;
}

/*!
 * @brief This function sets a value in member max_culling_distance
 * @param _max_culling_distance New value for member max_culling_distance
 */
void carla_msgs::msg::CarlaEpisodeSettings::max_culling_distance(
        float _max_culling_distance)
{
    m_max_culling_distance = _max_culling_distance;
}

/*!
 * @brief This function returns the value of member max_culling_distance
 * @return Value of member max_culling_distance
 */
float carla_msgs::msg::CarlaEpisodeSettings::max_culling_distance() const
{
    return m_max_culling_distance;
}

/*!
 * @brief This function returns a reference to member max_culling_distance
 * @return Reference to member max_culling_distance
 */
float& carla_msgs::msg::CarlaEpisodeSettings::max_culling_distance()
{
    return m_max_culling_distance;
}

/*!
 * @brief This function sets a value in member deterministic_ragdolls
 * @param _deterministic_ragdolls New value for member deterministic_ragdolls
 */
void carla_msgs::msg::CarlaEpisodeSettings::deterministic_ragdolls(
        bool _deterministic_ragdolls)
{
    m_deterministic_ragdolls = _deterministic_ragdolls;
}

/*!
 * @brief This function returns the value of member deterministic_ragdolls
 * @return Value of member deterministic_ragdolls
 */
bool carla_msgs::msg::CarlaEpisodeSettings::deterministic_ragdolls() const
{
    return m_deterministic_ragdolls;
}

/*!
 * @brief This function returns a reference to member deterministic_ragdolls
 * @return Reference to member deterministic_ragdolls
 */
bool& carla_msgs::msg::CarlaEpisodeSettings::deterministic_ragdolls()
{
    return m_deterministic_ragdolls;
}

/*!
 * @brief This function sets a value in member tile_stream_distance
 * @param _tile_stream_distance New value for member tile_stream_distance
 */
void carla_msgs::msg::CarlaEpisodeSettings::tile_stream_distance(
        float _tile_stream_distance)
{
    m_tile_stream_distance = _tile_stream_distance;
}

/*!
 * @brief This function returns the value of member tile_stream_distance
 * @return Value of member tile_stream_distance
 */
float carla_msgs::msg::CarlaEpisodeSettings::tile_stream_distance() const
{
    return m_tile_stream_distance;
}

/*!
 * @brief This function returns a reference to member tile_stream_distance
 * @return Reference to member tile_stream_distance
 */
float& carla_msgs::msg::CarlaEpisodeSettings::tile_stream_distance()
{
    return m_tile_stream_distance;
}

/*!
 * @brief This function sets a value in member actor_active_distance
 * @param _actor_active_distance New value for member actor_active_distance
 */
void carla_msgs::msg::CarlaEpisodeSettings::actor_active_distance(
        float _actor_active_distance)
{
    m_actor_active_distance = _actor_active_distance;
}

/*!
 * @brief This function returns the value of member actor_active_distance
 * @return Value of member actor_active_distance
 */
float carla_msgs::msg::CarlaEpisodeSettings::actor_active_distance() const
{
    return m_actor_active_distance;
}

/*!
 * @brief This function returns a reference to member actor_active_distance
 * @return Reference to member actor_active_distance
 */
float& carla_msgs::msg::CarlaEpisodeSettings::actor_active_distance()
{
    return m_actor_active_distance;
}

/*!
 * @brief This function sets a value in member spectator_as_ego
 * @param _spectator_as_ego New value for member spectator_as_ego
 */
void carla_msgs::msg::CarlaEpisodeSettings::spectator_as_ego(
        bool _spectator_as_ego)
{
    m_spectator_as_ego = _spectator_as_ego;
}

/*!
 * @brief This function returns the value of member spectator_as_ego
 * @return Value of member spectator_as_ego
 */
bool carla_msgs::msg::CarlaEpisodeSettings::spectator_as_ego() const
{
    return m_spectator_as_ego;
}

/*!
 * @brief This function returns a reference to member spectator_as_ego
 * @return Reference to member spectator_as_ego
 */
bool& carla_msgs::msg::CarlaEpisodeSettings::spectator_as_ego()
{
    return m_spectator_as_ego;
}


size_t carla_msgs::msg::CarlaEpisodeSettings::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;



    return current_align;
}

bool carla_msgs::msg::CarlaEpisodeSettings::isKeyDefined()
{
    return false;
}

void carla_msgs::msg::CarlaEpisodeSettings::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
               
}


