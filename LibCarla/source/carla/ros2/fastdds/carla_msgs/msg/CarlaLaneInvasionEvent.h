// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file CarlaLaneInvasionEvent.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifndef _FAST_DDS_GENERATED_CARLA_MSGS_MSG_CARLALANEINVASIONEVENT_H_
#define _FAST_DDS_GENERATED_CARLA_MSGS_MSG_CARLALANEINVASIONEVENT_H_

#include <array>
#include <bitset>
#include <cstdint>
#include <map>
#include <string>
#include <vector>

#include <fastcdr/cdr/fixed_size_string.hpp>
#include <fastcdr/xcdr/external.hpp>
#include <fastcdr/xcdr/optional.hpp>

#include "std_msgs/msg/Header.h"

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec(dllexport)
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(CARLALANEINVASIONEVENT_SOURCE)
#define CARLALANEINVASIONEVENT_DllAPI __declspec(dllexport)
#else
#define CARLALANEINVASIONEVENT_DllAPI __declspec(dllimport)
#endif  // CARLALANEINVASIONEVENT_SOURCE
#else
#define CARLALANEINVASIONEVENT_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define CARLALANEINVASIONEVENT_DllAPI
#endif  // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
class CdrSizeCalculator;
}  // namespace fastcdr
}  // namespace eprosima

namespace carla_msgs {

namespace msg {

namespace CarlaLaneInvasionEvent_Constants {

const int32_t LANE_MARKING_OTHER = 0;
const int32_t LANE_MARKING_BROKEN = 1;
const int32_t LANE_MARKING_SOLID = 2;

}  // namespace CarlaLaneInvasionEvent_Constants

/*!
 * @brief This class represents the structure CarlaLaneInvasionEvent defined by the user in the IDL file.
 * @ingroup CarlaLaneInvasionEvent
 */
class CarlaLaneInvasionEvent {
public:
  /*!
   * @brief Default constructor.
   */
  eProsima_user_DllExport CarlaLaneInvasionEvent();

  /*!
   * @brief Default destructor.
   */
  eProsima_user_DllExport ~CarlaLaneInvasionEvent();

  /*!
   * @brief Copy constructor.
   * @param x Reference to the object carla_msgs::msg::CarlaLaneInvasionEvent that will be copied.
   */
  eProsima_user_DllExport CarlaLaneInvasionEvent(const CarlaLaneInvasionEvent& x);

  /*!
   * @brief Move constructor.
   * @param x Reference to the object carla_msgs::msg::CarlaLaneInvasionEvent that will be copied.
   */
  eProsima_user_DllExport CarlaLaneInvasionEvent(CarlaLaneInvasionEvent&& x) noexcept;

  /*!
   * @brief Copy assignment.
   * @param x Reference to the object carla_msgs::msg::CarlaLaneInvasionEvent that will be copied.
   */
  eProsima_user_DllExport CarlaLaneInvasionEvent& operator=(const CarlaLaneInvasionEvent& x);

  /*!
   * @brief Move assignment.
   * @param x Reference to the object carla_msgs::msg::CarlaLaneInvasionEvent that will be copied.
   */
  eProsima_user_DllExport CarlaLaneInvasionEvent& operator=(CarlaLaneInvasionEvent&& x) noexcept;

  /*!
   * @brief Comparison operator.
   * @param x carla_msgs::msg::CarlaLaneInvasionEvent object to compare.
   */
  eProsima_user_DllExport bool operator==(const CarlaLaneInvasionEvent& x) const;

  /*!
   * @brief Comparison operator.
   * @param x carla_msgs::msg::CarlaLaneInvasionEvent object to compare.
   */
  eProsima_user_DllExport bool operator!=(const CarlaLaneInvasionEvent& x) const;

  /*!
   * @brief This function copies the value in member header
   * @param _header New value to be copied in member header
   */
  eProsima_user_DllExport void header(const std_msgs::msg::Header& _header);

  /*!
   * @brief This function moves the value in member header
   * @param _header New value to be moved in member header
   */
  eProsima_user_DllExport void header(std_msgs::msg::Header&& _header);

  /*!
   * @brief This function returns a constant reference to member header
   * @return Constant reference to member header
   */
  eProsima_user_DllExport const std_msgs::msg::Header& header() const;

  /*!
   * @brief This function returns a reference to member header
   * @return Reference to member header
   */
  eProsima_user_DllExport std_msgs::msg::Header& header();

  /*!
   * @brief This function copies the value in member crossed_lane_markings
   * @param _crossed_lane_markings New value to be copied in member crossed_lane_markings
   */
  eProsima_user_DllExport void crossed_lane_markings(const std::vector<int32_t>& _crossed_lane_markings);

  /*!
   * @brief This function moves the value in member crossed_lane_markings
   * @param _crossed_lane_markings New value to be moved in member crossed_lane_markings
   */
  eProsima_user_DllExport void crossed_lane_markings(std::vector<int32_t>&& _crossed_lane_markings);

  /*!
   * @brief This function returns a constant reference to member crossed_lane_markings
   * @return Constant reference to member crossed_lane_markings
   */
  eProsima_user_DllExport const std::vector<int32_t>& crossed_lane_markings() const;

  /*!
   * @brief This function returns a reference to member crossed_lane_markings
   * @return Reference to member crossed_lane_markings
   */
  eProsima_user_DllExport std::vector<int32_t>& crossed_lane_markings();

private:
  std_msgs::msg::Header m_header;
  std::vector<int32_t> m_crossed_lane_markings;
};

}  // namespace msg

}  // namespace carla_msgs

#endif  // _FAST_DDS_GENERATED_CARLA_MSGS_MSG_CARLALANEINVASIONEVENT_H_
