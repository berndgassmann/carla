// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file CarlaCollisionEvent.cpp
 * This source file contains the implementation of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "CarlaCollisionEvent.h"

#include <fastcdr/Cdr.h>


#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>


namespace carla_msgs {

namespace msg {



CarlaCollisionEvent::CarlaCollisionEvent()
{
}

CarlaCollisionEvent::~CarlaCollisionEvent()
{
}

CarlaCollisionEvent::CarlaCollisionEvent(
        const CarlaCollisionEvent& x)
{
    m_header = x.m_header;
    m_other_actor_id = x.m_other_actor_id;
    m_normal_impulse = x.m_normal_impulse;
}

CarlaCollisionEvent::CarlaCollisionEvent(
        CarlaCollisionEvent&& x) noexcept
{
    m_header = std::move(x.m_header);
    m_other_actor_id = x.m_other_actor_id;
    m_normal_impulse = std::move(x.m_normal_impulse);
}

CarlaCollisionEvent& CarlaCollisionEvent::operator =(
        const CarlaCollisionEvent& x)
{

    m_header = x.m_header;
    m_other_actor_id = x.m_other_actor_id;
    m_normal_impulse = x.m_normal_impulse;
    return *this;
}

CarlaCollisionEvent& CarlaCollisionEvent::operator =(
        CarlaCollisionEvent&& x) noexcept
{

    m_header = std::move(x.m_header);
    m_other_actor_id = x.m_other_actor_id;
    m_normal_impulse = std::move(x.m_normal_impulse);
    return *this;
}

bool CarlaCollisionEvent::operator ==(
        const CarlaCollisionEvent& x) const
{
    return (m_header == x.m_header &&
           m_other_actor_id == x.m_other_actor_id &&
           m_normal_impulse == x.m_normal_impulse);
}

bool CarlaCollisionEvent::operator !=(
        const CarlaCollisionEvent& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member header
 * @param _header New value to be copied in member header
 */
void CarlaCollisionEvent::header(
        const std_msgs::msg::Header& _header)
{
    m_header = _header;
}

/*!
 * @brief This function moves the value in member header
 * @param _header New value to be moved in member header
 */
void CarlaCollisionEvent::header(
        std_msgs::msg::Header&& _header)
{
    m_header = std::move(_header);
}

/*!
 * @brief This function returns a constant reference to member header
 * @return Constant reference to member header
 */
const std_msgs::msg::Header& CarlaCollisionEvent::header() const
{
    return m_header;
}

/*!
 * @brief This function returns a reference to member header
 * @return Reference to member header
 */
std_msgs::msg::Header& CarlaCollisionEvent::header()
{
    return m_header;
}


/*!
 * @brief This function sets a value in member other_actor_id
 * @param _other_actor_id New value for member other_actor_id
 */
void CarlaCollisionEvent::other_actor_id(
        uint32_t _other_actor_id)
{
    m_other_actor_id = _other_actor_id;
}

/*!
 * @brief This function returns the value of member other_actor_id
 * @return Value of member other_actor_id
 */
uint32_t CarlaCollisionEvent::other_actor_id() const
{
    return m_other_actor_id;
}

/*!
 * @brief This function returns a reference to member other_actor_id
 * @return Reference to member other_actor_id
 */
uint32_t& CarlaCollisionEvent::other_actor_id()
{
    return m_other_actor_id;
}


/*!
 * @brief This function copies the value in member normal_impulse
 * @param _normal_impulse New value to be copied in member normal_impulse
 */
void CarlaCollisionEvent::normal_impulse(
        const geometry_msgs::msg::Vector3& _normal_impulse)
{
    m_normal_impulse = _normal_impulse;
}

/*!
 * @brief This function moves the value in member normal_impulse
 * @param _normal_impulse New value to be moved in member normal_impulse
 */
void CarlaCollisionEvent::normal_impulse(
        geometry_msgs::msg::Vector3&& _normal_impulse)
{
    m_normal_impulse = std::move(_normal_impulse);
}

/*!
 * @brief This function returns a constant reference to member normal_impulse
 * @return Constant reference to member normal_impulse
 */
const geometry_msgs::msg::Vector3& CarlaCollisionEvent::normal_impulse() const
{
    return m_normal_impulse;
}

/*!
 * @brief This function returns a reference to member normal_impulse
 * @return Reference to member normal_impulse
 */
geometry_msgs::msg::Vector3& CarlaCollisionEvent::normal_impulse()
{
    return m_normal_impulse;
}




} // namespace msg


} // namespace carla_msgs
// Include auxiliary functions like for serializing/deserializing.
#include "CarlaCollisionEventCdrAux.ipp"

