// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file CarlaTrafficLightStatus.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "CarlaTrafficLightStatus.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>







carla_msgs::msg::CarlaTrafficLightStatus::CarlaTrafficLightStatus()
{
    // m_header com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@7674f035

    // m_id com.eprosima.idl.parser.typecode.PrimitiveTypeCode@69e153c5
    m_id = 0;
    // m_state com.eprosima.idl.parser.typecode.PrimitiveTypeCode@173ed316
    m_state = 0;

}

carla_msgs::msg::CarlaTrafficLightStatus::~CarlaTrafficLightStatus()
{


}

carla_msgs::msg::CarlaTrafficLightStatus::CarlaTrafficLightStatus(
        const CarlaTrafficLightStatus& x)
{
    m_header = x.m_header;
    m_id = x.m_id;
    m_state = x.m_state;
}

carla_msgs::msg::CarlaTrafficLightStatus::CarlaTrafficLightStatus(
        CarlaTrafficLightStatus&& x)
{
    m_header = std::move(x.m_header);
    m_id = x.m_id;
    m_state = x.m_state;
}

carla_msgs::msg::CarlaTrafficLightStatus& carla_msgs::msg::CarlaTrafficLightStatus::operator =(
        const CarlaTrafficLightStatus& x)
{

    m_header = x.m_header;
    m_id = x.m_id;
    m_state = x.m_state;

    return *this;
}

carla_msgs::msg::CarlaTrafficLightStatus& carla_msgs::msg::CarlaTrafficLightStatus::operator =(
        CarlaTrafficLightStatus&& x)
{

    m_header = std::move(x.m_header);
    m_id = x.m_id;
    m_state = x.m_state;

    return *this;
}

bool carla_msgs::msg::CarlaTrafficLightStatus::operator ==(
        const CarlaTrafficLightStatus& x) const
{

    return (m_header == x.m_header && m_id == x.m_id && m_state == x.m_state);
}

bool carla_msgs::msg::CarlaTrafficLightStatus::operator !=(
        const CarlaTrafficLightStatus& x) const
{
    return !(*this == x);
}

size_t carla_msgs::msg::CarlaTrafficLightStatus::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += std_msgs::msg::Header::getMaxCdrSerializedSize(current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}

size_t carla_msgs::msg::CarlaTrafficLightStatus::getCdrSerializedSize(
        const carla_msgs::msg::CarlaTrafficLightStatus& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += std_msgs::msg::Header::getCdrSerializedSize(data.header(), current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}

void carla_msgs::msg::CarlaTrafficLightStatus::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_header;
    scdr << m_id;
    scdr << m_state;

}

void carla_msgs::msg::CarlaTrafficLightStatus::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_header;
    dcdr >> m_id;
    dcdr >> m_state;
}

/*!
 * @brief This function copies the value in member header
 * @param _header New value to be copied in member header
 */
void carla_msgs::msg::CarlaTrafficLightStatus::header(
        const std_msgs::msg::Header& _header)
{
    m_header = _header;
}

/*!
 * @brief This function moves the value in member header
 * @param _header New value to be moved in member header
 */
void carla_msgs::msg::CarlaTrafficLightStatus::header(
        std_msgs::msg::Header&& _header)
{
    m_header = std::move(_header);
}

/*!
 * @brief This function returns a constant reference to member header
 * @return Constant reference to member header
 */
const std_msgs::msg::Header& carla_msgs::msg::CarlaTrafficLightStatus::header() const
{
    return m_header;
}

/*!
 * @brief This function returns a reference to member header
 * @return Reference to member header
 */
std_msgs::msg::Header& carla_msgs::msg::CarlaTrafficLightStatus::header()
{
    return m_header;
}
/*!
 * @brief This function sets a value in member id
 * @param _id New value for member id
 */
void carla_msgs::msg::CarlaTrafficLightStatus::id(
        uint32_t _id)
{
    m_id = _id;
}

/*!
 * @brief This function returns the value of member id
 * @return Value of member id
 */
uint32_t carla_msgs::msg::CarlaTrafficLightStatus::id() const
{
    return m_id;
}

/*!
 * @brief This function returns a reference to member id
 * @return Reference to member id
 */
uint32_t& carla_msgs::msg::CarlaTrafficLightStatus::id()
{
    return m_id;
}

/*!
 * @brief This function sets a value in member state
 * @param _state New value for member state
 */
void carla_msgs::msg::CarlaTrafficLightStatus::state(
        uint8_t _state)
{
    m_state = _state;
}

/*!
 * @brief This function returns the value of member state
 * @return Value of member state
 */
uint8_t carla_msgs::msg::CarlaTrafficLightStatus::state() const
{
    return m_state;
}

/*!
 * @brief This function returns a reference to member state
 * @return Reference to member state
 */
uint8_t& carla_msgs::msg::CarlaTrafficLightStatus::state()
{
    return m_state;
}


size_t carla_msgs::msg::CarlaTrafficLightStatus::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;



    return current_align;
}

bool carla_msgs::msg::CarlaTrafficLightStatus::isKeyDefined()
{
    return false;
}

void carla_msgs::msg::CarlaTrafficLightStatus::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
       
}


