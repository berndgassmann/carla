// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file CarlaWorldInfo.cpp
 * This source file contains the implementation of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "CarlaWorldInfo.h"

#include <fastcdr/Cdr.h>


#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>


namespace carla_msgs {

namespace msg {



CarlaWorldInfo::CarlaWorldInfo()
{
}

CarlaWorldInfo::~CarlaWorldInfo()
{
}

CarlaWorldInfo::CarlaWorldInfo(
        const CarlaWorldInfo& x)
{
    m_map_name = x.m_map_name;
    m_opendrive = x.m_opendrive;
}

CarlaWorldInfo::CarlaWorldInfo(
        CarlaWorldInfo&& x) noexcept
{
    m_map_name = std::move(x.m_map_name);
    m_opendrive = std::move(x.m_opendrive);
}

CarlaWorldInfo& CarlaWorldInfo::operator =(
        const CarlaWorldInfo& x)
{

    m_map_name = x.m_map_name;
    m_opendrive = x.m_opendrive;
    return *this;
}

CarlaWorldInfo& CarlaWorldInfo::operator =(
        CarlaWorldInfo&& x) noexcept
{

    m_map_name = std::move(x.m_map_name);
    m_opendrive = std::move(x.m_opendrive);
    return *this;
}

bool CarlaWorldInfo::operator ==(
        const CarlaWorldInfo& x) const
{
    return (m_map_name == x.m_map_name &&
           m_opendrive == x.m_opendrive);
}

bool CarlaWorldInfo::operator !=(
        const CarlaWorldInfo& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member map_name
 * @param _map_name New value to be copied in member map_name
 */
void CarlaWorldInfo::map_name(
        const std::string& _map_name)
{
    m_map_name = _map_name;
}

/*!
 * @brief This function moves the value in member map_name
 * @param _map_name New value to be moved in member map_name
 */
void CarlaWorldInfo::map_name(
        std::string&& _map_name)
{
    m_map_name = std::move(_map_name);
}

/*!
 * @brief This function returns a constant reference to member map_name
 * @return Constant reference to member map_name
 */
const std::string& CarlaWorldInfo::map_name() const
{
    return m_map_name;
}

/*!
 * @brief This function returns a reference to member map_name
 * @return Reference to member map_name
 */
std::string& CarlaWorldInfo::map_name()
{
    return m_map_name;
}


/*!
 * @brief This function copies the value in member opendrive
 * @param _opendrive New value to be copied in member opendrive
 */
void CarlaWorldInfo::opendrive(
        const std::string& _opendrive)
{
    m_opendrive = _opendrive;
}

/*!
 * @brief This function moves the value in member opendrive
 * @param _opendrive New value to be moved in member opendrive
 */
void CarlaWorldInfo::opendrive(
        std::string&& _opendrive)
{
    m_opendrive = std::move(_opendrive);
}

/*!
 * @brief This function returns a constant reference to member opendrive
 * @return Constant reference to member opendrive
 */
const std::string& CarlaWorldInfo::opendrive() const
{
    return m_opendrive;
}

/*!
 * @brief This function returns a reference to member opendrive
 * @return Reference to member opendrive
 */
std::string& CarlaWorldInfo::opendrive()
{
    return m_opendrive;
}




} // namespace msg


} // namespace carla_msgs
// Include auxiliary functions like for serializing/deserializing.
#include "CarlaWorldInfoCdrAux.ipp"

