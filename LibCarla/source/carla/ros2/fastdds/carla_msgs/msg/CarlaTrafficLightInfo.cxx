// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file CarlaTrafficLightInfo.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "CarlaTrafficLightInfo.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

carla_msgs::msg::CarlaTrafficLightInfo::CarlaTrafficLightInfo()
{
    // m_id com.eprosima.idl.parser.typecode.PrimitiveTypeCode@a530d0a
    m_id = 0;
    // m_transform com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@1a18644

    // m_trigger_volume com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@5acf93bb


}

carla_msgs::msg::CarlaTrafficLightInfo::~CarlaTrafficLightInfo()
{


}

carla_msgs::msg::CarlaTrafficLightInfo::CarlaTrafficLightInfo(
        const CarlaTrafficLightInfo& x)
{
    m_id = x.m_id;
    m_transform = x.m_transform;
    m_trigger_volume = x.m_trigger_volume;
}

carla_msgs::msg::CarlaTrafficLightInfo::CarlaTrafficLightInfo(
        CarlaTrafficLightInfo&& x)
{
    m_id = x.m_id;
    m_transform = std::move(x.m_transform);
    m_trigger_volume = std::move(x.m_trigger_volume);
}

carla_msgs::msg::CarlaTrafficLightInfo& carla_msgs::msg::CarlaTrafficLightInfo::operator =(
        const CarlaTrafficLightInfo& x)
{

    m_id = x.m_id;
    m_transform = x.m_transform;
    m_trigger_volume = x.m_trigger_volume;

    return *this;
}

carla_msgs::msg::CarlaTrafficLightInfo& carla_msgs::msg::CarlaTrafficLightInfo::operator =(
        CarlaTrafficLightInfo&& x)
{

    m_id = x.m_id;
    m_transform = std::move(x.m_transform);
    m_trigger_volume = std::move(x.m_trigger_volume);

    return *this;
}

bool carla_msgs::msg::CarlaTrafficLightInfo::operator ==(
        const CarlaTrafficLightInfo& x) const
{

    return (m_id == x.m_id && m_transform == x.m_transform && m_trigger_volume == x.m_trigger_volume);
}

bool carla_msgs::msg::CarlaTrafficLightInfo::operator !=(
        const CarlaTrafficLightInfo& x) const
{
    return !(*this == x);
}

size_t carla_msgs::msg::CarlaTrafficLightInfo::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += geometry_msgs::msg::Pose::getMaxCdrSerializedSize(current_alignment);
    current_alignment += carla_msgs::msg::CarlaBoundingBox::getMaxCdrSerializedSize(current_alignment);

    return current_alignment - initial_alignment;
}

size_t carla_msgs::msg::CarlaTrafficLightInfo::getCdrSerializedSize(
        const carla_msgs::msg::CarlaTrafficLightInfo& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += geometry_msgs::msg::Pose::getCdrSerializedSize(data.transform(), current_alignment);
    current_alignment += carla_msgs::msg::CarlaBoundingBox::getCdrSerializedSize(data.trigger_volume(), current_alignment);

    return current_alignment - initial_alignment;
}

void carla_msgs::msg::CarlaTrafficLightInfo::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_id;
    scdr << m_transform;
    scdr << m_trigger_volume;

}

void carla_msgs::msg::CarlaTrafficLightInfo::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_id;
    dcdr >> m_transform;
    dcdr >> m_trigger_volume;
}

/*!
 * @brief This function sets a value in member id
 * @param _id New value for member id
 */
void carla_msgs::msg::CarlaTrafficLightInfo::id(
        uint32_t _id)
{
    m_id = _id;
}

/*!
 * @brief This function returns the value of member id
 * @return Value of member id
 */
uint32_t carla_msgs::msg::CarlaTrafficLightInfo::id() const
{
    return m_id;
}

/*!
 * @brief This function returns a reference to member id
 * @return Reference to member id
 */
uint32_t& carla_msgs::msg::CarlaTrafficLightInfo::id()
{
    return m_id;
}

/*!
 * @brief This function copies the value in member transform
 * @param _transform New value to be copied in member transform
 */
void carla_msgs::msg::CarlaTrafficLightInfo::transform(
        const geometry_msgs::msg::Pose& _transform)
{
    m_transform = _transform;
}

/*!
 * @brief This function moves the value in member transform
 * @param _transform New value to be moved in member transform
 */
void carla_msgs::msg::CarlaTrafficLightInfo::transform(
        geometry_msgs::msg::Pose&& _transform)
{
    m_transform = std::move(_transform);
}

/*!
 * @brief This function returns a constant reference to member transform
 * @return Constant reference to member transform
 */
const geometry_msgs::msg::Pose& carla_msgs::msg::CarlaTrafficLightInfo::transform() const
{
    return m_transform;
}

/*!
 * @brief This function returns a reference to member transform
 * @return Reference to member transform
 */
geometry_msgs::msg::Pose& carla_msgs::msg::CarlaTrafficLightInfo::transform()
{
    return m_transform;
}
/*!
 * @brief This function copies the value in member trigger_volume
 * @param _trigger_volume New value to be copied in member trigger_volume
 */
void carla_msgs::msg::CarlaTrafficLightInfo::trigger_volume(
        const carla_msgs::msg::CarlaBoundingBox& _trigger_volume)
{
    m_trigger_volume = _trigger_volume;
}

/*!
 * @brief This function moves the value in member trigger_volume
 * @param _trigger_volume New value to be moved in member trigger_volume
 */
void carla_msgs::msg::CarlaTrafficLightInfo::trigger_volume(
        carla_msgs::msg::CarlaBoundingBox&& _trigger_volume)
{
    m_trigger_volume = std::move(_trigger_volume);
}

/*!
 * @brief This function returns a constant reference to member trigger_volume
 * @return Constant reference to member trigger_volume
 */
const carla_msgs::msg::CarlaBoundingBox& carla_msgs::msg::CarlaTrafficLightInfo::trigger_volume() const
{
    return m_trigger_volume;
}

/*!
 * @brief This function returns a reference to member trigger_volume
 * @return Reference to member trigger_volume
 */
carla_msgs::msg::CarlaBoundingBox& carla_msgs::msg::CarlaTrafficLightInfo::trigger_volume()
{
    return m_trigger_volume;
}

size_t carla_msgs::msg::CarlaTrafficLightInfo::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;



    return current_align;
}

bool carla_msgs::msg::CarlaTrafficLightInfo::isKeyDefined()
{
    return false;
}

void carla_msgs::msg::CarlaTrafficLightInfo::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
       
}


