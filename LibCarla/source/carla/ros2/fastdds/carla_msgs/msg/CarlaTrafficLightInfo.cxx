// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file CarlaTrafficLightInfo.cpp
 * This source file contains the implementation of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "CarlaTrafficLightInfo.h"

#include <fastcdr/Cdr.h>


#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>


namespace carla_msgs {

namespace msg {



CarlaTrafficLightInfo::CarlaTrafficLightInfo()
{
}

CarlaTrafficLightInfo::~CarlaTrafficLightInfo()
{
}

CarlaTrafficLightInfo::CarlaTrafficLightInfo(
        const CarlaTrafficLightInfo& x)
{
    m_id = x.m_id;
    m_transform = x.m_transform;
    m_trigger_volume = x.m_trigger_volume;
}

CarlaTrafficLightInfo::CarlaTrafficLightInfo(
        CarlaTrafficLightInfo&& x) noexcept
{
    m_id = x.m_id;
    m_transform = std::move(x.m_transform);
    m_trigger_volume = std::move(x.m_trigger_volume);
}

CarlaTrafficLightInfo& CarlaTrafficLightInfo::operator =(
        const CarlaTrafficLightInfo& x)
{

    m_id = x.m_id;
    m_transform = x.m_transform;
    m_trigger_volume = x.m_trigger_volume;
    return *this;
}

CarlaTrafficLightInfo& CarlaTrafficLightInfo::operator =(
        CarlaTrafficLightInfo&& x) noexcept
{

    m_id = x.m_id;
    m_transform = std::move(x.m_transform);
    m_trigger_volume = std::move(x.m_trigger_volume);
    return *this;
}

bool CarlaTrafficLightInfo::operator ==(
        const CarlaTrafficLightInfo& x) const
{
    return (m_id == x.m_id &&
           m_transform == x.m_transform &&
           m_trigger_volume == x.m_trigger_volume);
}

bool CarlaTrafficLightInfo::operator !=(
        const CarlaTrafficLightInfo& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function sets a value in member id
 * @param _id New value for member id
 */
void CarlaTrafficLightInfo::id(
        uint32_t _id)
{
    m_id = _id;
}

/*!
 * @brief This function returns the value of member id
 * @return Value of member id
 */
uint32_t CarlaTrafficLightInfo::id() const
{
    return m_id;
}

/*!
 * @brief This function returns a reference to member id
 * @return Reference to member id
 */
uint32_t& CarlaTrafficLightInfo::id()
{
    return m_id;
}


/*!
 * @brief This function copies the value in member transform
 * @param _transform New value to be copied in member transform
 */
void CarlaTrafficLightInfo::transform(
        const geometry_msgs::msg::Pose& _transform)
{
    m_transform = _transform;
}

/*!
 * @brief This function moves the value in member transform
 * @param _transform New value to be moved in member transform
 */
void CarlaTrafficLightInfo::transform(
        geometry_msgs::msg::Pose&& _transform)
{
    m_transform = std::move(_transform);
}

/*!
 * @brief This function returns a constant reference to member transform
 * @return Constant reference to member transform
 */
const geometry_msgs::msg::Pose& CarlaTrafficLightInfo::transform() const
{
    return m_transform;
}

/*!
 * @brief This function returns a reference to member transform
 * @return Reference to member transform
 */
geometry_msgs::msg::Pose& CarlaTrafficLightInfo::transform()
{
    return m_transform;
}


/*!
 * @brief This function copies the value in member trigger_volume
 * @param _trigger_volume New value to be copied in member trigger_volume
 */
void CarlaTrafficLightInfo::trigger_volume(
        const carla_msgs::msg::CarlaBoundingBox& _trigger_volume)
{
    m_trigger_volume = _trigger_volume;
}

/*!
 * @brief This function moves the value in member trigger_volume
 * @param _trigger_volume New value to be moved in member trigger_volume
 */
void CarlaTrafficLightInfo::trigger_volume(
        carla_msgs::msg::CarlaBoundingBox&& _trigger_volume)
{
    m_trigger_volume = std::move(_trigger_volume);
}

/*!
 * @brief This function returns a constant reference to member trigger_volume
 * @return Constant reference to member trigger_volume
 */
const carla_msgs::msg::CarlaBoundingBox& CarlaTrafficLightInfo::trigger_volume() const
{
    return m_trigger_volume;
}

/*!
 * @brief This function returns a reference to member trigger_volume
 * @return Reference to member trigger_volume
 */
carla_msgs::msg::CarlaBoundingBox& CarlaTrafficLightInfo::trigger_volume()
{
    return m_trigger_volume;
}




} // namespace msg


} // namespace carla_msgs
// Include auxiliary functions like for serializing/deserializing.
#include "CarlaTrafficLightInfoCdrAux.ipp"

