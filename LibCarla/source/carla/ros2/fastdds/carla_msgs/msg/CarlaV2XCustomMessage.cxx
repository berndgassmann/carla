// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file CarlaV2XCustomMessage.cpp
 * This source file contains the implementation of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "CarlaV2XCustomMessage.h"

#include <fastcdr/Cdr.h>


#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>


namespace carla_msgs {

namespace msg {



CarlaV2XCustomMessage::CarlaV2XCustomMessage()
{
}

CarlaV2XCustomMessage::~CarlaV2XCustomMessage()
{
}

CarlaV2XCustomMessage::CarlaV2XCustomMessage(
        const CarlaV2XCustomMessage& x)
{
    m_header = x.m_header;
    m_data = x.m_data;
}

CarlaV2XCustomMessage::CarlaV2XCustomMessage(
        CarlaV2XCustomMessage&& x) noexcept
{
    m_header = std::move(x.m_header);
    m_data = std::move(x.m_data);
}

CarlaV2XCustomMessage& CarlaV2XCustomMessage::operator =(
        const CarlaV2XCustomMessage& x)
{

    m_header = x.m_header;
    m_data = x.m_data;
    return *this;
}

CarlaV2XCustomMessage& CarlaV2XCustomMessage::operator =(
        CarlaV2XCustomMessage&& x) noexcept
{

    m_header = std::move(x.m_header);
    m_data = std::move(x.m_data);
    return *this;
}

bool CarlaV2XCustomMessage::operator ==(
        const CarlaV2XCustomMessage& x) const
{
    return (m_header == x.m_header &&
           m_data == x.m_data);
}

bool CarlaV2XCustomMessage::operator !=(
        const CarlaV2XCustomMessage& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member header
 * @param _header New value to be copied in member header
 */
void CarlaV2XCustomMessage::header(
        const etsi_its_cam_msgs::msg::ItsPduHeader& _header)
{
    m_header = _header;
}

/*!
 * @brief This function moves the value in member header
 * @param _header New value to be moved in member header
 */
void CarlaV2XCustomMessage::header(
        etsi_its_cam_msgs::msg::ItsPduHeader&& _header)
{
    m_header = std::move(_header);
}

/*!
 * @brief This function returns a constant reference to member header
 * @return Constant reference to member header
 */
const etsi_its_cam_msgs::msg::ItsPduHeader& CarlaV2XCustomMessage::header() const
{
    return m_header;
}

/*!
 * @brief This function returns a reference to member header
 * @return Reference to member header
 */
etsi_its_cam_msgs::msg::ItsPduHeader& CarlaV2XCustomMessage::header()
{
    return m_header;
}


/*!
 * @brief This function copies the value in member data
 * @param _data New value to be copied in member data
 */
void CarlaV2XCustomMessage::data(
        const carla_msgs::msg::CarlaV2XByteArray& _data)
{
    m_data = _data;
}

/*!
 * @brief This function moves the value in member data
 * @param _data New value to be moved in member data
 */
void CarlaV2XCustomMessage::data(
        carla_msgs::msg::CarlaV2XByteArray&& _data)
{
    m_data = std::move(_data);
}

/*!
 * @brief This function returns a constant reference to member data
 * @return Constant reference to member data
 */
const carla_msgs::msg::CarlaV2XByteArray& CarlaV2XCustomMessage::data() const
{
    return m_data;
}

/*!
 * @brief This function returns a reference to member data
 * @return Reference to member data
 */
carla_msgs::msg::CarlaV2XByteArray& CarlaV2XCustomMessage::data()
{
    return m_data;
}




} // namespace msg


} // namespace carla_msgs
// Include auxiliary functions like for serializing/deserializing.
#include "CarlaV2XCustomMessageCdrAux.ipp"

