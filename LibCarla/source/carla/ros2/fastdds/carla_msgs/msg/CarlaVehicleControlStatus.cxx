// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file CarlaVehicleControlStatus.cpp
 * This source file contains the implementation of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "CarlaVehicleControlStatus.h"

#include <fastcdr/Cdr.h>


#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>


namespace carla_msgs {

namespace msg {

namespace CarlaVehicleControlStatus_Constants {


} // namespace CarlaVehicleControlStatus_Constants


CarlaVehicleControlStatus::CarlaVehicleControlStatus()
{
}

CarlaVehicleControlStatus::~CarlaVehicleControlStatus()
{
}

CarlaVehicleControlStatus::CarlaVehicleControlStatus(
        const CarlaVehicleControlStatus& x)
{
    m_active_control_type = x.m_active_control_type;
    m_last_applied_vehicle_control = x.m_last_applied_vehicle_control;
    m_last_applied_ackermann_control = x.m_last_applied_ackermann_control;
}

CarlaVehicleControlStatus::CarlaVehicleControlStatus(
        CarlaVehicleControlStatus&& x) noexcept
{
    m_active_control_type = x.m_active_control_type;
    m_last_applied_vehicle_control = std::move(x.m_last_applied_vehicle_control);
    m_last_applied_ackermann_control = std::move(x.m_last_applied_ackermann_control);
}

CarlaVehicleControlStatus& CarlaVehicleControlStatus::operator =(
        const CarlaVehicleControlStatus& x)
{

    m_active_control_type = x.m_active_control_type;
    m_last_applied_vehicle_control = x.m_last_applied_vehicle_control;
    m_last_applied_ackermann_control = x.m_last_applied_ackermann_control;
    return *this;
}

CarlaVehicleControlStatus& CarlaVehicleControlStatus::operator =(
        CarlaVehicleControlStatus&& x) noexcept
{

    m_active_control_type = x.m_active_control_type;
    m_last_applied_vehicle_control = std::move(x.m_last_applied_vehicle_control);
    m_last_applied_ackermann_control = std::move(x.m_last_applied_ackermann_control);
    return *this;
}

bool CarlaVehicleControlStatus::operator ==(
        const CarlaVehicleControlStatus& x) const
{
    return (m_active_control_type == x.m_active_control_type &&
           m_last_applied_vehicle_control == x.m_last_applied_vehicle_control &&
           m_last_applied_ackermann_control == x.m_last_applied_ackermann_control);
}

bool CarlaVehicleControlStatus::operator !=(
        const CarlaVehicleControlStatus& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function sets a value in member active_control_type
 * @param _active_control_type New value for member active_control_type
 */
void CarlaVehicleControlStatus::active_control_type(
        uint8_t _active_control_type)
{
    m_active_control_type = _active_control_type;
}

/*!
 * @brief This function returns the value of member active_control_type
 * @return Value of member active_control_type
 */
uint8_t CarlaVehicleControlStatus::active_control_type() const
{
    return m_active_control_type;
}

/*!
 * @brief This function returns a reference to member active_control_type
 * @return Reference to member active_control_type
 */
uint8_t& CarlaVehicleControlStatus::active_control_type()
{
    return m_active_control_type;
}


/*!
 * @brief This function copies the value in member last_applied_vehicle_control
 * @param _last_applied_vehicle_control New value to be copied in member last_applied_vehicle_control
 */
void CarlaVehicleControlStatus::last_applied_vehicle_control(
        const carla_msgs::msg::CarlaVehicleControl& _last_applied_vehicle_control)
{
    m_last_applied_vehicle_control = _last_applied_vehicle_control;
}

/*!
 * @brief This function moves the value in member last_applied_vehicle_control
 * @param _last_applied_vehicle_control New value to be moved in member last_applied_vehicle_control
 */
void CarlaVehicleControlStatus::last_applied_vehicle_control(
        carla_msgs::msg::CarlaVehicleControl&& _last_applied_vehicle_control)
{
    m_last_applied_vehicle_control = std::move(_last_applied_vehicle_control);
}

/*!
 * @brief This function returns a constant reference to member last_applied_vehicle_control
 * @return Constant reference to member last_applied_vehicle_control
 */
const carla_msgs::msg::CarlaVehicleControl& CarlaVehicleControlStatus::last_applied_vehicle_control() const
{
    return m_last_applied_vehicle_control;
}

/*!
 * @brief This function returns a reference to member last_applied_vehicle_control
 * @return Reference to member last_applied_vehicle_control
 */
carla_msgs::msg::CarlaVehicleControl& CarlaVehicleControlStatus::last_applied_vehicle_control()
{
    return m_last_applied_vehicle_control;
}


/*!
 * @brief This function copies the value in member last_applied_ackermann_control
 * @param _last_applied_ackermann_control New value to be copied in member last_applied_ackermann_control
 */
void CarlaVehicleControlStatus::last_applied_ackermann_control(
        const ackermann_msgs::msg::AckermannDriveStamped& _last_applied_ackermann_control)
{
    m_last_applied_ackermann_control = _last_applied_ackermann_control;
}

/*!
 * @brief This function moves the value in member last_applied_ackermann_control
 * @param _last_applied_ackermann_control New value to be moved in member last_applied_ackermann_control
 */
void CarlaVehicleControlStatus::last_applied_ackermann_control(
        ackermann_msgs::msg::AckermannDriveStamped&& _last_applied_ackermann_control)
{
    m_last_applied_ackermann_control = std::move(_last_applied_ackermann_control);
}

/*!
 * @brief This function returns a constant reference to member last_applied_ackermann_control
 * @return Constant reference to member last_applied_ackermann_control
 */
const ackermann_msgs::msg::AckermannDriveStamped& CarlaVehicleControlStatus::last_applied_ackermann_control() const
{
    return m_last_applied_ackermann_control;
}

/*!
 * @brief This function returns a reference to member last_applied_ackermann_control
 * @return Reference to member last_applied_ackermann_control
 */
ackermann_msgs::msg::AckermannDriveStamped& CarlaVehicleControlStatus::last_applied_ackermann_control()
{
    return m_last_applied_ackermann_control;
}




} // namespace msg


} // namespace carla_msgs
// Include auxiliary functions like for serializing/deserializing.
#include "CarlaVehicleControlStatusCdrAux.ipp"

