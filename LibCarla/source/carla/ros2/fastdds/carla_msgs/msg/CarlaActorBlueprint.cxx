// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file CarlaActorBlueprint.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "CarlaActorBlueprint.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

carla_msgs::msg::CarlaActorBlueprint::CarlaActorBlueprint()
{
    // m_id com.eprosima.idl.parser.typecode.StringTypeCode@176d53b2
    m_id ="";
    // m_tags com.eprosima.idl.parser.typecode.SequenceTypeCode@971d0d8

    // m_attributes com.eprosima.idl.parser.typecode.SequenceTypeCode@51931956


}

carla_msgs::msg::CarlaActorBlueprint::~CarlaActorBlueprint()
{


}

carla_msgs::msg::CarlaActorBlueprint::CarlaActorBlueprint(
        const CarlaActorBlueprint& x)
{
    m_id = x.m_id;
    m_tags = x.m_tags;
    m_attributes = x.m_attributes;
}

carla_msgs::msg::CarlaActorBlueprint::CarlaActorBlueprint(
        CarlaActorBlueprint&& x)
{
    m_id = std::move(x.m_id);
    m_tags = std::move(x.m_tags);
    m_attributes = std::move(x.m_attributes);
}

carla_msgs::msg::CarlaActorBlueprint& carla_msgs::msg::CarlaActorBlueprint::operator =(
        const CarlaActorBlueprint& x)
{

    m_id = x.m_id;
    m_tags = x.m_tags;
    m_attributes = x.m_attributes;

    return *this;
}

carla_msgs::msg::CarlaActorBlueprint& carla_msgs::msg::CarlaActorBlueprint::operator =(
        CarlaActorBlueprint&& x)
{

    m_id = std::move(x.m_id);
    m_tags = std::move(x.m_tags);
    m_attributes = std::move(x.m_attributes);

    return *this;
}

bool carla_msgs::msg::CarlaActorBlueprint::operator ==(
        const CarlaActorBlueprint& x) const
{

    return (m_id == x.m_id && m_tags == x.m_tags && m_attributes == x.m_attributes);
}

bool carla_msgs::msg::CarlaActorBlueprint::operator !=(
        const CarlaActorBlueprint& x) const
{
    return !(*this == x);
}

size_t carla_msgs::msg::CarlaActorBlueprint::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    for(size_t a = 0; a < 100; ++a)
    {
        current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;
    }
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    for(size_t a = 0; a < 100; ++a)
    {
        current_alignment += diagnostic_msgs::msg::KeyValue::getMaxCdrSerializedSize(current_alignment);}


    return current_alignment - initial_alignment;
}

size_t carla_msgs::msg::CarlaActorBlueprint::getCdrSerializedSize(
        const carla_msgs::msg::CarlaActorBlueprint& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.id().size() + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    for(size_t a = 0; a < data.tags().size(); ++a)
    {
        current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) +
            data.tags().at(a).size() + 1;
    }
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    for(size_t a = 0; a < data.attributes().size(); ++a)
    {
        current_alignment += diagnostic_msgs::msg::KeyValue::getCdrSerializedSize(data.attributes().at(a), current_alignment);}


    return current_alignment - initial_alignment;
}

void carla_msgs::msg::CarlaActorBlueprint::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_id;
    scdr << m_tags;scdr << m_attributes;

}

void carla_msgs::msg::CarlaActorBlueprint::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_id;
    dcdr >> m_tags;
    dcdr >> m_attributes;
}

/*!
 * @brief This function copies the value in member id
 * @param _id New value to be copied in member id
 */
void carla_msgs::msg::CarlaActorBlueprint::id(
        const std::string& _id)
{
    m_id = _id;
}

/*!
 * @brief This function moves the value in member id
 * @param _id New value to be moved in member id
 */
void carla_msgs::msg::CarlaActorBlueprint::id(
        std::string&& _id)
{
    m_id = std::move(_id);
}

/*!
 * @brief This function returns a constant reference to member id
 * @return Constant reference to member id
 */
const std::string& carla_msgs::msg::CarlaActorBlueprint::id() const
{
    return m_id;
}

/*!
 * @brief This function returns a reference to member id
 * @return Reference to member id
 */
std::string& carla_msgs::msg::CarlaActorBlueprint::id()
{
    return m_id;
}
/*!
 * @brief This function copies the value in member tags
 * @param _tags New value to be copied in member tags
 */
void carla_msgs::msg::CarlaActorBlueprint::tags(
        const std::vector<std::string>& _tags)
{
    m_tags = _tags;
}

/*!
 * @brief This function moves the value in member tags
 * @param _tags New value to be moved in member tags
 */
void carla_msgs::msg::CarlaActorBlueprint::tags(
        std::vector<std::string>&& _tags)
{
    m_tags = std::move(_tags);
}

/*!
 * @brief This function returns a constant reference to member tags
 * @return Constant reference to member tags
 */
const std::vector<std::string>& carla_msgs::msg::CarlaActorBlueprint::tags() const
{
    return m_tags;
}

/*!
 * @brief This function returns a reference to member tags
 * @return Reference to member tags
 */
std::vector<std::string>& carla_msgs::msg::CarlaActorBlueprint::tags()
{
    return m_tags;
}
/*!
 * @brief This function copies the value in member attributes
 * @param _attributes New value to be copied in member attributes
 */
void carla_msgs::msg::CarlaActorBlueprint::attributes(
        const std::vector<diagnostic_msgs::msg::KeyValue>& _attributes)
{
    m_attributes = _attributes;
}

/*!
 * @brief This function moves the value in member attributes
 * @param _attributes New value to be moved in member attributes
 */
void carla_msgs::msg::CarlaActorBlueprint::attributes(
        std::vector<diagnostic_msgs::msg::KeyValue>&& _attributes)
{
    m_attributes = std::move(_attributes);
}

/*!
 * @brief This function returns a constant reference to member attributes
 * @return Constant reference to member attributes
 */
const std::vector<diagnostic_msgs::msg::KeyValue>& carla_msgs::msg::CarlaActorBlueprint::attributes() const
{
    return m_attributes;
}

/*!
 * @brief This function returns a reference to member attributes
 * @return Reference to member attributes
 */
std::vector<diagnostic_msgs::msg::KeyValue>& carla_msgs::msg::CarlaActorBlueprint::attributes()
{
    return m_attributes;
}

size_t carla_msgs::msg::CarlaActorBlueprint::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;



    return current_align;
}

bool carla_msgs::msg::CarlaActorBlueprint::isKeyDefined()
{
    return false;
}

void carla_msgs::msg::CarlaActorBlueprint::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
       
}


