// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file CarlaActorBlueprint.cpp
 * This source file contains the implementation of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "CarlaActorBlueprint.h"

#include <fastcdr/Cdr.h>


#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>


namespace carla_msgs {

namespace msg {





CarlaActorBlueprint::CarlaActorBlueprint()
{
}

CarlaActorBlueprint::~CarlaActorBlueprint()
{
}

CarlaActorBlueprint::CarlaActorBlueprint(
        const CarlaActorBlueprint& x)
{
    m_id = x.m_id;
    m_tags = x.m_tags;
    m_attributes = x.m_attributes;
}

CarlaActorBlueprint::CarlaActorBlueprint(
        CarlaActorBlueprint&& x) noexcept
{
    m_id = std::move(x.m_id);
    m_tags = std::move(x.m_tags);
    m_attributes = std::move(x.m_attributes);
}

CarlaActorBlueprint& CarlaActorBlueprint::operator =(
        const CarlaActorBlueprint& x)
{

    m_id = x.m_id;
    m_tags = x.m_tags;
    m_attributes = x.m_attributes;
    return *this;
}

CarlaActorBlueprint& CarlaActorBlueprint::operator =(
        CarlaActorBlueprint&& x) noexcept
{

    m_id = std::move(x.m_id);
    m_tags = std::move(x.m_tags);
    m_attributes = std::move(x.m_attributes);
    return *this;
}

bool CarlaActorBlueprint::operator ==(
        const CarlaActorBlueprint& x) const
{
    return (m_id == x.m_id &&
           m_tags == x.m_tags &&
           m_attributes == x.m_attributes);
}

bool CarlaActorBlueprint::operator !=(
        const CarlaActorBlueprint& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member id
 * @param _id New value to be copied in member id
 */
void CarlaActorBlueprint::id(
        const std::string& _id)
{
    m_id = _id;
}

/*!
 * @brief This function moves the value in member id
 * @param _id New value to be moved in member id
 */
void CarlaActorBlueprint::id(
        std::string&& _id)
{
    m_id = std::move(_id);
}

/*!
 * @brief This function returns a constant reference to member id
 * @return Constant reference to member id
 */
const std::string& CarlaActorBlueprint::id() const
{
    return m_id;
}

/*!
 * @brief This function returns a reference to member id
 * @return Reference to member id
 */
std::string& CarlaActorBlueprint::id()
{
    return m_id;
}


/*!
 * @brief This function copies the value in member tags
 * @param _tags New value to be copied in member tags
 */
void CarlaActorBlueprint::tags(
        const std::vector<std::string>& _tags)
{
    m_tags = _tags;
}

/*!
 * @brief This function moves the value in member tags
 * @param _tags New value to be moved in member tags
 */
void CarlaActorBlueprint::tags(
        std::vector<std::string>&& _tags)
{
    m_tags = std::move(_tags);
}

/*!
 * @brief This function returns a constant reference to member tags
 * @return Constant reference to member tags
 */
const std::vector<std::string>& CarlaActorBlueprint::tags() const
{
    return m_tags;
}

/*!
 * @brief This function returns a reference to member tags
 * @return Reference to member tags
 */
std::vector<std::string>& CarlaActorBlueprint::tags()
{
    return m_tags;
}


/*!
 * @brief This function copies the value in member attributes
 * @param _attributes New value to be copied in member attributes
 */
void CarlaActorBlueprint::attributes(
        const std::vector<diagnostic_msgs::msg::KeyValue>& _attributes)
{
    m_attributes = _attributes;
}

/*!
 * @brief This function moves the value in member attributes
 * @param _attributes New value to be moved in member attributes
 */
void CarlaActorBlueprint::attributes(
        std::vector<diagnostic_msgs::msg::KeyValue>&& _attributes)
{
    m_attributes = std::move(_attributes);
}

/*!
 * @brief This function returns a constant reference to member attributes
 * @return Constant reference to member attributes
 */
const std::vector<diagnostic_msgs::msg::KeyValue>& CarlaActorBlueprint::attributes() const
{
    return m_attributes;
}

/*!
 * @brief This function returns a reference to member attributes
 * @return Reference to member attributes
 */
std::vector<diagnostic_msgs::msg::KeyValue>& CarlaActorBlueprint::attributes()
{
    return m_attributes;
}




} // namespace msg


} // namespace carla_msgs
// Include auxiliary functions like for serializing/deserializing.
#include "CarlaActorBlueprintCdrAux.ipp"

