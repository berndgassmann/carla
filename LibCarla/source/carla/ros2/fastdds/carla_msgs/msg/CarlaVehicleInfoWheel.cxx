// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file CarlaVehicleInfoWheel.cpp
 * This source file contains the implementation of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "CarlaVehicleInfoWheel.h"

#include <fastcdr/Cdr.h>


#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>


namespace carla_msgs {

namespace msg {



CarlaVehicleInfoWheel::CarlaVehicleInfoWheel()
{
}

CarlaVehicleInfoWheel::~CarlaVehicleInfoWheel()
{
}

CarlaVehicleInfoWheel::CarlaVehicleInfoWheel(
        const CarlaVehicleInfoWheel& x)
{
    m_tire_friction = x.m_tire_friction;
    m_damping_rate = x.m_damping_rate;
    m_max_steer_angle = x.m_max_steer_angle;
    m_radius = x.m_radius;
    m_max_brake_torque = x.m_max_brake_torque;
    m_max_handbrake_torque = x.m_max_handbrake_torque;
    m_position = x.m_position;
}

CarlaVehicleInfoWheel::CarlaVehicleInfoWheel(
        CarlaVehicleInfoWheel&& x) noexcept
{
    m_tire_friction = x.m_tire_friction;
    m_damping_rate = x.m_damping_rate;
    m_max_steer_angle = x.m_max_steer_angle;
    m_radius = x.m_radius;
    m_max_brake_torque = x.m_max_brake_torque;
    m_max_handbrake_torque = x.m_max_handbrake_torque;
    m_position = std::move(x.m_position);
}

CarlaVehicleInfoWheel& CarlaVehicleInfoWheel::operator =(
        const CarlaVehicleInfoWheel& x)
{

    m_tire_friction = x.m_tire_friction;
    m_damping_rate = x.m_damping_rate;
    m_max_steer_angle = x.m_max_steer_angle;
    m_radius = x.m_radius;
    m_max_brake_torque = x.m_max_brake_torque;
    m_max_handbrake_torque = x.m_max_handbrake_torque;
    m_position = x.m_position;
    return *this;
}

CarlaVehicleInfoWheel& CarlaVehicleInfoWheel::operator =(
        CarlaVehicleInfoWheel&& x) noexcept
{

    m_tire_friction = x.m_tire_friction;
    m_damping_rate = x.m_damping_rate;
    m_max_steer_angle = x.m_max_steer_angle;
    m_radius = x.m_radius;
    m_max_brake_torque = x.m_max_brake_torque;
    m_max_handbrake_torque = x.m_max_handbrake_torque;
    m_position = std::move(x.m_position);
    return *this;
}

bool CarlaVehicleInfoWheel::operator ==(
        const CarlaVehicleInfoWheel& x) const
{
    return (m_tire_friction == x.m_tire_friction &&
           m_damping_rate == x.m_damping_rate &&
           m_max_steer_angle == x.m_max_steer_angle &&
           m_radius == x.m_radius &&
           m_max_brake_torque == x.m_max_brake_torque &&
           m_max_handbrake_torque == x.m_max_handbrake_torque &&
           m_position == x.m_position);
}

bool CarlaVehicleInfoWheel::operator !=(
        const CarlaVehicleInfoWheel& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function sets a value in member tire_friction
 * @param _tire_friction New value for member tire_friction
 */
void CarlaVehicleInfoWheel::tire_friction(
        float _tire_friction)
{
    m_tire_friction = _tire_friction;
}

/*!
 * @brief This function returns the value of member tire_friction
 * @return Value of member tire_friction
 */
float CarlaVehicleInfoWheel::tire_friction() const
{
    return m_tire_friction;
}

/*!
 * @brief This function returns a reference to member tire_friction
 * @return Reference to member tire_friction
 */
float& CarlaVehicleInfoWheel::tire_friction()
{
    return m_tire_friction;
}


/*!
 * @brief This function sets a value in member damping_rate
 * @param _damping_rate New value for member damping_rate
 */
void CarlaVehicleInfoWheel::damping_rate(
        float _damping_rate)
{
    m_damping_rate = _damping_rate;
}

/*!
 * @brief This function returns the value of member damping_rate
 * @return Value of member damping_rate
 */
float CarlaVehicleInfoWheel::damping_rate() const
{
    return m_damping_rate;
}

/*!
 * @brief This function returns a reference to member damping_rate
 * @return Reference to member damping_rate
 */
float& CarlaVehicleInfoWheel::damping_rate()
{
    return m_damping_rate;
}


/*!
 * @brief This function sets a value in member max_steer_angle
 * @param _max_steer_angle New value for member max_steer_angle
 */
void CarlaVehicleInfoWheel::max_steer_angle(
        float _max_steer_angle)
{
    m_max_steer_angle = _max_steer_angle;
}

/*!
 * @brief This function returns the value of member max_steer_angle
 * @return Value of member max_steer_angle
 */
float CarlaVehicleInfoWheel::max_steer_angle() const
{
    return m_max_steer_angle;
}

/*!
 * @brief This function returns a reference to member max_steer_angle
 * @return Reference to member max_steer_angle
 */
float& CarlaVehicleInfoWheel::max_steer_angle()
{
    return m_max_steer_angle;
}


/*!
 * @brief This function sets a value in member radius
 * @param _radius New value for member radius
 */
void CarlaVehicleInfoWheel::radius(
        float _radius)
{
    m_radius = _radius;
}

/*!
 * @brief This function returns the value of member radius
 * @return Value of member radius
 */
float CarlaVehicleInfoWheel::radius() const
{
    return m_radius;
}

/*!
 * @brief This function returns a reference to member radius
 * @return Reference to member radius
 */
float& CarlaVehicleInfoWheel::radius()
{
    return m_radius;
}


/*!
 * @brief This function sets a value in member max_brake_torque
 * @param _max_brake_torque New value for member max_brake_torque
 */
void CarlaVehicleInfoWheel::max_brake_torque(
        float _max_brake_torque)
{
    m_max_brake_torque = _max_brake_torque;
}

/*!
 * @brief This function returns the value of member max_brake_torque
 * @return Value of member max_brake_torque
 */
float CarlaVehicleInfoWheel::max_brake_torque() const
{
    return m_max_brake_torque;
}

/*!
 * @brief This function returns a reference to member max_brake_torque
 * @return Reference to member max_brake_torque
 */
float& CarlaVehicleInfoWheel::max_brake_torque()
{
    return m_max_brake_torque;
}


/*!
 * @brief This function sets a value in member max_handbrake_torque
 * @param _max_handbrake_torque New value for member max_handbrake_torque
 */
void CarlaVehicleInfoWheel::max_handbrake_torque(
        float _max_handbrake_torque)
{
    m_max_handbrake_torque = _max_handbrake_torque;
}

/*!
 * @brief This function returns the value of member max_handbrake_torque
 * @return Value of member max_handbrake_torque
 */
float CarlaVehicleInfoWheel::max_handbrake_torque() const
{
    return m_max_handbrake_torque;
}

/*!
 * @brief This function returns a reference to member max_handbrake_torque
 * @return Reference to member max_handbrake_torque
 */
float& CarlaVehicleInfoWheel::max_handbrake_torque()
{
    return m_max_handbrake_torque;
}


/*!
 * @brief This function copies the value in member position
 * @param _position New value to be copied in member position
 */
void CarlaVehicleInfoWheel::position(
        const geometry_msgs::msg::Vector3& _position)
{
    m_position = _position;
}

/*!
 * @brief This function moves the value in member position
 * @param _position New value to be moved in member position
 */
void CarlaVehicleInfoWheel::position(
        geometry_msgs::msg::Vector3&& _position)
{
    m_position = std::move(_position);
}

/*!
 * @brief This function returns a constant reference to member position
 * @return Constant reference to member position
 */
const geometry_msgs::msg::Vector3& CarlaVehicleInfoWheel::position() const
{
    return m_position;
}

/*!
 * @brief This function returns a reference to member position
 * @return Reference to member position
 */
geometry_msgs::msg::Vector3& CarlaVehicleInfoWheel::position()
{
    return m_position;
}




} // namespace msg


} // namespace carla_msgs
// Include auxiliary functions like for serializing/deserializing.
#include "CarlaVehicleInfoWheelCdrAux.ipp"

