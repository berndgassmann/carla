// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file CarlaActorBlueprint.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifndef _FAST_DDS_GENERATED_CARLA_MSGS_MSG_CARLAACTORBLUEPRINT_H_
#define _FAST_DDS_GENERATED_CARLA_MSGS_MSG_CARLAACTORBLUEPRINT_H_

#include <array>
#include <bitset>
#include <cstdint>
#include <map>
#include <string>
#include <vector>

#include <fastcdr/cdr/fixed_size_string.hpp>
#include <fastcdr/xcdr/external.hpp>
#include <fastcdr/xcdr/optional.hpp>

#include "diagnostic_msgs/msg/KeyValue.h"

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec(dllexport)
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(CARLAACTORBLUEPRINT_SOURCE)
#define CARLAACTORBLUEPRINT_DllAPI __declspec(dllexport)
#else
#define CARLAACTORBLUEPRINT_DllAPI __declspec(dllimport)
#endif  // CARLAACTORBLUEPRINT_SOURCE
#else
#define CARLAACTORBLUEPRINT_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define CARLAACTORBLUEPRINT_DllAPI
#endif  // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
class CdrSizeCalculator;
}  // namespace fastcdr
}  // namespace eprosima

namespace carla_msgs {

namespace msg {

/*!
 * @brief This class represents the structure CarlaActorBlueprint defined by the user in the IDL file.
 * @ingroup CarlaActorBlueprint
 */
class CarlaActorBlueprint {
public:
  /*!
   * @brief Default constructor.
   */
  eProsima_user_DllExport CarlaActorBlueprint();

  /*!
   * @brief Default destructor.
   */
  eProsima_user_DllExport ~CarlaActorBlueprint();

  /*!
   * @brief Copy constructor.
   * @param x Reference to the object carla_msgs::msg::CarlaActorBlueprint that will be copied.
   */
  eProsima_user_DllExport CarlaActorBlueprint(const CarlaActorBlueprint& x);

  /*!
   * @brief Move constructor.
   * @param x Reference to the object carla_msgs::msg::CarlaActorBlueprint that will be copied.
   */
  eProsima_user_DllExport CarlaActorBlueprint(CarlaActorBlueprint&& x) noexcept;

  /*!
   * @brief Copy assignment.
   * @param x Reference to the object carla_msgs::msg::CarlaActorBlueprint that will be copied.
   */
  eProsima_user_DllExport CarlaActorBlueprint& operator=(const CarlaActorBlueprint& x);

  /*!
   * @brief Move assignment.
   * @param x Reference to the object carla_msgs::msg::CarlaActorBlueprint that will be copied.
   */
  eProsima_user_DllExport CarlaActorBlueprint& operator=(CarlaActorBlueprint&& x) noexcept;

  /*!
   * @brief Comparison operator.
   * @param x carla_msgs::msg::CarlaActorBlueprint object to compare.
   */
  eProsima_user_DllExport bool operator==(const CarlaActorBlueprint& x) const;

  /*!
   * @brief Comparison operator.
   * @param x carla_msgs::msg::CarlaActorBlueprint object to compare.
   */
  eProsima_user_DllExport bool operator!=(const CarlaActorBlueprint& x) const;

  /*!
   * @brief This function copies the value in member id
   * @param _id New value to be copied in member id
   */
  eProsima_user_DllExport void id(const std::string& _id);

  /*!
   * @brief This function moves the value in member id
   * @param _id New value to be moved in member id
   */
  eProsima_user_DllExport void id(std::string&& _id);

  /*!
   * @brief This function returns a constant reference to member id
   * @return Constant reference to member id
   */
  eProsima_user_DllExport const std::string& id() const;

  /*!
   * @brief This function returns a reference to member id
   * @return Reference to member id
   */
  eProsima_user_DllExport std::string& id();

  /*!
   * @brief This function copies the value in member tags
   * @param _tags New value to be copied in member tags
   */
  eProsima_user_DllExport void tags(const std::vector<std::string>& _tags);

  /*!
   * @brief This function moves the value in member tags
   * @param _tags New value to be moved in member tags
   */
  eProsima_user_DllExport void tags(std::vector<std::string>&& _tags);

  /*!
   * @brief This function returns a constant reference to member tags
   * @return Constant reference to member tags
   */
  eProsima_user_DllExport const std::vector<std::string>& tags() const;

  /*!
   * @brief This function returns a reference to member tags
   * @return Reference to member tags
   */
  eProsima_user_DllExport std::vector<std::string>& tags();

  /*!
   * @brief This function copies the value in member attributes
   * @param _attributes New value to be copied in member attributes
   */
  eProsima_user_DllExport void attributes(const std::vector<diagnostic_msgs::msg::KeyValue>& _attributes);

  /*!
   * @brief This function moves the value in member attributes
   * @param _attributes New value to be moved in member attributes
   */
  eProsima_user_DllExport void attributes(std::vector<diagnostic_msgs::msg::KeyValue>&& _attributes);

  /*!
   * @brief This function returns a constant reference to member attributes
   * @return Constant reference to member attributes
   */
  eProsima_user_DllExport const std::vector<diagnostic_msgs::msg::KeyValue>& attributes() const;

  /*!
   * @brief This function returns a reference to member attributes
   * @return Reference to member attributes
   */
  eProsima_user_DllExport std::vector<diagnostic_msgs::msg::KeyValue>& attributes();

private:
  std::string m_id;
  std::vector<std::string> m_tags;
  std::vector<diagnostic_msgs::msg::KeyValue> m_attributes;
};

}  // namespace msg

}  // namespace carla_msgs

#endif  // _FAST_DDS_GENERATED_CARLA_MSGS_MSG_CARLAACTORBLUEPRINT_H_
