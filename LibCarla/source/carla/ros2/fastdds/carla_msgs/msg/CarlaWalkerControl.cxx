// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file CarlaWalkerControl.cpp
 * This source file contains the implementation of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "CarlaWalkerControl.h"

#include <fastcdr/Cdr.h>


#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>


namespace carla_msgs {

namespace msg {



CarlaWalkerControl::CarlaWalkerControl()
{
}

CarlaWalkerControl::~CarlaWalkerControl()
{
}

CarlaWalkerControl::CarlaWalkerControl(
        const CarlaWalkerControl& x)
{
    m_header = x.m_header;
    m_direction = x.m_direction;
    m_speed = x.m_speed;
    m_jump = x.m_jump;
}

CarlaWalkerControl::CarlaWalkerControl(
        CarlaWalkerControl&& x) noexcept
{
    m_header = std::move(x.m_header);
    m_direction = std::move(x.m_direction);
    m_speed = x.m_speed;
    m_jump = x.m_jump;
}

CarlaWalkerControl& CarlaWalkerControl::operator =(
        const CarlaWalkerControl& x)
{

    m_header = x.m_header;
    m_direction = x.m_direction;
    m_speed = x.m_speed;
    m_jump = x.m_jump;
    return *this;
}

CarlaWalkerControl& CarlaWalkerControl::operator =(
        CarlaWalkerControl&& x) noexcept
{

    m_header = std::move(x.m_header);
    m_direction = std::move(x.m_direction);
    m_speed = x.m_speed;
    m_jump = x.m_jump;
    return *this;
}

bool CarlaWalkerControl::operator ==(
        const CarlaWalkerControl& x) const
{
    return (m_header == x.m_header &&
           m_direction == x.m_direction &&
           m_speed == x.m_speed &&
           m_jump == x.m_jump);
}

bool CarlaWalkerControl::operator !=(
        const CarlaWalkerControl& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member header
 * @param _header New value to be copied in member header
 */
void CarlaWalkerControl::header(
        const std_msgs::msg::Header& _header)
{
    m_header = _header;
}

/*!
 * @brief This function moves the value in member header
 * @param _header New value to be moved in member header
 */
void CarlaWalkerControl::header(
        std_msgs::msg::Header&& _header)
{
    m_header = std::move(_header);
}

/*!
 * @brief This function returns a constant reference to member header
 * @return Constant reference to member header
 */
const std_msgs::msg::Header& CarlaWalkerControl::header() const
{
    return m_header;
}

/*!
 * @brief This function returns a reference to member header
 * @return Reference to member header
 */
std_msgs::msg::Header& CarlaWalkerControl::header()
{
    return m_header;
}


/*!
 * @brief This function copies the value in member direction
 * @param _direction New value to be copied in member direction
 */
void CarlaWalkerControl::direction(
        const geometry_msgs::msg::Vector3& _direction)
{
    m_direction = _direction;
}

/*!
 * @brief This function moves the value in member direction
 * @param _direction New value to be moved in member direction
 */
void CarlaWalkerControl::direction(
        geometry_msgs::msg::Vector3&& _direction)
{
    m_direction = std::move(_direction);
}

/*!
 * @brief This function returns a constant reference to member direction
 * @return Constant reference to member direction
 */
const geometry_msgs::msg::Vector3& CarlaWalkerControl::direction() const
{
    return m_direction;
}

/*!
 * @brief This function returns a reference to member direction
 * @return Reference to member direction
 */
geometry_msgs::msg::Vector3& CarlaWalkerControl::direction()
{
    return m_direction;
}


/*!
 * @brief This function sets a value in member speed
 * @param _speed New value for member speed
 */
void CarlaWalkerControl::speed(
        float _speed)
{
    m_speed = _speed;
}

/*!
 * @brief This function returns the value of member speed
 * @return Value of member speed
 */
float CarlaWalkerControl::speed() const
{
    return m_speed;
}

/*!
 * @brief This function returns a reference to member speed
 * @return Reference to member speed
 */
float& CarlaWalkerControl::speed()
{
    return m_speed;
}


/*!
 * @brief This function sets a value in member jump
 * @param _jump New value for member jump
 */
void CarlaWalkerControl::jump(
        bool _jump)
{
    m_jump = _jump;
}

/*!
 * @brief This function returns the value of member jump
 * @return Value of member jump
 */
bool CarlaWalkerControl::jump() const
{
    return m_jump;
}

/*!
 * @brief This function returns a reference to member jump
 * @return Reference to member jump
 */
bool& CarlaWalkerControl::jump()
{
    return m_jump;
}




} // namespace msg


} // namespace carla_msgs
// Include auxiliary functions like for serializing/deserializing.
#include "CarlaWalkerControlCdrAux.ipp"

