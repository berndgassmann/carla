// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file CarlaVehicleControlStatus.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifndef _FAST_DDS_GENERATED_CARLA_MSGS_MSG_CARLAVEHICLECONTROLSTATUS_H_
#define _FAST_DDS_GENERATED_CARLA_MSGS_MSG_CARLAVEHICLECONTROLSTATUS_H_

#include <array>
#include <bitset>
#include <cstdint>
#include <map>
#include <string>
#include <vector>

#include <fastcdr/cdr/fixed_size_string.hpp>
#include <fastcdr/xcdr/external.hpp>
#include <fastcdr/xcdr/optional.hpp>

#include "CarlaVehicleControl.h"
#include "ackermann_msgs/msg/AckermannDriveStamped.h"

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec(dllexport)
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(CARLAVEHICLECONTROLSTATUS_SOURCE)
#define CARLAVEHICLECONTROLSTATUS_DllAPI __declspec(dllexport)
#else
#define CARLAVEHICLECONTROLSTATUS_DllAPI __declspec(dllimport)
#endif  // CARLAVEHICLECONTROLSTATUS_SOURCE
#else
#define CARLAVEHICLECONTROLSTATUS_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define CARLAVEHICLECONTROLSTATUS_DllAPI
#endif  // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
class CdrSizeCalculator;
}  // namespace fastcdr
}  // namespace eprosima

namespace carla_msgs {

namespace msg {

namespace CarlaVehicleControlStatus_Constants {

const uint8_t VEHICLE_CONTROL = 0;
const uint8_t ACKERMANN_CONTROL = 1;

}  // namespace CarlaVehicleControlStatus_Constants

/*!
 * @brief This class represents the structure CarlaVehicleControlStatus defined by the user in the IDL file.
 * @ingroup CarlaVehicleControlStatus
 */
class CarlaVehicleControlStatus {
public:
  /*!
   * @brief Default constructor.
   */
  eProsima_user_DllExport CarlaVehicleControlStatus();

  /*!
   * @brief Default destructor.
   */
  eProsima_user_DllExport ~CarlaVehicleControlStatus();

  /*!
   * @brief Copy constructor.
   * @param x Reference to the object carla_msgs::msg::CarlaVehicleControlStatus that will be copied.
   */
  eProsima_user_DllExport CarlaVehicleControlStatus(const CarlaVehicleControlStatus& x);

  /*!
   * @brief Move constructor.
   * @param x Reference to the object carla_msgs::msg::CarlaVehicleControlStatus that will be copied.
   */
  eProsima_user_DllExport CarlaVehicleControlStatus(CarlaVehicleControlStatus&& x) noexcept;

  /*!
   * @brief Copy assignment.
   * @param x Reference to the object carla_msgs::msg::CarlaVehicleControlStatus that will be copied.
   */
  eProsima_user_DllExport CarlaVehicleControlStatus& operator=(const CarlaVehicleControlStatus& x);

  /*!
   * @brief Move assignment.
   * @param x Reference to the object carla_msgs::msg::CarlaVehicleControlStatus that will be copied.
   */
  eProsima_user_DllExport CarlaVehicleControlStatus& operator=(CarlaVehicleControlStatus&& x) noexcept;

  /*!
   * @brief Comparison operator.
   * @param x carla_msgs::msg::CarlaVehicleControlStatus object to compare.
   */
  eProsima_user_DllExport bool operator==(const CarlaVehicleControlStatus& x) const;

  /*!
   * @brief Comparison operator.
   * @param x carla_msgs::msg::CarlaVehicleControlStatus object to compare.
   */
  eProsima_user_DllExport bool operator!=(const CarlaVehicleControlStatus& x) const;

  /*!
   * @brief This function sets a value in member active_control_type
   * @param _active_control_type New value for member active_control_type
   */
  eProsima_user_DllExport void active_control_type(uint8_t _active_control_type);

  /*!
   * @brief This function returns the value of member active_control_type
   * @return Value of member active_control_type
   */
  eProsima_user_DllExport uint8_t active_control_type() const;

  /*!
   * @brief This function returns a reference to member active_control_type
   * @return Reference to member active_control_type
   */
  eProsima_user_DllExport uint8_t& active_control_type();

  /*!
   * @brief This function copies the value in member last_applied_vehicle_control
   * @param _last_applied_vehicle_control New value to be copied in member last_applied_vehicle_control
   */
  eProsima_user_DllExport void last_applied_vehicle_control(
      const carla_msgs::msg::CarlaVehicleControl& _last_applied_vehicle_control);

  /*!
   * @brief This function moves the value in member last_applied_vehicle_control
   * @param _last_applied_vehicle_control New value to be moved in member last_applied_vehicle_control
   */
  eProsima_user_DllExport void last_applied_vehicle_control(
      carla_msgs::msg::CarlaVehicleControl&& _last_applied_vehicle_control);

  /*!
   * @brief This function returns a constant reference to member last_applied_vehicle_control
   * @return Constant reference to member last_applied_vehicle_control
   */
  eProsima_user_DllExport const carla_msgs::msg::CarlaVehicleControl& last_applied_vehicle_control() const;

  /*!
   * @brief This function returns a reference to member last_applied_vehicle_control
   * @return Reference to member last_applied_vehicle_control
   */
  eProsima_user_DllExport carla_msgs::msg::CarlaVehicleControl& last_applied_vehicle_control();

  /*!
   * @brief This function copies the value in member last_applied_ackermann_control
   * @param _last_applied_ackermann_control New value to be copied in member last_applied_ackermann_control
   */
  eProsima_user_DllExport void last_applied_ackermann_control(
      const ackermann_msgs::msg::AckermannDriveStamped& _last_applied_ackermann_control);

  /*!
   * @brief This function moves the value in member last_applied_ackermann_control
   * @param _last_applied_ackermann_control New value to be moved in member last_applied_ackermann_control
   */
  eProsima_user_DllExport void last_applied_ackermann_control(
      ackermann_msgs::msg::AckermannDriveStamped&& _last_applied_ackermann_control);

  /*!
   * @brief This function returns a constant reference to member last_applied_ackermann_control
   * @return Constant reference to member last_applied_ackermann_control
   */
  eProsima_user_DllExport const ackermann_msgs::msg::AckermannDriveStamped& last_applied_ackermann_control() const;

  /*!
   * @brief This function returns a reference to member last_applied_ackermann_control
   * @return Reference to member last_applied_ackermann_control
   */
  eProsima_user_DllExport ackermann_msgs::msg::AckermannDriveStamped& last_applied_ackermann_control();

private:
  uint8_t m_active_control_type{0};
  carla_msgs::msg::CarlaVehicleControl m_last_applied_vehicle_control;
  ackermann_msgs::msg::AckermannDriveStamped m_last_applied_ackermann_control;
};

}  // namespace msg

}  // namespace carla_msgs

#endif  // _FAST_DDS_GENERATED_CARLA_MSGS_MSG_CARLAVEHICLECONTROLSTATUS_H_
