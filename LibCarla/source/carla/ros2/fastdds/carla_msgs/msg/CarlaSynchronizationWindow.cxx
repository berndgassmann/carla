// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file CarlaSynchronizationWindow.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "CarlaSynchronizationWindow.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

carla_msgs::msg::CarlaSynchronizationWindow::CarlaSynchronizationWindow()
{
    // m_synchronization_window_target_game_time com.eprosima.idl.parser.typecode.PrimitiveTypeCode@3b6ddd1d
    m_synchronization_window_target_game_time = 0.0;

}

carla_msgs::msg::CarlaSynchronizationWindow::~CarlaSynchronizationWindow()
{
}

carla_msgs::msg::CarlaSynchronizationWindow::CarlaSynchronizationWindow(
        const CarlaSynchronizationWindow& x)
{
    m_synchronization_window_target_game_time = x.m_synchronization_window_target_game_time;
}

carla_msgs::msg::CarlaSynchronizationWindow::CarlaSynchronizationWindow(
        CarlaSynchronizationWindow&& x)
{
    m_synchronization_window_target_game_time = x.m_synchronization_window_target_game_time;
}

carla_msgs::msg::CarlaSynchronizationWindow& carla_msgs::msg::CarlaSynchronizationWindow::operator =(
        const CarlaSynchronizationWindow& x)
{

    m_synchronization_window_target_game_time = x.m_synchronization_window_target_game_time;

    return *this;
}

carla_msgs::msg::CarlaSynchronizationWindow& carla_msgs::msg::CarlaSynchronizationWindow::operator =(
        CarlaSynchronizationWindow&& x)
{

    m_synchronization_window_target_game_time = x.m_synchronization_window_target_game_time;

    return *this;
}

bool carla_msgs::msg::CarlaSynchronizationWindow::operator ==(
        const CarlaSynchronizationWindow& x) const
{

    return (m_synchronization_window_target_game_time == x.m_synchronization_window_target_game_time);
}

bool carla_msgs::msg::CarlaSynchronizationWindow::operator !=(
        const CarlaSynchronizationWindow& x) const
{
    return !(*this == x);
}

size_t carla_msgs::msg::CarlaSynchronizationWindow::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    return current_alignment - initial_alignment;
}

size_t carla_msgs::msg::CarlaSynchronizationWindow::getCdrSerializedSize(
        const carla_msgs::msg::CarlaSynchronizationWindow& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    return current_alignment - initial_alignment;
}

void carla_msgs::msg::CarlaSynchronizationWindow::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_synchronization_window_target_game_time;

}

void carla_msgs::msg::CarlaSynchronizationWindow::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_synchronization_window_target_game_time;
}

/*!
 * @brief This function sets a value in member synchronization_window_target_game_time
 * @param _synchronization_window_target_game_time New value for member synchronization_window_target_game_time
 */
void carla_msgs::msg::CarlaSynchronizationWindow::synchronization_window_target_game_time(
        float _synchronization_window_target_game_time)
{
    m_synchronization_window_target_game_time = _synchronization_window_target_game_time;
}

/*!
 * @brief This function returns the value of member synchronization_window_target_game_time
 * @return Value of member synchronization_window_target_game_time
 */
float carla_msgs::msg::CarlaSynchronizationWindow::synchronization_window_target_game_time() const
{
    return m_synchronization_window_target_game_time;
}

/*!
 * @brief This function returns a reference to member synchronization_window_target_game_time
 * @return Reference to member synchronization_window_target_game_time
 */
float& carla_msgs::msg::CarlaSynchronizationWindow::synchronization_window_target_game_time()
{
    return m_synchronization_window_target_game_time;
}


size_t carla_msgs::msg::CarlaSynchronizationWindow::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;



    return current_align;
}

bool carla_msgs::msg::CarlaSynchronizationWindow::isKeyDefined()
{
    return false;
}

void carla_msgs::msg::CarlaSynchronizationWindow::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
     
}


