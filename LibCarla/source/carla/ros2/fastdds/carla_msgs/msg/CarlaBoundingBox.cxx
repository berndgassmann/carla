// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file CarlaBoundingBox.cpp
 * This source file contains the implementation of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "CarlaBoundingBox.h"

#include <fastcdr/Cdr.h>


#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>


namespace carla_msgs {

namespace msg {



CarlaBoundingBox::CarlaBoundingBox()
{
}

CarlaBoundingBox::~CarlaBoundingBox()
{
}

CarlaBoundingBox::CarlaBoundingBox(
        const CarlaBoundingBox& x)
{
    m_center = x.m_center;
    m_size = x.m_size;
}

CarlaBoundingBox::CarlaBoundingBox(
        CarlaBoundingBox&& x) noexcept
{
    m_center = std::move(x.m_center);
    m_size = std::move(x.m_size);
}

CarlaBoundingBox& CarlaBoundingBox::operator =(
        const CarlaBoundingBox& x)
{

    m_center = x.m_center;
    m_size = x.m_size;
    return *this;
}

CarlaBoundingBox& CarlaBoundingBox::operator =(
        CarlaBoundingBox&& x) noexcept
{

    m_center = std::move(x.m_center);
    m_size = std::move(x.m_size);
    return *this;
}

bool CarlaBoundingBox::operator ==(
        const CarlaBoundingBox& x) const
{
    return (m_center == x.m_center &&
           m_size == x.m_size);
}

bool CarlaBoundingBox::operator !=(
        const CarlaBoundingBox& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member center
 * @param _center New value to be copied in member center
 */
void CarlaBoundingBox::center(
        const geometry_msgs::msg::Vector3& _center)
{
    m_center = _center;
}

/*!
 * @brief This function moves the value in member center
 * @param _center New value to be moved in member center
 */
void CarlaBoundingBox::center(
        geometry_msgs::msg::Vector3&& _center)
{
    m_center = std::move(_center);
}

/*!
 * @brief This function returns a constant reference to member center
 * @return Constant reference to member center
 */
const geometry_msgs::msg::Vector3& CarlaBoundingBox::center() const
{
    return m_center;
}

/*!
 * @brief This function returns a reference to member center
 * @return Reference to member center
 */
geometry_msgs::msg::Vector3& CarlaBoundingBox::center()
{
    return m_center;
}


/*!
 * @brief This function copies the value in member size
 * @param _size New value to be copied in member size
 */
void CarlaBoundingBox::size(
        const geometry_msgs::msg::Vector3& _size)
{
    m_size = _size;
}

/*!
 * @brief This function moves the value in member size
 * @param _size New value to be moved in member size
 */
void CarlaBoundingBox::size(
        geometry_msgs::msg::Vector3&& _size)
{
    m_size = std::move(_size);
}

/*!
 * @brief This function returns a constant reference to member size
 * @return Constant reference to member size
 */
const geometry_msgs::msg::Vector3& CarlaBoundingBox::size() const
{
    return m_size;
}

/*!
 * @brief This function returns a reference to member size
 * @return Reference to member size
 */
geometry_msgs::msg::Vector3& CarlaBoundingBox::size()
{
    return m_size;
}




} // namespace msg


} // namespace carla_msgs
// Include auxiliary functions like for serializing/deserializing.
#include "CarlaBoundingBoxCdrAux.ipp"

