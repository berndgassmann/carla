// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file CarlaStatus.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _FAST_DDS_GENERATED_CARLA_MSGS_MSG_CARLASTATUS_H_
#define _FAST_DDS_GENERATED_CARLA_MSGS_MSG_CARLASTATUS_H_

#include "CarlaSynchronizationWindowParticipantState.h"
#include "std_msgs/msg/Header.h"
#include "CarlaEpisodeSettings.h"

#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(CarlaStatus_SOURCE)
#define CarlaStatus_DllAPI __declspec( dllexport )
#else
#define CarlaStatus_DllAPI __declspec( dllimport )
#endif // CarlaStatus_SOURCE
#else
#define CarlaStatus_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define CarlaStatus_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
} // namespace fastcdr
} // namespace eprosima


namespace carla_msgs {
    namespace msg {
        /*!
         * @brief This class represents the structure CarlaStatus defined by the user in the IDL file.
         * @ingroup CARLASTATUS
         */
        class CarlaStatus
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport CarlaStatus();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~CarlaStatus();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object carla_msgs::msg::CarlaStatus that will be copied.
             */
            eProsima_user_DllExport CarlaStatus(
                    const CarlaStatus& x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object carla_msgs::msg::CarlaStatus that will be copied.
             */
            eProsima_user_DllExport CarlaStatus(
                    CarlaStatus&& x);

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object carla_msgs::msg::CarlaStatus that will be copied.
             */
            eProsima_user_DllExport CarlaStatus& operator =(
                    const CarlaStatus& x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object carla_msgs::msg::CarlaStatus that will be copied.
             */
            eProsima_user_DllExport CarlaStatus& operator =(
                    CarlaStatus&& x);

            /*!
             * @brief Comparison operator.
             * @param x carla_msgs::msg::CarlaStatus object to compare.
             */
            eProsima_user_DllExport bool operator ==(
                    const CarlaStatus& x) const;

            /*!
             * @brief Comparison operator.
             * @param x carla_msgs::msg::CarlaStatus object to compare.
             */
            eProsima_user_DllExport bool operator !=(
                    const CarlaStatus& x) const;

            /*!
             * @brief This function copies the value in member header
             * @param _header New value to be copied in member header
             */
            eProsima_user_DllExport void header(
                    const std_msgs::msg::Header& _header);

            /*!
             * @brief This function moves the value in member header
             * @param _header New value to be moved in member header
             */
            eProsima_user_DllExport void header(
                    std_msgs::msg::Header&& _header);

            /*!
             * @brief This function returns a constant reference to member header
             * @return Constant reference to member header
             */
            eProsima_user_DllExport const std_msgs::msg::Header& header() const;

            /*!
             * @brief This function returns a reference to member header
             * @return Reference to member header
             */
            eProsima_user_DllExport std_msgs::msg::Header& header();
            /*!
             * @brief This function copies the value in member episode_settings
             * @param _episode_settings New value to be copied in member episode_settings
             */
            eProsima_user_DllExport void episode_settings(
                    const carla_msgs::msg::CarlaEpisodeSettings& _episode_settings);

            /*!
             * @brief This function moves the value in member episode_settings
             * @param _episode_settings New value to be moved in member episode_settings
             */
            eProsima_user_DllExport void episode_settings(
                    carla_msgs::msg::CarlaEpisodeSettings&& _episode_settings);

            /*!
             * @brief This function returns a constant reference to member episode_settings
             * @return Constant reference to member episode_settings
             */
            eProsima_user_DllExport const carla_msgs::msg::CarlaEpisodeSettings& episode_settings() const;

            /*!
             * @brief This function returns a reference to member episode_settings
             * @return Reference to member episode_settings
             */
            eProsima_user_DllExport carla_msgs::msg::CarlaEpisodeSettings& episode_settings();
            /*!
             * @brief This function sets a value in member frame
             * @param _frame New value for member frame
             */
            eProsima_user_DllExport void frame(
                    uint64_t _frame);

            /*!
             * @brief This function returns the value of member frame
             * @return Value of member frame
             */
            eProsima_user_DllExport uint64_t frame() const;

            /*!
             * @brief This function returns a reference to member frame
             * @return Reference to member frame
             */
            eProsima_user_DllExport uint64_t& frame();

            /*!
             * @brief This function copies the value in member synchronous_mode_participant_states
             * @param _synchronous_mode_participant_states New value to be copied in member synchronous_mode_participant_states
             */
            eProsima_user_DllExport void synchronous_mode_participant_states(
                    const std::vector<carla_msgs::msg::CarlaSynchronizationWindowParticipantState>& _synchronous_mode_participant_states);

            /*!
             * @brief This function moves the value in member synchronous_mode_participant_states
             * @param _synchronous_mode_participant_states New value to be moved in member synchronous_mode_participant_states
             */
            eProsima_user_DllExport void synchronous_mode_participant_states(
                    std::vector<carla_msgs::msg::CarlaSynchronizationWindowParticipantState>&& _synchronous_mode_participant_states);

            /*!
             * @brief This function returns a constant reference to member synchronous_mode_participant_states
             * @return Constant reference to member synchronous_mode_participant_states
             */
            eProsima_user_DllExport const std::vector<carla_msgs::msg::CarlaSynchronizationWindowParticipantState>& synchronous_mode_participant_states() const;

            /*!
             * @brief This function returns a reference to member synchronous_mode_participant_states
             * @return Reference to member synchronous_mode_participant_states
             */
            eProsima_user_DllExport std::vector<carla_msgs::msg::CarlaSynchronizationWindowParticipantState>& synchronous_mode_participant_states();
            /*!
             * @brief This function sets a value in member game_running
             * @param _game_running New value for member game_running
             */
            eProsima_user_DllExport void game_running(
                    bool _game_running);

            /*!
             * @brief This function returns the value of member game_running
             * @return Value of member game_running
             */
            eProsima_user_DllExport bool game_running() const;

            /*!
             * @brief This function returns a reference to member game_running
             * @return Reference to member game_running
             */
            eProsima_user_DllExport bool& game_running();


            /*!
             * @brief This function returns the maximum serialized size of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(
                    const carla_msgs::msg::CarlaStatus& data,
                    size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(
                    eprosima::fastcdr::Cdr& cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(
                    eprosima::fastcdr::Cdr& cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(
                    eprosima::fastcdr::Cdr& cdr) const;

        private:

            std_msgs::msg::Header m_header;
            carla_msgs::msg::CarlaEpisodeSettings m_episode_settings;
            uint64_t m_frame;
            std::vector<carla_msgs::msg::CarlaSynchronizationWindowParticipantState> m_synchronous_mode_participant_states;
            bool m_game_running;
        };
    } // namespace msg
} // namespace carla_msgs

#endif // _FAST_DDS_GENERATED_CARLA_MSGS_MSG_CARLASTATUS_H_