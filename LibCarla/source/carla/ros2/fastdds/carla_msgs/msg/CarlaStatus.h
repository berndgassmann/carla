// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file CarlaStatus.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifndef _FAST_DDS_GENERATED_CARLA_MSGS_MSG_CARLASTATUS_H_
#define _FAST_DDS_GENERATED_CARLA_MSGS_MSG_CARLASTATUS_H_

#include <array>
#include <bitset>
#include <cstdint>
#include <map>
#include <string>
#include <vector>

#include <fastcdr/cdr/fixed_size_string.hpp>
#include <fastcdr/xcdr/external.hpp>
#include <fastcdr/xcdr/optional.hpp>

#include "CarlaEpisodeSettings.h"
#include "CarlaSynchronizationWindowParticipantState.h"
#include "std_msgs/msg/Header.h"

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec(dllexport)
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(CARLASTATUS_SOURCE)
#define CARLASTATUS_DllAPI __declspec(dllexport)
#else
#define CARLASTATUS_DllAPI __declspec(dllimport)
#endif  // CARLASTATUS_SOURCE
#else
#define CARLASTATUS_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define CARLASTATUS_DllAPI
#endif  // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
class CdrSizeCalculator;
}  // namespace fastcdr
}  // namespace eprosima

namespace carla_msgs {

namespace msg {

/*!
 * @brief This class represents the structure CarlaStatus defined by the user in the IDL file.
 * @ingroup CarlaStatus
 */
class CarlaStatus {
public:
  /*!
   * @brief Default constructor.
   */
  eProsima_user_DllExport CarlaStatus();

  /*!
   * @brief Default destructor.
   */
  eProsima_user_DllExport ~CarlaStatus();

  /*!
   * @brief Copy constructor.
   * @param x Reference to the object carla_msgs::msg::CarlaStatus that will be copied.
   */
  eProsima_user_DllExport CarlaStatus(const CarlaStatus& x);

  /*!
   * @brief Move constructor.
   * @param x Reference to the object carla_msgs::msg::CarlaStatus that will be copied.
   */
  eProsima_user_DllExport CarlaStatus(CarlaStatus&& x) noexcept;

  /*!
   * @brief Copy assignment.
   * @param x Reference to the object carla_msgs::msg::CarlaStatus that will be copied.
   */
  eProsima_user_DllExport CarlaStatus& operator=(const CarlaStatus& x);

  /*!
   * @brief Move assignment.
   * @param x Reference to the object carla_msgs::msg::CarlaStatus that will be copied.
   */
  eProsima_user_DllExport CarlaStatus& operator=(CarlaStatus&& x) noexcept;

  /*!
   * @brief Comparison operator.
   * @param x carla_msgs::msg::CarlaStatus object to compare.
   */
  eProsima_user_DllExport bool operator==(const CarlaStatus& x) const;

  /*!
   * @brief Comparison operator.
   * @param x carla_msgs::msg::CarlaStatus object to compare.
   */
  eProsima_user_DllExport bool operator!=(const CarlaStatus& x) const;

  /*!
   * @brief This function copies the value in member header
   * @param _header New value to be copied in member header
   */
  eProsima_user_DllExport void header(const std_msgs::msg::Header& _header);

  /*!
   * @brief This function moves the value in member header
   * @param _header New value to be moved in member header
   */
  eProsima_user_DllExport void header(std_msgs::msg::Header&& _header);

  /*!
   * @brief This function returns a constant reference to member header
   * @return Constant reference to member header
   */
  eProsima_user_DllExport const std_msgs::msg::Header& header() const;

  /*!
   * @brief This function returns a reference to member header
   * @return Reference to member header
   */
  eProsima_user_DllExport std_msgs::msg::Header& header();

  /*!
   * @brief This function copies the value in member episode_settings
   * @param _episode_settings New value to be copied in member episode_settings
   */
  eProsima_user_DllExport void episode_settings(const carla_msgs::msg::CarlaEpisodeSettings& _episode_settings);

  /*!
   * @brief This function moves the value in member episode_settings
   * @param _episode_settings New value to be moved in member episode_settings
   */
  eProsima_user_DllExport void episode_settings(carla_msgs::msg::CarlaEpisodeSettings&& _episode_settings);

  /*!
   * @brief This function returns a constant reference to member episode_settings
   * @return Constant reference to member episode_settings
   */
  eProsima_user_DllExport const carla_msgs::msg::CarlaEpisodeSettings& episode_settings() const;

  /*!
   * @brief This function returns a reference to member episode_settings
   * @return Reference to member episode_settings
   */
  eProsima_user_DllExport carla_msgs::msg::CarlaEpisodeSettings& episode_settings();

  /*!
   * @brief This function sets a value in member frame
   * @param _frame New value for member frame
   */
  eProsima_user_DllExport void frame(uint64_t _frame);

  /*!
   * @brief This function returns the value of member frame
   * @return Value of member frame
   */
  eProsima_user_DllExport uint64_t frame() const;

  /*!
   * @brief This function returns a reference to member frame
   * @return Reference to member frame
   */
  eProsima_user_DllExport uint64_t& frame();

  /*!
   * @brief This function copies the value in member synchronous_mode_participant_states
   * @param _synchronous_mode_participant_states New value to be copied in member synchronous_mode_participant_states
   */
  eProsima_user_DllExport void synchronous_mode_participant_states(
      const std::vector<carla_msgs::msg::CarlaSynchronizationWindowParticipantState>&
          _synchronous_mode_participant_states);

  /*!
   * @brief This function moves the value in member synchronous_mode_participant_states
   * @param _synchronous_mode_participant_states New value to be moved in member synchronous_mode_participant_states
   */
  eProsima_user_DllExport void synchronous_mode_participant_states(
      std::vector<carla_msgs::msg::CarlaSynchronizationWindowParticipantState>&& _synchronous_mode_participant_states);

  /*!
   * @brief This function returns a constant reference to member synchronous_mode_participant_states
   * @return Constant reference to member synchronous_mode_participant_states
   */
  eProsima_user_DllExport const std::vector<carla_msgs::msg::CarlaSynchronizationWindowParticipantState>&
  synchronous_mode_participant_states() const;

  /*!
   * @brief This function returns a reference to member synchronous_mode_participant_states
   * @return Reference to member synchronous_mode_participant_states
   */
  eProsima_user_DllExport std::vector<carla_msgs::msg::CarlaSynchronizationWindowParticipantState>&
  synchronous_mode_participant_states();

  /*!
   * @brief This function sets a value in member game_running
   * @param _game_running New value for member game_running
   */
  eProsima_user_DllExport void game_running(bool _game_running);

  /*!
   * @brief This function returns the value of member game_running
   * @return Value of member game_running
   */
  eProsima_user_DllExport bool game_running() const;

  /*!
   * @brief This function returns a reference to member game_running
   * @return Reference to member game_running
   */
  eProsima_user_DllExport bool& game_running();

private:
  std_msgs::msg::Header m_header;
  carla_msgs::msg::CarlaEpisodeSettings m_episode_settings;
  uint64_t m_frame{0};
  std::vector<carla_msgs::msg::CarlaSynchronizationWindowParticipantState> m_synchronous_mode_participant_states;
  bool m_game_running{false};
};

}  // namespace msg

}  // namespace carla_msgs

#endif  // _FAST_DDS_GENERATED_CARLA_MSGS_MSG_CARLASTATUS_H_
