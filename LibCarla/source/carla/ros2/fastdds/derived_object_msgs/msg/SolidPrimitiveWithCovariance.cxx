// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file SolidPrimitiveWithCovariance.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "SolidPrimitiveWithCovariance.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>














derived_object_msgs::msg::SolidPrimitiveWithCovariance::SolidPrimitiveWithCovariance()
{
    // m_type com.eprosima.idl.parser.typecode.PrimitiveTypeCode@48075da3
    m_type = 0;
    // m_dimensions com.eprosima.idl.parser.typecode.SequenceTypeCode@68c9133c

    // m_covariance com.eprosima.idl.parser.typecode.SequenceTypeCode@7a35b0f5


}

derived_object_msgs::msg::SolidPrimitiveWithCovariance::~SolidPrimitiveWithCovariance()
{


}

derived_object_msgs::msg::SolidPrimitiveWithCovariance::SolidPrimitiveWithCovariance(
        const SolidPrimitiveWithCovariance& x)
{
    m_type = x.m_type;
    m_dimensions = x.m_dimensions;
    m_covariance = x.m_covariance;
}

derived_object_msgs::msg::SolidPrimitiveWithCovariance::SolidPrimitiveWithCovariance(
        SolidPrimitiveWithCovariance&& x)
{
    m_type = x.m_type;
    m_dimensions = std::move(x.m_dimensions);
    m_covariance = std::move(x.m_covariance);
}

derived_object_msgs::msg::SolidPrimitiveWithCovariance& derived_object_msgs::msg::SolidPrimitiveWithCovariance::operator =(
        const SolidPrimitiveWithCovariance& x)
{

    m_type = x.m_type;
    m_dimensions = x.m_dimensions;
    m_covariance = x.m_covariance;

    return *this;
}

derived_object_msgs::msg::SolidPrimitiveWithCovariance& derived_object_msgs::msg::SolidPrimitiveWithCovariance::operator =(
        SolidPrimitiveWithCovariance&& x)
{

    m_type = x.m_type;
    m_dimensions = std::move(x.m_dimensions);
    m_covariance = std::move(x.m_covariance);

    return *this;
}

bool derived_object_msgs::msg::SolidPrimitiveWithCovariance::operator ==(
        const SolidPrimitiveWithCovariance& x) const
{

    return (m_type == x.m_type && m_dimensions == x.m_dimensions && m_covariance == x.m_covariance);
}

bool derived_object_msgs::msg::SolidPrimitiveWithCovariance::operator !=(
        const SolidPrimitiveWithCovariance& x) const
{
    return !(*this == x);
}

size_t derived_object_msgs::msg::SolidPrimitiveWithCovariance::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += (100 * 8) + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);



    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += (100 * 8) + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);




    return current_alignment - initial_alignment;
}

size_t derived_object_msgs::msg::SolidPrimitiveWithCovariance::getCdrSerializedSize(
        const derived_object_msgs::msg::SolidPrimitiveWithCovariance& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    if (data.dimensions().size() > 0)
    {
        current_alignment += (data.dimensions().size() * 8) + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);
    }



    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    if (data.covariance().size() > 0)
    {
        current_alignment += (data.covariance().size() * 8) + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);
    }




    return current_alignment - initial_alignment;
}

void derived_object_msgs::msg::SolidPrimitiveWithCovariance::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_type;
    scdr << m_dimensions;
    scdr << m_covariance;

}

void derived_object_msgs::msg::SolidPrimitiveWithCovariance::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_type;
    dcdr >> m_dimensions;
    dcdr >> m_covariance;
}

/*!
 * @brief This function sets a value in member type
 * @param _type New value for member type
 */
void derived_object_msgs::msg::SolidPrimitiveWithCovariance::type(
        uint8_t _type)
{
    m_type = _type;
}

/*!
 * @brief This function returns the value of member type
 * @return Value of member type
 */
uint8_t derived_object_msgs::msg::SolidPrimitiveWithCovariance::type() const
{
    return m_type;
}

/*!
 * @brief This function returns a reference to member type
 * @return Reference to member type
 */
uint8_t& derived_object_msgs::msg::SolidPrimitiveWithCovariance::type()
{
    return m_type;
}

/*!
 * @brief This function copies the value in member dimensions
 * @param _dimensions New value to be copied in member dimensions
 */
void derived_object_msgs::msg::SolidPrimitiveWithCovariance::dimensions(
        const std::vector<double>& _dimensions)
{
    m_dimensions = _dimensions;
}

/*!
 * @brief This function moves the value in member dimensions
 * @param _dimensions New value to be moved in member dimensions
 */
void derived_object_msgs::msg::SolidPrimitiveWithCovariance::dimensions(
        std::vector<double>&& _dimensions)
{
    m_dimensions = std::move(_dimensions);
}

/*!
 * @brief This function returns a constant reference to member dimensions
 * @return Constant reference to member dimensions
 */
const std::vector<double>& derived_object_msgs::msg::SolidPrimitiveWithCovariance::dimensions() const
{
    return m_dimensions;
}

/*!
 * @brief This function returns a reference to member dimensions
 * @return Reference to member dimensions
 */
std::vector<double>& derived_object_msgs::msg::SolidPrimitiveWithCovariance::dimensions()
{
    return m_dimensions;
}
/*!
 * @brief This function copies the value in member covariance
 * @param _covariance New value to be copied in member covariance
 */
void derived_object_msgs::msg::SolidPrimitiveWithCovariance::covariance(
        const std::vector<double>& _covariance)
{
    m_covariance = _covariance;
}

/*!
 * @brief This function moves the value in member covariance
 * @param _covariance New value to be moved in member covariance
 */
void derived_object_msgs::msg::SolidPrimitiveWithCovariance::covariance(
        std::vector<double>&& _covariance)
{
    m_covariance = std::move(_covariance);
}

/*!
 * @brief This function returns a constant reference to member covariance
 * @return Constant reference to member covariance
 */
const std::vector<double>& derived_object_msgs::msg::SolidPrimitiveWithCovariance::covariance() const
{
    return m_covariance;
}

/*!
 * @brief This function returns a reference to member covariance
 * @return Reference to member covariance
 */
std::vector<double>& derived_object_msgs::msg::SolidPrimitiveWithCovariance::covariance()
{
    return m_covariance;
}

size_t derived_object_msgs::msg::SolidPrimitiveWithCovariance::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;



    return current_align;
}

bool derived_object_msgs::msg::SolidPrimitiveWithCovariance::isKeyDefined()
{
    return false;
}

void derived_object_msgs::msg::SolidPrimitiveWithCovariance::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
       
}


