// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file SolidPrimitiveWithCovariance.cpp
 * This source file contains the implementation of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "SolidPrimitiveWithCovariance.h"

#include <fastcdr/Cdr.h>


#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>


namespace derived_object_msgs {

namespace msg {

namespace SolidPrimitiveWithCovariance_Constants {


} // namespace SolidPrimitiveWithCovariance_Constants




SolidPrimitiveWithCovariance::SolidPrimitiveWithCovariance()
{
}

SolidPrimitiveWithCovariance::~SolidPrimitiveWithCovariance()
{
}

SolidPrimitiveWithCovariance::SolidPrimitiveWithCovariance(
        const SolidPrimitiveWithCovariance& x)
{
    m_type = x.m_type;
    m_dimensions = x.m_dimensions;
    m_covariance = x.m_covariance;
}

SolidPrimitiveWithCovariance::SolidPrimitiveWithCovariance(
        SolidPrimitiveWithCovariance&& x) noexcept
{
    m_type = x.m_type;
    m_dimensions = std::move(x.m_dimensions);
    m_covariance = std::move(x.m_covariance);
}

SolidPrimitiveWithCovariance& SolidPrimitiveWithCovariance::operator =(
        const SolidPrimitiveWithCovariance& x)
{

    m_type = x.m_type;
    m_dimensions = x.m_dimensions;
    m_covariance = x.m_covariance;
    return *this;
}

SolidPrimitiveWithCovariance& SolidPrimitiveWithCovariance::operator =(
        SolidPrimitiveWithCovariance&& x) noexcept
{

    m_type = x.m_type;
    m_dimensions = std::move(x.m_dimensions);
    m_covariance = std::move(x.m_covariance);
    return *this;
}

bool SolidPrimitiveWithCovariance::operator ==(
        const SolidPrimitiveWithCovariance& x) const
{
    return (m_type == x.m_type &&
           m_dimensions == x.m_dimensions &&
           m_covariance == x.m_covariance);
}

bool SolidPrimitiveWithCovariance::operator !=(
        const SolidPrimitiveWithCovariance& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function sets a value in member type
 * @param _type New value for member type
 */
void SolidPrimitiveWithCovariance::type(
        uint8_t _type)
{
    m_type = _type;
}

/*!
 * @brief This function returns the value of member type
 * @return Value of member type
 */
uint8_t SolidPrimitiveWithCovariance::type() const
{
    return m_type;
}

/*!
 * @brief This function returns a reference to member type
 * @return Reference to member type
 */
uint8_t& SolidPrimitiveWithCovariance::type()
{
    return m_type;
}


/*!
 * @brief This function copies the value in member dimensions
 * @param _dimensions New value to be copied in member dimensions
 */
void SolidPrimitiveWithCovariance::dimensions(
        const std::vector<double>& _dimensions)
{
    m_dimensions = _dimensions;
}

/*!
 * @brief This function moves the value in member dimensions
 * @param _dimensions New value to be moved in member dimensions
 */
void SolidPrimitiveWithCovariance::dimensions(
        std::vector<double>&& _dimensions)
{
    m_dimensions = std::move(_dimensions);
}

/*!
 * @brief This function returns a constant reference to member dimensions
 * @return Constant reference to member dimensions
 */
const std::vector<double>& SolidPrimitiveWithCovariance::dimensions() const
{
    return m_dimensions;
}

/*!
 * @brief This function returns a reference to member dimensions
 * @return Reference to member dimensions
 */
std::vector<double>& SolidPrimitiveWithCovariance::dimensions()
{
    return m_dimensions;
}


/*!
 * @brief This function copies the value in member covariance
 * @param _covariance New value to be copied in member covariance
 */
void SolidPrimitiveWithCovariance::covariance(
        const std::vector<double>& _covariance)
{
    m_covariance = _covariance;
}

/*!
 * @brief This function moves the value in member covariance
 * @param _covariance New value to be moved in member covariance
 */
void SolidPrimitiveWithCovariance::covariance(
        std::vector<double>&& _covariance)
{
    m_covariance = std::move(_covariance);
}

/*!
 * @brief This function returns a constant reference to member covariance
 * @return Constant reference to member covariance
 */
const std::vector<double>& SolidPrimitiveWithCovariance::covariance() const
{
    return m_covariance;
}

/*!
 * @brief This function returns a reference to member covariance
 * @return Reference to member covariance
 */
std::vector<double>& SolidPrimitiveWithCovariance::covariance()
{
    return m_covariance;
}




} // namespace msg


} // namespace derived_object_msgs
// Include auxiliary functions like for serializing/deserializing.
#include "SolidPrimitiveWithCovarianceCdrAux.ipp"

