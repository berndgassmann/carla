// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file SolidPrimitiveWithCovariance.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _FAST_DDS_GENERATED_DERIVED_OBJECT_MSGS_MSG_SOLIDPRIMITIVEWITHCOVARIANCE_H_
#define _FAST_DDS_GENERATED_DERIVED_OBJECT_MSGS_MSG_SOLIDPRIMITIVEWITHCOVARIANCE_H_


#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(SolidPrimitiveWithCovariance_SOURCE)
#define SolidPrimitiveWithCovariance_DllAPI __declspec( dllexport )
#else
#define SolidPrimitiveWithCovariance_DllAPI __declspec( dllimport )
#endif // SolidPrimitiveWithCovariance_SOURCE
#else
#define SolidPrimitiveWithCovariance_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define SolidPrimitiveWithCovariance_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
} // namespace fastcdr
} // namespace eprosima


namespace derived_object_msgs {
    namespace msg {
        namespace SolidPrimitiveWithCovariance_Constants {
            const uint8_t BOX = 1;
            const uint8_t SPHERE = 2;
            const uint8_t CYLINDER = 3;
            const uint8_t CONE = 4;
            const uint8_t BOX_X = 0;
            const uint8_t BOX_Y = 1;
            const uint8_t BOX_Z = 2;
            const uint8_t SPHERE_RADIUS = 0;
            const uint8_t CYLINDER_HEIGHT = 0;
            const uint8_t CYLINDER_RADIUS = 1;
            const uint8_t CONE_HEIGHT = 0;
            const uint8_t CONE_RADIUS = 1;
        } // namespace SolidPrimitiveWithCovariance_Constants
        /*!
         * @brief This class represents the structure SolidPrimitiveWithCovariance defined by the user in the IDL file.
         * @ingroup SOLIDPRIMITIVEWITHCOVARIANCE
         */
        class SolidPrimitiveWithCovariance
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport SolidPrimitiveWithCovariance();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~SolidPrimitiveWithCovariance();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object derived_object_msgs::msg::SolidPrimitiveWithCovariance that will be copied.
             */
            eProsima_user_DllExport SolidPrimitiveWithCovariance(
                    const SolidPrimitiveWithCovariance& x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object derived_object_msgs::msg::SolidPrimitiveWithCovariance that will be copied.
             */
            eProsima_user_DllExport SolidPrimitiveWithCovariance(
                    SolidPrimitiveWithCovariance&& x);

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object derived_object_msgs::msg::SolidPrimitiveWithCovariance that will be copied.
             */
            eProsima_user_DllExport SolidPrimitiveWithCovariance& operator =(
                    const SolidPrimitiveWithCovariance& x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object derived_object_msgs::msg::SolidPrimitiveWithCovariance that will be copied.
             */
            eProsima_user_DllExport SolidPrimitiveWithCovariance& operator =(
                    SolidPrimitiveWithCovariance&& x);

            /*!
             * @brief Comparison operator.
             * @param x derived_object_msgs::msg::SolidPrimitiveWithCovariance object to compare.
             */
            eProsima_user_DllExport bool operator ==(
                    const SolidPrimitiveWithCovariance& x) const;

            /*!
             * @brief Comparison operator.
             * @param x derived_object_msgs::msg::SolidPrimitiveWithCovariance object to compare.
             */
            eProsima_user_DllExport bool operator !=(
                    const SolidPrimitiveWithCovariance& x) const;

            /*!
             * @brief This function sets a value in member type
             * @param _type New value for member type
             */
            eProsima_user_DllExport void type(
                    uint8_t _type);

            /*!
             * @brief This function returns the value of member type
             * @return Value of member type
             */
            eProsima_user_DllExport uint8_t type() const;

            /*!
             * @brief This function returns a reference to member type
             * @return Reference to member type
             */
            eProsima_user_DllExport uint8_t& type();

            /*!
             * @brief This function copies the value in member dimensions
             * @param _dimensions New value to be copied in member dimensions
             */
            eProsima_user_DllExport void dimensions(
                    const std::vector<double>& _dimensions);

            /*!
             * @brief This function moves the value in member dimensions
             * @param _dimensions New value to be moved in member dimensions
             */
            eProsima_user_DllExport void dimensions(
                    std::vector<double>&& _dimensions);

            /*!
             * @brief This function returns a constant reference to member dimensions
             * @return Constant reference to member dimensions
             */
            eProsima_user_DllExport const std::vector<double>& dimensions() const;

            /*!
             * @brief This function returns a reference to member dimensions
             * @return Reference to member dimensions
             */
            eProsima_user_DllExport std::vector<double>& dimensions();
            /*!
             * @brief This function copies the value in member covariance
             * @param _covariance New value to be copied in member covariance
             */
            eProsima_user_DllExport void covariance(
                    const std::vector<double>& _covariance);

            /*!
             * @brief This function moves the value in member covariance
             * @param _covariance New value to be moved in member covariance
             */
            eProsima_user_DllExport void covariance(
                    std::vector<double>&& _covariance);

            /*!
             * @brief This function returns a constant reference to member covariance
             * @return Constant reference to member covariance
             */
            eProsima_user_DllExport const std::vector<double>& covariance() const;

            /*!
             * @brief This function returns a reference to member covariance
             * @return Reference to member covariance
             */
            eProsima_user_DllExport std::vector<double>& covariance();

            /*!
             * @brief This function returns the maximum serialized size of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(
                    const derived_object_msgs::msg::SolidPrimitiveWithCovariance& data,
                    size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(
                    eprosima::fastcdr::Cdr& cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(
                    eprosima::fastcdr::Cdr& cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(
                    eprosima::fastcdr::Cdr& cdr) const;

        private:

            uint8_t m_type;
            std::vector<double> m_dimensions;
            std::vector<double> m_covariance;
        };
    } // namespace msg
} // namespace derived_object_msgs

#endif // _FAST_DDS_GENERATED_DERIVED_OBJECT_MSGS_MSG_SOLIDPRIMITIVEWITHCOVARIANCE_H_