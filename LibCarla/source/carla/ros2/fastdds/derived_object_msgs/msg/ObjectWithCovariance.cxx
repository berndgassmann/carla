// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file ObjectWithCovariance.cpp
 * This source file contains the implementation of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "ObjectWithCovariance.h"

#include <fastcdr/Cdr.h>


#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>


namespace derived_object_msgs {

namespace msg {

namespace ObjectWithCovariance_Constants {


} // namespace ObjectWithCovariance_Constants


ObjectWithCovariance::ObjectWithCovariance()
{
}

ObjectWithCovariance::~ObjectWithCovariance()
{
}

ObjectWithCovariance::ObjectWithCovariance(
        const ObjectWithCovariance& x)
{
    m_header = x.m_header;
    m_id = x.m_id;
    m_detection_level = x.m_detection_level;
    m_object_classified = x.m_object_classified;
    m_pose = x.m_pose;
    m_twist = x.m_twist;
    m_accel = x.m_accel;
    m_polygon = x.m_polygon;
    m_shape = x.m_shape;
    m_classification = x.m_classification;
    m_classification_certainty = x.m_classification_certainty;
    m_classification_age = x.m_classification_age;
}

ObjectWithCovariance::ObjectWithCovariance(
        ObjectWithCovariance&& x) noexcept
{
    m_header = std::move(x.m_header);
    m_id = x.m_id;
    m_detection_level = x.m_detection_level;
    m_object_classified = x.m_object_classified;
    m_pose = std::move(x.m_pose);
    m_twist = std::move(x.m_twist);
    m_accel = std::move(x.m_accel);
    m_polygon = std::move(x.m_polygon);
    m_shape = std::move(x.m_shape);
    m_classification = x.m_classification;
    m_classification_certainty = x.m_classification_certainty;
    m_classification_age = x.m_classification_age;
}

ObjectWithCovariance& ObjectWithCovariance::operator =(
        const ObjectWithCovariance& x)
{

    m_header = x.m_header;
    m_id = x.m_id;
    m_detection_level = x.m_detection_level;
    m_object_classified = x.m_object_classified;
    m_pose = x.m_pose;
    m_twist = x.m_twist;
    m_accel = x.m_accel;
    m_polygon = x.m_polygon;
    m_shape = x.m_shape;
    m_classification = x.m_classification;
    m_classification_certainty = x.m_classification_certainty;
    m_classification_age = x.m_classification_age;
    return *this;
}

ObjectWithCovariance& ObjectWithCovariance::operator =(
        ObjectWithCovariance&& x) noexcept
{

    m_header = std::move(x.m_header);
    m_id = x.m_id;
    m_detection_level = x.m_detection_level;
    m_object_classified = x.m_object_classified;
    m_pose = std::move(x.m_pose);
    m_twist = std::move(x.m_twist);
    m_accel = std::move(x.m_accel);
    m_polygon = std::move(x.m_polygon);
    m_shape = std::move(x.m_shape);
    m_classification = x.m_classification;
    m_classification_certainty = x.m_classification_certainty;
    m_classification_age = x.m_classification_age;
    return *this;
}

bool ObjectWithCovariance::operator ==(
        const ObjectWithCovariance& x) const
{
    return (m_header == x.m_header &&
           m_id == x.m_id &&
           m_detection_level == x.m_detection_level &&
           m_object_classified == x.m_object_classified &&
           m_pose == x.m_pose &&
           m_twist == x.m_twist &&
           m_accel == x.m_accel &&
           m_polygon == x.m_polygon &&
           m_shape == x.m_shape &&
           m_classification == x.m_classification &&
           m_classification_certainty == x.m_classification_certainty &&
           m_classification_age == x.m_classification_age);
}

bool ObjectWithCovariance::operator !=(
        const ObjectWithCovariance& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member header
 * @param _header New value to be copied in member header
 */
void ObjectWithCovariance::header(
        const std_msgs::msg::Header& _header)
{
    m_header = _header;
}

/*!
 * @brief This function moves the value in member header
 * @param _header New value to be moved in member header
 */
void ObjectWithCovariance::header(
        std_msgs::msg::Header&& _header)
{
    m_header = std::move(_header);
}

/*!
 * @brief This function returns a constant reference to member header
 * @return Constant reference to member header
 */
const std_msgs::msg::Header& ObjectWithCovariance::header() const
{
    return m_header;
}

/*!
 * @brief This function returns a reference to member header
 * @return Reference to member header
 */
std_msgs::msg::Header& ObjectWithCovariance::header()
{
    return m_header;
}


/*!
 * @brief This function sets a value in member id
 * @param _id New value for member id
 */
void ObjectWithCovariance::id(
        uint32_t _id)
{
    m_id = _id;
}

/*!
 * @brief This function returns the value of member id
 * @return Value of member id
 */
uint32_t ObjectWithCovariance::id() const
{
    return m_id;
}

/*!
 * @brief This function returns a reference to member id
 * @return Reference to member id
 */
uint32_t& ObjectWithCovariance::id()
{
    return m_id;
}


/*!
 * @brief This function sets a value in member detection_level
 * @param _detection_level New value for member detection_level
 */
void ObjectWithCovariance::detection_level(
        uint8_t _detection_level)
{
    m_detection_level = _detection_level;
}

/*!
 * @brief This function returns the value of member detection_level
 * @return Value of member detection_level
 */
uint8_t ObjectWithCovariance::detection_level() const
{
    return m_detection_level;
}

/*!
 * @brief This function returns a reference to member detection_level
 * @return Reference to member detection_level
 */
uint8_t& ObjectWithCovariance::detection_level()
{
    return m_detection_level;
}


/*!
 * @brief This function sets a value in member object_classified
 * @param _object_classified New value for member object_classified
 */
void ObjectWithCovariance::object_classified(
        bool _object_classified)
{
    m_object_classified = _object_classified;
}

/*!
 * @brief This function returns the value of member object_classified
 * @return Value of member object_classified
 */
bool ObjectWithCovariance::object_classified() const
{
    return m_object_classified;
}

/*!
 * @brief This function returns a reference to member object_classified
 * @return Reference to member object_classified
 */
bool& ObjectWithCovariance::object_classified()
{
    return m_object_classified;
}


/*!
 * @brief This function copies the value in member pose
 * @param _pose New value to be copied in member pose
 */
void ObjectWithCovariance::pose(
        const geometry_msgs::msg::PoseWithCovariance& _pose)
{
    m_pose = _pose;
}

/*!
 * @brief This function moves the value in member pose
 * @param _pose New value to be moved in member pose
 */
void ObjectWithCovariance::pose(
        geometry_msgs::msg::PoseWithCovariance&& _pose)
{
    m_pose = std::move(_pose);
}

/*!
 * @brief This function returns a constant reference to member pose
 * @return Constant reference to member pose
 */
const geometry_msgs::msg::PoseWithCovariance& ObjectWithCovariance::pose() const
{
    return m_pose;
}

/*!
 * @brief This function returns a reference to member pose
 * @return Reference to member pose
 */
geometry_msgs::msg::PoseWithCovariance& ObjectWithCovariance::pose()
{
    return m_pose;
}


/*!
 * @brief This function copies the value in member twist
 * @param _twist New value to be copied in member twist
 */
void ObjectWithCovariance::twist(
        const geometry_msgs::msg::TwistWithCovariance& _twist)
{
    m_twist = _twist;
}

/*!
 * @brief This function moves the value in member twist
 * @param _twist New value to be moved in member twist
 */
void ObjectWithCovariance::twist(
        geometry_msgs::msg::TwistWithCovariance&& _twist)
{
    m_twist = std::move(_twist);
}

/*!
 * @brief This function returns a constant reference to member twist
 * @return Constant reference to member twist
 */
const geometry_msgs::msg::TwistWithCovariance& ObjectWithCovariance::twist() const
{
    return m_twist;
}

/*!
 * @brief This function returns a reference to member twist
 * @return Reference to member twist
 */
geometry_msgs::msg::TwistWithCovariance& ObjectWithCovariance::twist()
{
    return m_twist;
}


/*!
 * @brief This function copies the value in member accel
 * @param _accel New value to be copied in member accel
 */
void ObjectWithCovariance::accel(
        const geometry_msgs::msg::AccelWithCovariance& _accel)
{
    m_accel = _accel;
}

/*!
 * @brief This function moves the value in member accel
 * @param _accel New value to be moved in member accel
 */
void ObjectWithCovariance::accel(
        geometry_msgs::msg::AccelWithCovariance&& _accel)
{
    m_accel = std::move(_accel);
}

/*!
 * @brief This function returns a constant reference to member accel
 * @return Constant reference to member accel
 */
const geometry_msgs::msg::AccelWithCovariance& ObjectWithCovariance::accel() const
{
    return m_accel;
}

/*!
 * @brief This function returns a reference to member accel
 * @return Reference to member accel
 */
geometry_msgs::msg::AccelWithCovariance& ObjectWithCovariance::accel()
{
    return m_accel;
}


/*!
 * @brief This function copies the value in member polygon
 * @param _polygon New value to be copied in member polygon
 */
void ObjectWithCovariance::polygon(
        const geometry_msgs::msg::Polygon& _polygon)
{
    m_polygon = _polygon;
}

/*!
 * @brief This function moves the value in member polygon
 * @param _polygon New value to be moved in member polygon
 */
void ObjectWithCovariance::polygon(
        geometry_msgs::msg::Polygon&& _polygon)
{
    m_polygon = std::move(_polygon);
}

/*!
 * @brief This function returns a constant reference to member polygon
 * @return Constant reference to member polygon
 */
const geometry_msgs::msg::Polygon& ObjectWithCovariance::polygon() const
{
    return m_polygon;
}

/*!
 * @brief This function returns a reference to member polygon
 * @return Reference to member polygon
 */
geometry_msgs::msg::Polygon& ObjectWithCovariance::polygon()
{
    return m_polygon;
}


/*!
 * @brief This function copies the value in member shape
 * @param _shape New value to be copied in member shape
 */
void ObjectWithCovariance::shape(
        const derived_object_msgs::msg::SolidPrimitiveWithCovariance& _shape)
{
    m_shape = _shape;
}

/*!
 * @brief This function moves the value in member shape
 * @param _shape New value to be moved in member shape
 */
void ObjectWithCovariance::shape(
        derived_object_msgs::msg::SolidPrimitiveWithCovariance&& _shape)
{
    m_shape = std::move(_shape);
}

/*!
 * @brief This function returns a constant reference to member shape
 * @return Constant reference to member shape
 */
const derived_object_msgs::msg::SolidPrimitiveWithCovariance& ObjectWithCovariance::shape() const
{
    return m_shape;
}

/*!
 * @brief This function returns a reference to member shape
 * @return Reference to member shape
 */
derived_object_msgs::msg::SolidPrimitiveWithCovariance& ObjectWithCovariance::shape()
{
    return m_shape;
}


/*!
 * @brief This function sets a value in member classification
 * @param _classification New value for member classification
 */
void ObjectWithCovariance::classification(
        uint8_t _classification)
{
    m_classification = _classification;
}

/*!
 * @brief This function returns the value of member classification
 * @return Value of member classification
 */
uint8_t ObjectWithCovariance::classification() const
{
    return m_classification;
}

/*!
 * @brief This function returns a reference to member classification
 * @return Reference to member classification
 */
uint8_t& ObjectWithCovariance::classification()
{
    return m_classification;
}


/*!
 * @brief This function sets a value in member classification_certainty
 * @param _classification_certainty New value for member classification_certainty
 */
void ObjectWithCovariance::classification_certainty(
        uint8_t _classification_certainty)
{
    m_classification_certainty = _classification_certainty;
}

/*!
 * @brief This function returns the value of member classification_certainty
 * @return Value of member classification_certainty
 */
uint8_t ObjectWithCovariance::classification_certainty() const
{
    return m_classification_certainty;
}

/*!
 * @brief This function returns a reference to member classification_certainty
 * @return Reference to member classification_certainty
 */
uint8_t& ObjectWithCovariance::classification_certainty()
{
    return m_classification_certainty;
}


/*!
 * @brief This function sets a value in member classification_age
 * @param _classification_age New value for member classification_age
 */
void ObjectWithCovariance::classification_age(
        uint32_t _classification_age)
{
    m_classification_age = _classification_age;
}

/*!
 * @brief This function returns the value of member classification_age
 * @return Value of member classification_age
 */
uint32_t ObjectWithCovariance::classification_age() const
{
    return m_classification_age;
}

/*!
 * @brief This function returns a reference to member classification_age
 * @return Reference to member classification_age
 */
uint32_t& ObjectWithCovariance::classification_age()
{
    return m_classification_age;
}




} // namespace msg


} // namespace derived_object_msgs
// Include auxiliary functions like for serializing/deserializing.
#include "ObjectWithCovarianceCdrAux.ipp"

