// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file ObjectWithCovariance.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "ObjectWithCovariance.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>
















derived_object_msgs::msg::ObjectWithCovariance::ObjectWithCovariance()
{
    // m_header com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@5552768b

    // m_id com.eprosima.idl.parser.typecode.PrimitiveTypeCode@3c947bc5
    m_id = 0;
    // m_detection_level com.eprosima.idl.parser.typecode.PrimitiveTypeCode@609db43b
    m_detection_level = 0;
    // m_object_classified com.eprosima.idl.parser.typecode.PrimitiveTypeCode@55f616cf
    m_object_classified = false;
    // m_pose com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@1356d4d4

    // m_twist com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@c03cf28

    // m_accel com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@1329eff

    // m_polygon com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@6497b078

    // m_shape com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@41c2284a

    // m_classification com.eprosima.idl.parser.typecode.PrimitiveTypeCode@1fb700ee
    m_classification = 0;
    // m_classification_certainty com.eprosima.idl.parser.typecode.PrimitiveTypeCode@4f67eb2a
    m_classification_certainty = 0;
    // m_classification_age com.eprosima.idl.parser.typecode.PrimitiveTypeCode@4a668b6e
    m_classification_age = 0;

}

derived_object_msgs::msg::ObjectWithCovariance::~ObjectWithCovariance()
{











}

derived_object_msgs::msg::ObjectWithCovariance::ObjectWithCovariance(
        const ObjectWithCovariance& x)
{
    m_header = x.m_header;
    m_id = x.m_id;
    m_detection_level = x.m_detection_level;
    m_object_classified = x.m_object_classified;
    m_pose = x.m_pose;
    m_twist = x.m_twist;
    m_accel = x.m_accel;
    m_polygon = x.m_polygon;
    m_shape = x.m_shape;
    m_classification = x.m_classification;
    m_classification_certainty = x.m_classification_certainty;
    m_classification_age = x.m_classification_age;
}

derived_object_msgs::msg::ObjectWithCovariance::ObjectWithCovariance(
        ObjectWithCovariance&& x)
{
    m_header = std::move(x.m_header);
    m_id = x.m_id;
    m_detection_level = x.m_detection_level;
    m_object_classified = x.m_object_classified;
    m_pose = std::move(x.m_pose);
    m_twist = std::move(x.m_twist);
    m_accel = std::move(x.m_accel);
    m_polygon = std::move(x.m_polygon);
    m_shape = std::move(x.m_shape);
    m_classification = x.m_classification;
    m_classification_certainty = x.m_classification_certainty;
    m_classification_age = x.m_classification_age;
}

derived_object_msgs::msg::ObjectWithCovariance& derived_object_msgs::msg::ObjectWithCovariance::operator =(
        const ObjectWithCovariance& x)
{

    m_header = x.m_header;
    m_id = x.m_id;
    m_detection_level = x.m_detection_level;
    m_object_classified = x.m_object_classified;
    m_pose = x.m_pose;
    m_twist = x.m_twist;
    m_accel = x.m_accel;
    m_polygon = x.m_polygon;
    m_shape = x.m_shape;
    m_classification = x.m_classification;
    m_classification_certainty = x.m_classification_certainty;
    m_classification_age = x.m_classification_age;

    return *this;
}

derived_object_msgs::msg::ObjectWithCovariance& derived_object_msgs::msg::ObjectWithCovariance::operator =(
        ObjectWithCovariance&& x)
{

    m_header = std::move(x.m_header);
    m_id = x.m_id;
    m_detection_level = x.m_detection_level;
    m_object_classified = x.m_object_classified;
    m_pose = std::move(x.m_pose);
    m_twist = std::move(x.m_twist);
    m_accel = std::move(x.m_accel);
    m_polygon = std::move(x.m_polygon);
    m_shape = std::move(x.m_shape);
    m_classification = x.m_classification;
    m_classification_certainty = x.m_classification_certainty;
    m_classification_age = x.m_classification_age;

    return *this;
}

bool derived_object_msgs::msg::ObjectWithCovariance::operator ==(
        const ObjectWithCovariance& x) const
{

    return (m_header == x.m_header && m_id == x.m_id && m_detection_level == x.m_detection_level && m_object_classified == x.m_object_classified && m_pose == x.m_pose && m_twist == x.m_twist && m_accel == x.m_accel && m_polygon == x.m_polygon && m_shape == x.m_shape && m_classification == x.m_classification && m_classification_certainty == x.m_classification_certainty && m_classification_age == x.m_classification_age);
}

bool derived_object_msgs::msg::ObjectWithCovariance::operator !=(
        const ObjectWithCovariance& x) const
{
    return !(*this == x);
}

size_t derived_object_msgs::msg::ObjectWithCovariance::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += std_msgs::msg::Header::getMaxCdrSerializedSize(current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += geometry_msgs::msg::PoseWithCovariance::getMaxCdrSerializedSize(current_alignment);
    current_alignment += geometry_msgs::msg::TwistWithCovariance::getMaxCdrSerializedSize(current_alignment);
    current_alignment += geometry_msgs::msg::AccelWithCovariance::getMaxCdrSerializedSize(current_alignment);
    current_alignment += geometry_msgs::msg::Polygon::getMaxCdrSerializedSize(current_alignment);
    current_alignment += derived_object_msgs::msg::SolidPrimitiveWithCovariance::getMaxCdrSerializedSize(current_alignment);
    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

size_t derived_object_msgs::msg::ObjectWithCovariance::getCdrSerializedSize(
        const derived_object_msgs::msg::ObjectWithCovariance& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += std_msgs::msg::Header::getCdrSerializedSize(data.header(), current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += geometry_msgs::msg::PoseWithCovariance::getCdrSerializedSize(data.pose(), current_alignment);
    current_alignment += geometry_msgs::msg::TwistWithCovariance::getCdrSerializedSize(data.twist(), current_alignment);
    current_alignment += geometry_msgs::msg::AccelWithCovariance::getCdrSerializedSize(data.accel(), current_alignment);
    current_alignment += geometry_msgs::msg::Polygon::getCdrSerializedSize(data.polygon(), current_alignment);
    current_alignment += derived_object_msgs::msg::SolidPrimitiveWithCovariance::getCdrSerializedSize(data.shape(), current_alignment);
    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

void derived_object_msgs::msg::ObjectWithCovariance::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_header;
    scdr << m_id;
    scdr << m_detection_level;
    scdr << m_object_classified;
    scdr << m_pose;
    scdr << m_twist;
    scdr << m_accel;
    scdr << m_polygon;
    scdr << m_shape;
    scdr << m_classification;
    scdr << m_classification_certainty;
    scdr << m_classification_age;

}

void derived_object_msgs::msg::ObjectWithCovariance::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_header;
    dcdr >> m_id;
    dcdr >> m_detection_level;
    dcdr >> m_object_classified;
    dcdr >> m_pose;
    dcdr >> m_twist;
    dcdr >> m_accel;
    dcdr >> m_polygon;
    dcdr >> m_shape;
    dcdr >> m_classification;
    dcdr >> m_classification_certainty;
    dcdr >> m_classification_age;
}

/*!
 * @brief This function copies the value in member header
 * @param _header New value to be copied in member header
 */
void derived_object_msgs::msg::ObjectWithCovariance::header(
        const std_msgs::msg::Header& _header)
{
    m_header = _header;
}

/*!
 * @brief This function moves the value in member header
 * @param _header New value to be moved in member header
 */
void derived_object_msgs::msg::ObjectWithCovariance::header(
        std_msgs::msg::Header&& _header)
{
    m_header = std::move(_header);
}

/*!
 * @brief This function returns a constant reference to member header
 * @return Constant reference to member header
 */
const std_msgs::msg::Header& derived_object_msgs::msg::ObjectWithCovariance::header() const
{
    return m_header;
}

/*!
 * @brief This function returns a reference to member header
 * @return Reference to member header
 */
std_msgs::msg::Header& derived_object_msgs::msg::ObjectWithCovariance::header()
{
    return m_header;
}
/*!
 * @brief This function sets a value in member id
 * @param _id New value for member id
 */
void derived_object_msgs::msg::ObjectWithCovariance::id(
        uint32_t _id)
{
    m_id = _id;
}

/*!
 * @brief This function returns the value of member id
 * @return Value of member id
 */
uint32_t derived_object_msgs::msg::ObjectWithCovariance::id() const
{
    return m_id;
}

/*!
 * @brief This function returns a reference to member id
 * @return Reference to member id
 */
uint32_t& derived_object_msgs::msg::ObjectWithCovariance::id()
{
    return m_id;
}

/*!
 * @brief This function sets a value in member detection_level
 * @param _detection_level New value for member detection_level
 */
void derived_object_msgs::msg::ObjectWithCovariance::detection_level(
        uint8_t _detection_level)
{
    m_detection_level = _detection_level;
}

/*!
 * @brief This function returns the value of member detection_level
 * @return Value of member detection_level
 */
uint8_t derived_object_msgs::msg::ObjectWithCovariance::detection_level() const
{
    return m_detection_level;
}

/*!
 * @brief This function returns a reference to member detection_level
 * @return Reference to member detection_level
 */
uint8_t& derived_object_msgs::msg::ObjectWithCovariance::detection_level()
{
    return m_detection_level;
}

/*!
 * @brief This function sets a value in member object_classified
 * @param _object_classified New value for member object_classified
 */
void derived_object_msgs::msg::ObjectWithCovariance::object_classified(
        bool _object_classified)
{
    m_object_classified = _object_classified;
}

/*!
 * @brief This function returns the value of member object_classified
 * @return Value of member object_classified
 */
bool derived_object_msgs::msg::ObjectWithCovariance::object_classified() const
{
    return m_object_classified;
}

/*!
 * @brief This function returns a reference to member object_classified
 * @return Reference to member object_classified
 */
bool& derived_object_msgs::msg::ObjectWithCovariance::object_classified()
{
    return m_object_classified;
}

/*!
 * @brief This function copies the value in member pose
 * @param _pose New value to be copied in member pose
 */
void derived_object_msgs::msg::ObjectWithCovariance::pose(
        const geometry_msgs::msg::PoseWithCovariance& _pose)
{
    m_pose = _pose;
}

/*!
 * @brief This function moves the value in member pose
 * @param _pose New value to be moved in member pose
 */
void derived_object_msgs::msg::ObjectWithCovariance::pose(
        geometry_msgs::msg::PoseWithCovariance&& _pose)
{
    m_pose = std::move(_pose);
}

/*!
 * @brief This function returns a constant reference to member pose
 * @return Constant reference to member pose
 */
const geometry_msgs::msg::PoseWithCovariance& derived_object_msgs::msg::ObjectWithCovariance::pose() const
{
    return m_pose;
}

/*!
 * @brief This function returns a reference to member pose
 * @return Reference to member pose
 */
geometry_msgs::msg::PoseWithCovariance& derived_object_msgs::msg::ObjectWithCovariance::pose()
{
    return m_pose;
}
/*!
 * @brief This function copies the value in member twist
 * @param _twist New value to be copied in member twist
 */
void derived_object_msgs::msg::ObjectWithCovariance::twist(
        const geometry_msgs::msg::TwistWithCovariance& _twist)
{
    m_twist = _twist;
}

/*!
 * @brief This function moves the value in member twist
 * @param _twist New value to be moved in member twist
 */
void derived_object_msgs::msg::ObjectWithCovariance::twist(
        geometry_msgs::msg::TwistWithCovariance&& _twist)
{
    m_twist = std::move(_twist);
}

/*!
 * @brief This function returns a constant reference to member twist
 * @return Constant reference to member twist
 */
const geometry_msgs::msg::TwistWithCovariance& derived_object_msgs::msg::ObjectWithCovariance::twist() const
{
    return m_twist;
}

/*!
 * @brief This function returns a reference to member twist
 * @return Reference to member twist
 */
geometry_msgs::msg::TwistWithCovariance& derived_object_msgs::msg::ObjectWithCovariance::twist()
{
    return m_twist;
}
/*!
 * @brief This function copies the value in member accel
 * @param _accel New value to be copied in member accel
 */
void derived_object_msgs::msg::ObjectWithCovariance::accel(
        const geometry_msgs::msg::AccelWithCovariance& _accel)
{
    m_accel = _accel;
}

/*!
 * @brief This function moves the value in member accel
 * @param _accel New value to be moved in member accel
 */
void derived_object_msgs::msg::ObjectWithCovariance::accel(
        geometry_msgs::msg::AccelWithCovariance&& _accel)
{
    m_accel = std::move(_accel);
}

/*!
 * @brief This function returns a constant reference to member accel
 * @return Constant reference to member accel
 */
const geometry_msgs::msg::AccelWithCovariance& derived_object_msgs::msg::ObjectWithCovariance::accel() const
{
    return m_accel;
}

/*!
 * @brief This function returns a reference to member accel
 * @return Reference to member accel
 */
geometry_msgs::msg::AccelWithCovariance& derived_object_msgs::msg::ObjectWithCovariance::accel()
{
    return m_accel;
}
/*!
 * @brief This function copies the value in member polygon
 * @param _polygon New value to be copied in member polygon
 */
void derived_object_msgs::msg::ObjectWithCovariance::polygon(
        const geometry_msgs::msg::Polygon& _polygon)
{
    m_polygon = _polygon;
}

/*!
 * @brief This function moves the value in member polygon
 * @param _polygon New value to be moved in member polygon
 */
void derived_object_msgs::msg::ObjectWithCovariance::polygon(
        geometry_msgs::msg::Polygon&& _polygon)
{
    m_polygon = std::move(_polygon);
}

/*!
 * @brief This function returns a constant reference to member polygon
 * @return Constant reference to member polygon
 */
const geometry_msgs::msg::Polygon& derived_object_msgs::msg::ObjectWithCovariance::polygon() const
{
    return m_polygon;
}

/*!
 * @brief This function returns a reference to member polygon
 * @return Reference to member polygon
 */
geometry_msgs::msg::Polygon& derived_object_msgs::msg::ObjectWithCovariance::polygon()
{
    return m_polygon;
}
/*!
 * @brief This function copies the value in member shape
 * @param _shape New value to be copied in member shape
 */
void derived_object_msgs::msg::ObjectWithCovariance::shape(
        const derived_object_msgs::msg::SolidPrimitiveWithCovariance& _shape)
{
    m_shape = _shape;
}

/*!
 * @brief This function moves the value in member shape
 * @param _shape New value to be moved in member shape
 */
void derived_object_msgs::msg::ObjectWithCovariance::shape(
        derived_object_msgs::msg::SolidPrimitiveWithCovariance&& _shape)
{
    m_shape = std::move(_shape);
}

/*!
 * @brief This function returns a constant reference to member shape
 * @return Constant reference to member shape
 */
const derived_object_msgs::msg::SolidPrimitiveWithCovariance& derived_object_msgs::msg::ObjectWithCovariance::shape() const
{
    return m_shape;
}

/*!
 * @brief This function returns a reference to member shape
 * @return Reference to member shape
 */
derived_object_msgs::msg::SolidPrimitiveWithCovariance& derived_object_msgs::msg::ObjectWithCovariance::shape()
{
    return m_shape;
}
/*!
 * @brief This function sets a value in member classification
 * @param _classification New value for member classification
 */
void derived_object_msgs::msg::ObjectWithCovariance::classification(
        uint8_t _classification)
{
    m_classification = _classification;
}

/*!
 * @brief This function returns the value of member classification
 * @return Value of member classification
 */
uint8_t derived_object_msgs::msg::ObjectWithCovariance::classification() const
{
    return m_classification;
}

/*!
 * @brief This function returns a reference to member classification
 * @return Reference to member classification
 */
uint8_t& derived_object_msgs::msg::ObjectWithCovariance::classification()
{
    return m_classification;
}

/*!
 * @brief This function sets a value in member classification_certainty
 * @param _classification_certainty New value for member classification_certainty
 */
void derived_object_msgs::msg::ObjectWithCovariance::classification_certainty(
        uint8_t _classification_certainty)
{
    m_classification_certainty = _classification_certainty;
}

/*!
 * @brief This function returns the value of member classification_certainty
 * @return Value of member classification_certainty
 */
uint8_t derived_object_msgs::msg::ObjectWithCovariance::classification_certainty() const
{
    return m_classification_certainty;
}

/*!
 * @brief This function returns a reference to member classification_certainty
 * @return Reference to member classification_certainty
 */
uint8_t& derived_object_msgs::msg::ObjectWithCovariance::classification_certainty()
{
    return m_classification_certainty;
}

/*!
 * @brief This function sets a value in member classification_age
 * @param _classification_age New value for member classification_age
 */
void derived_object_msgs::msg::ObjectWithCovariance::classification_age(
        uint32_t _classification_age)
{
    m_classification_age = _classification_age;
}

/*!
 * @brief This function returns the value of member classification_age
 * @return Value of member classification_age
 */
uint32_t derived_object_msgs::msg::ObjectWithCovariance::classification_age() const
{
    return m_classification_age;
}

/*!
 * @brief This function returns a reference to member classification_age
 * @return Reference to member classification_age
 */
uint32_t& derived_object_msgs::msg::ObjectWithCovariance::classification_age()
{
    return m_classification_age;
}


size_t derived_object_msgs::msg::ObjectWithCovariance::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;



    return current_align;
}

bool derived_object_msgs::msg::ObjectWithCovariance::isKeyDefined()
{
    return false;
}

void derived_object_msgs::msg::ObjectWithCovariance::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
                
}


