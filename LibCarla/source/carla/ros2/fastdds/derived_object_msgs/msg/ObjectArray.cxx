// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file ObjectArray.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "ObjectArray.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

derived_object_msgs::msg::ObjectArray::ObjectArray()
{
    // m_header com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@6db9f5a4

    // m_objects com.eprosima.idl.parser.typecode.SequenceTypeCode@1ebd319f


}

derived_object_msgs::msg::ObjectArray::~ObjectArray()
{

}

derived_object_msgs::msg::ObjectArray::ObjectArray(
        const ObjectArray& x)
{
    m_header = x.m_header;
    m_objects = x.m_objects;
}

derived_object_msgs::msg::ObjectArray::ObjectArray(
        ObjectArray&& x)
{
    m_header = std::move(x.m_header);
    m_objects = std::move(x.m_objects);
}

derived_object_msgs::msg::ObjectArray& derived_object_msgs::msg::ObjectArray::operator =(
        const ObjectArray& x)
{

    m_header = x.m_header;
    m_objects = x.m_objects;

    return *this;
}

derived_object_msgs::msg::ObjectArray& derived_object_msgs::msg::ObjectArray::operator =(
        ObjectArray&& x)
{

    m_header = std::move(x.m_header);
    m_objects = std::move(x.m_objects);

    return *this;
}

bool derived_object_msgs::msg::ObjectArray::operator ==(
        const ObjectArray& x) const
{

    return (m_header == x.m_header && m_objects == x.m_objects);
}

bool derived_object_msgs::msg::ObjectArray::operator !=(
        const ObjectArray& x) const
{
    return !(*this == x);
}

size_t derived_object_msgs::msg::ObjectArray::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += std_msgs::msg::Header::getMaxCdrSerializedSize(current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    for(size_t a = 0; a < 100; ++a)
    {
        current_alignment += derived_object_msgs::msg::Object::getMaxCdrSerializedSize(current_alignment);}


    return current_alignment - initial_alignment;
}

size_t derived_object_msgs::msg::ObjectArray::getCdrSerializedSize(
        const derived_object_msgs::msg::ObjectArray& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += std_msgs::msg::Header::getCdrSerializedSize(data.header(), current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    for(size_t a = 0; a < data.objects().size(); ++a)
    {
        current_alignment += derived_object_msgs::msg::Object::getCdrSerializedSize(data.objects().at(a), current_alignment);}


    return current_alignment - initial_alignment;
}

void derived_object_msgs::msg::ObjectArray::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_header;
    scdr << m_objects;

}

void derived_object_msgs::msg::ObjectArray::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_header;
    dcdr >> m_objects;
}

/*!
 * @brief This function copies the value in member header
 * @param _header New value to be copied in member header
 */
void derived_object_msgs::msg::ObjectArray::header(
        const std_msgs::msg::Header& _header)
{
    m_header = _header;
}

/*!
 * @brief This function moves the value in member header
 * @param _header New value to be moved in member header
 */
void derived_object_msgs::msg::ObjectArray::header(
        std_msgs::msg::Header&& _header)
{
    m_header = std::move(_header);
}

/*!
 * @brief This function returns a constant reference to member header
 * @return Constant reference to member header
 */
const std_msgs::msg::Header& derived_object_msgs::msg::ObjectArray::header() const
{
    return m_header;
}

/*!
 * @brief This function returns a reference to member header
 * @return Reference to member header
 */
std_msgs::msg::Header& derived_object_msgs::msg::ObjectArray::header()
{
    return m_header;
}
/*!
 * @brief This function copies the value in member objects
 * @param _objects New value to be copied in member objects
 */
void derived_object_msgs::msg::ObjectArray::objects(
        const std::vector<derived_object_msgs::msg::Object>& _objects)
{
    m_objects = _objects;
}

/*!
 * @brief This function moves the value in member objects
 * @param _objects New value to be moved in member objects
 */
void derived_object_msgs::msg::ObjectArray::objects(
        std::vector<derived_object_msgs::msg::Object>&& _objects)
{
    m_objects = std::move(_objects);
}

/*!
 * @brief This function returns a constant reference to member objects
 * @return Constant reference to member objects
 */
const std::vector<derived_object_msgs::msg::Object>& derived_object_msgs::msg::ObjectArray::objects() const
{
    return m_objects;
}

/*!
 * @brief This function returns a reference to member objects
 * @return Reference to member objects
 */
std::vector<derived_object_msgs::msg::Object>& derived_object_msgs::msg::ObjectArray::objects()
{
    return m_objects;
}

size_t derived_object_msgs::msg::ObjectArray::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;



    return current_align;
}

bool derived_object_msgs::msg::ObjectArray::isKeyDefined()
{
    return false;
}

void derived_object_msgs::msg::ObjectArray::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
      
}


